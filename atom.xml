<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KeKeFund</title>
  <subtitle>金融 · Python · 技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kekefund.com/"/>
  <updated>2019-05-09T09:51:50.063Z</updated>
  <id>http://www.kekefund.com/</id>
  
  <author>
    <name>Binger Chen</name>
    <email>cbbing@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【运维】Nginx网关与热部署</title>
    <link href="http://www.kekefund.com/2019/05/09/nginx-reload/"/>
    <id>http://www.kekefund.com/2019/05/09/nginx-reload/</id>
    <published>2019-05-09T09:28:57.000Z</published>
    <updated>2019-05-09T09:51:50.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h1><p>Nginx是一个轻量级的Http服务器，Nginx包含一个单一的master进程和多个worker进程。所有这些进程都是单线程，并且设计为同时处理成千上万个连接。Nginx使用操作系统事件机制来快速响应这些请求。<br>Nginx的master进程负责读取配置文件、处理套接字、派生worker进程、打开日志文件和编译嵌入式的Perl脚本。<br>Nginx的worker进程运行在一个忙碌的事件循环处理中，用于处理进入的连接。每一个Nginx模块被构筑在worker中，因此任何请求处理、过滤、处理代理的连接和更多的操作都在worker进程中完成。</p>
<p><img src="http://pic.cbbing.com/nginx-reload01.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker 中运行的nginx</span></div><div class="line">root<span class="number"> 3699 </span>3675<span class="number"> 0 </span>2018 ? 00:00:00 nginx: master process /opt/gitlab/embedded/sbin/nginx -p /var/opt/gitlab/nginx</div><div class="line">systemd+<span class="number"> 3770 </span>3699<span class="number"> 0 </span>2018 ? 00:16:35 nginx: worker process</div><div class="line">systemd+<span class="number"> 3771 </span>3699<span class="number"> 0 </span>2018 ? 00:17:19 nginx: worker process</div><div class="line">systemd+<span class="number"> 3772 </span>3699<span class="number"> 0 </span>2018 ? 00:15:19 nginx: worker process</div><div class="line">systemd+<span class="number"> 3773 </span>3699<span class="number"> 0 </span>2018 ? 00:24:05 nginx: worker process</div><div class="line">systemd+<span class="number"> 3774 </span>3699<span class="number"> 0 </span>2018 ? 00:01:45 nginx: cache manager process</div></pre></td></tr></table></figure>
<h1 id="Nginx-容器实例"><a href="#Nginx-容器实例" class="headerlink" title="Nginx 容器实例"></a>Nginx 容器实例</h1><p>为了方便扩展和迁移，公司的nginx都跑在Docker环境中。Docker版的nginx可以一键迁移，自动重启，相当于进程守护。<br><a href="https://hub.docker.com/_/nginx" target="_blank" rel="external">nginx官方镜像</a>不支持ssl，目前的浏览器都把非https的网站标识为不安全，因此支持https是非常必要的，本文在<a href="https://hub.docker.com/r/marvambass/nginx-ssl-secure" target="_blank" rel="external">marvambass/nginx-ssl-secure</a>镜像的基础上做了部分修改，以满足需要，镜像下载地址为：<a href="https://hub.docker.com/r/cbbing/nginx-ssl-secure" target="_blank" rel="external">https://hub.docker.com/r/cbbing/nginx-ssl-secure</a></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="docker-compose-yml文件"><a href="#docker-compose-yml文件" class="headerlink" title="docker-compose.yml文件"></a>docker-compose.yml文件</h2><p>下面为最常用的nginx运行的docker配置，对外开放80，443端口，即http和https。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2.1'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  nginx:</div><div class="line">    image: cbbing/nginx-ssl-secure</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./<span class="keyword">conf</span>/<span class="keyword">conf</span>.d/cer:/etc/nginx/external</div><div class="line">      - ./<span class="keyword">conf</span>/<span class="keyword">conf</span>.d:/etc/nginx/<span class="keyword">conf</span>.d</div><div class="line">      - /mydata/logs/nginx_log<span class="variable">s:</span>/var/<span class="built_in">log</span>/nginx</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure></p>
<p>说明：<br>读取conf配置，映射到宿主机的conf/conf.d文件夹<br>读取cer证书，映射到宿主机的conf/conf.d/cer文件夹<br>日志文件映射到宿主机的/mydata/logs/nginx_logs<br>restart设置为always，相当于进程守护，宕掉后自动重启。</p>
<h2 id="conf配置"><a href="#conf配置" class="headerlink" title="conf配置"></a>conf配置</h2><p>平时打交道最多的就是conf文件，热部署。<br>一个典型的conf文件如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> xxx_api&#123;</div><div class="line">    <span class="attribute">server</span> <span class="number">10.105.10.1:992</span> ;    <span class="comment">#api03</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://xxx_api;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/xxx_api_http.log  main;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_certificate</span> conf.d/cer/1_api.xxx.com_bundle.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> conf.d/cer/2_api.xxx.com.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://xxx_api;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/xxx_api_https.log  main;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一部分upstream，可以定义多个后端服务器，通过IPHash/最小连接/轮询/加权轮询/主备等策略实现负载均衡。<br>第二部分server，是域名访问的配置项，包括端口，具体域名，location中转设置项<br>第三部分log，是日志存储的路径。日志的格式在nginx.conf中定义的。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                  <span class="string">'<span class="variable">$status</span> [<span class="variable">$request_body</span>] <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                  <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div></pre></td></tr></table></figure></p>
<p>也可以只定义一个443端口，80端口通过如下方式重定义：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> https://api.xxx.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h2><p>一套成熟的API网关包括如下几个方面：<br><img src="http://pic.cbbing.com/nginx-reload03.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>API管理包括：</p>
<ul>
<li>定义和发布</li>
<li>安全</li>
<li>流量控制</li>
<li>持续监控与维护</li>
<li>API分析</li>
</ul>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">upstream api&#123;</div><div class="line">    least_conn<span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">891</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">892</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">893</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">894</span> <span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里运行了4个api服务，通过最小连接策略调用。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_196_57_centos ~]# docker ps</div><div class="line">2c8792e403bf <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">891</span>-&gt;<span class="number">8000</span>/tcp p891_api_1</div><div class="line">2c8792e403ba <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">892</span>-&gt;<span class="number">8000</span>/tcp p892_api_1</div><div class="line">2c8792e403bb <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">893</span>-&gt;<span class="number">8000</span>/tcp p893_api_1</div><div class="line">2c8792e403bc <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">894</span>-&gt;<span class="number">8000</span>/tcp p894_api_1</div></pre></td></tr></table></figure></p>
<p><img src="http://pic.cbbing.com/nginx-reload02.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<h2 id="静态网页服务器"><a href="#静态网页服务器" class="headerlink" title="静态网页服务器"></a>静态网页服务器</h2><p>静态文件配置demo.conf<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> www.xxx.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>    /home/demo;</div><div class="line">        <span class="attribute">index</span>   login.html;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/demo_http.log  main;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> www.xxx.com;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_certificate</span> conf.d/cer/1_www.xxx.com_bundle.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> conf.d/cer/2_www.xxx.com.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>    /home/demo;</div><div class="line">        <span class="attribute">index</span>   login.html;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/demo_https.log  main;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个配置即以/home/demo目录为静态文件目录，不过/home/demo是容器内的路径，需要映射到宿主机目录/mydata/demo，实现动态更新。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">version:</span> <span class="string">'2.1'</span></div><div class="line"><span class="string">services:</span></div><div class="line"><span class="symbol">  nginx:</span></div><div class="line"><span class="symbol">    image:</span> cbbing/nginx-ssl-secure</div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - .<span class="regexp">/conf/</span>conf.d<span class="regexp">/cer:/</span>etc<span class="regexp">/nginx/</span>external</div><div class="line">      - .<span class="regexp">/conf/</span>conf.<span class="string">d:</span><span class="regexp">/etc/</span>nginx/conf.d</div><div class="line">      - <span class="regexp">/mydata/</span>logs<span class="regexp">/nginx_logs:/</span>var<span class="regexp">/log/</span>nginx</div><div class="line">      - <span class="regexp">/mydata/</span><span class="string">demo:</span><span class="regexp">/home/</span>demo</div><div class="line"><span class="symbol"></span></div><div class="line">    ports:</div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div></pre></td></tr></table></figure></p>
<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>更新了conf文件后，执行<code>nginx -t</code>，先排查语法错误，通过后执行<code>nginx -s reload</code>重新加载配置文件实现热部署。</p>
<blockquote>
<p>nginx热部署的方式时，等旧的worker执行完成后kill掉，以更新后的配置启动新的worker</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -t</div><div class="line">nginx: [emerg] duplicate upstream <span class="string">"myweb"</span> <span class="keyword">in</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/power.xxx.<span class="keyword">conf</span>:3</div><div class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> failed</div><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -t</div><div class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</div><div class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</div><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -s reload</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="external">https://www.jianshu.com/p/5eab0f83e3b4</a><br><a href="https://www.nginx.com/blog/what-is-api-management/" target="_blank" rel="external">What Is API Management?</a><br><a href="https://cloud.tencent.com/document/product/628/11755" target="_blank" rel="external">https://cloud.tencent.com/document/product/628/11755</a><br><a href="https://cloud.tencent.com/developer/article/1149103" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1149103</a><br><a href="https://zhuanlan.zhihu.com/p/34943332" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34943332</a><br><a href="https://www.infoq.cn/article/comparing-api-gateway-performances" target="_blank" rel="external">https://www.infoq.cn/article/comparing-api-gateway-performances</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx简介&quot;&gt;&lt;a href=&quot;#Nginx简介&quot; class=&quot;headerlink&quot; title=&quot;Nginx简介&quot;&gt;&lt;/a&gt;Nginx简介&lt;/h1&gt;&lt;p&gt;Nginx是一个轻量级的Http服务器，Nginx包含一个单一的master进程和多个worker进
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="https" scheme="http://www.kekefund.com/tags/https/"/>
    
      <category term="API网关" scheme="http://www.kekefund.com/tags/API%E7%BD%91%E5%85%B3/"/>
    
      <category term="静态服务器" scheme="http://www.kekefund.com/tags/%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装Docker及docker-compose</title>
    <link href="http://www.kekefund.com/2019/03/18/docker-install/"/>
    <id>http://www.kekefund.com/2019/03/18/docker-install/</id>
    <published>2019-03-18T07:37:46.000Z</published>
    <updated>2019-03-18T07:40:00.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h1><h2 id="1-卸载旧版本（若未安装过Docker，可跳过）"><a href="#1-卸载旧版本（若未安装过Docker，可跳过）" class="headerlink" title="1. 卸载旧版本（若未安装过Docker，可跳过）"></a>1. 卸载旧版本（若未安装过Docker，可跳过）</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ sudo yum remove docker <span class="string">\</span></div><div class="line">                  docker-client <span class="string">\</span></div><div class="line">                  docker-client-latest <span class="string">\</span></div><div class="line">                  docker-common <span class="string">\</span></div><div class="line">                  docker-latest <span class="string">\</span></div><div class="line">                  docker-latest-logrotate <span class="string">\</span></div><div class="line">                  docker-logrotate <span class="string">\</span></div><div class="line">                  docker-engine</div></pre></td></tr></table></figure>
<h2 id="2-安装系统依赖及源"><a href="#2-安装系统依赖及源" class="headerlink" title="2. 安装系统依赖及源"></a>2. 安装系统依赖及源</h2><h3 id="a-安装依赖包"><a href="#a-安装依赖包" class="headerlink" title="a. 安装依赖包"></a>a. 安装依赖包</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y yum-utils \</div><div class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></div><div class="line">  lvm2</div></pre></td></tr></table></figure>
<h3 id="b-设置源"><a href="#b-设置源" class="headerlink" title="b. 设置源"></a>b. 设置源</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum-config-manager \</div><div class="line">    --<span class="built_in">add</span>-repo \</div><div class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</div></pre></td></tr></table></figure>
<h2 id="3-安装Docker-CE（社区版）"><a href="#3-安装Docker-CE（社区版）" class="headerlink" title="3. 安装Docker CE（社区版）"></a>3. 安装Docker CE（社区版）</h2><h3 id="a-安装最新版"><a href="#a-安装最新版" class="headerlink" title="a. 安装最新版"></a>a. 安装最新版</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</div></pre></td></tr></table></figure>
<h3 id="b-启动Docker"><a href="#b-启动Docker" class="headerlink" title="b. 启动Docker"></a>b. 启动Docker</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="literal">start</span> docker</div></pre></td></tr></table></figure>
<h3 id="c-设置开机自动启动"><a href="#c-设置开机自动启动" class="headerlink" title="c. 设置开机自动启动"></a>c. 设置开机自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker</div></pre></td></tr></table></figure>
<h2 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_19_15_centos</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr"> Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:33:21</span> <span class="number">2019</span></div><div class="line"> <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr"> Experimental:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span> <span class="string">Docker</span> <span class="string">Engine</span> <span class="bullet">-</span> <span class="string">Community</span></div><div class="line"><span class="attr"> Engine:</span></div><div class="line"><span class="attr">  Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line">  <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></div><div class="line">  <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line">  <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr">  Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:02:24</span> <span class="number">2019</span></div><div class="line">  <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr">  Experimental:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="external">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</blockquote>
<h1 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h1><h2 id="1-运行一下命令，安装最新版本"><a href="#1-运行一下命令，安装最新版本" class="headerlink" title="1. 运行一下命令，安装最新版本"></a>1. 运行一下命令，安装最新版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</div></pre></td></tr></table></figure>
<blockquote>
<p>要安装指定版本， 替换1.23.2为你选择的版本</p>
</blockquote>
<h2 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</div></pre></td></tr></table></figure>
<h2 id="3-测试安装是否成功"><a href="#3-测试安装是否成功" class="headerlink" title="3. 测试安装是否成功"></a>3. 测试安装是否成功</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@VM_19_15_centos ~]</span># <span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span></div><div class="line"><span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span> 1<span class="selector-class">.23</span><span class="selector-class">.2</span>, <span class="selector-tag">build</span> 1110<span class="selector-tag">ad01</span></div><div class="line"><span class="selector-tag">docker-py</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">CPython</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">OpenSSL</span> <span class="selector-tag">version</span>: <span class="selector-tag">OpenSSL</span> 1<span class="selector-class">.1</span><span class="selector-class">.0f</span> 25 <span class="selector-tag">May</span> 2017</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装Docker&quot;&gt;&lt;a href=&quot;#一、安装Docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装Docker&quot;&gt;&lt;/a&gt;一、安装Docker&lt;/h1&gt;&lt;h2 id=&quot;1-卸载旧版本（若未安装过Docker，可跳过）&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="centos7" scheme="http://www.kekefund.com/tags/centos7/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="docker-compose" scheme="http://www.kekefund.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群搭建 - ZooKeeper</title>
    <link href="http://www.kekefund.com/2018/12/04/kafka-zookeeper/"/>
    <id>http://www.kekefund.com/2018/12/04/kafka-zookeeper/</id>
    <published>2018-12-04T08:21:03.000Z</published>
    <updated>2018-12-04T08:31:41.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是ZooKeeper？"><a href="#一、什么是ZooKeeper？" class="headerlink" title="一、什么是ZooKeeper？"></a>一、什么是ZooKeeper？</h1><p>ZooKeeper（动物园管理员），顾名思义，是用来管理Hadoop（大象）、Hive（蜜蜂）、Pig（小猪）的管理员，同时Apache HBase、Apache Solr、LinkedIn Sensei等众多项目中都采用了ZooKeeper。<br><a id="more"></a></p>
<p>ZooKeeper是一个集中式服务，用于维护配置信息、命名、提供分布式同步和提供组服务。所有这些类型的服务都以某种形式被分布式应用程序使用。每次它们被实现时，都有大量的工作用于修复不可避免的bug和竞选条件。由于实现这类服务的困难，应用程序最初通常跳过它们，这使得它们在存在更改时变得脆弱，并且难以管理。即使正确完成，这些服务的不同实现也会在部署应用程序时导致管理复杂性。</p>
<h1 id="二、Zookeeper集群"><a href="#二、Zookeeper集群" class="headerlink" title="二、Zookeeper集群"></a>二、Zookeeper集群</h1><p>Kafka使用Zookeeper来存储集群元数据以及消费者元数据。Zookeeper集群被称为群组。Zookeeper使用的是一致性协议，所以建议每个群组里应该包含奇数个节点（比如3个、5个等），因为只有当群组里的大多数节点（也就是法定人数）处于可用状态，Zookeeper才能处理外部的请求。也就是说，如果3个节点的集群，允许1个节点失效。如果5个节点的集群，允许2个节点失效。</p>
<h1 id="三、Docker方式配置ZooKeeper"><a href="#三、Docker方式配置ZooKeeper" class="headerlink" title="三、Docker方式配置ZooKeeper"></a>三、Docker方式配置ZooKeeper</h1><p>myid文件：标识要写到快照目录下面myid文件里</p>
<p>采用Docker镜像：wurstmeister/zookeeper，部署一个3节点的集群。</p>
<h2 id="节点一："><a href="#节点一：" class="headerlink" title="节点一："></a>节点一：</h2><ul>
<li>docker-compose.yml</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2181:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
<ul>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">10.150</span>.<span class="number">19.15</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">10.100</span>.<span class="number">124.217</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="节点二："><a href="#节点二：" class="headerlink" title="节点二："></a>节点二：</h2><ul>
<li><p>docker-compose.yml</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2180:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
</li>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">10.100</span>.<span class="number">158.245</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">10.100</span>.<span class="number">124.217</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="节点三："><a href="#节点三：" class="headerlink" title="节点三："></a>节点三：</h2><ul>
<li><p>docker-compose.yml</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2179:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
</li>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">10.100</span>.<span class="number">158.245</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">10.100</span>.<span class="number">19.15</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、查看ZooKeeper状态"><a href="#四、查看ZooKeeper状态" class="headerlink" title="四、查看ZooKeeper状态"></a>四、查看ZooKeeper状态</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 服务器1</span></div><div class="line"></div><div class="line">[root@VM_158_24_centos ~]<span class="comment"># docker exec -it s1_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: leader</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器2</span></div><div class="line"> </div><div class="line">[root@VM_19_15_centos ~]<span class="comment"># docker exec -it s2_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器3</span></div><div class="line"> </div><div class="line">[root@VM_124_27_centos ~]<span class="comment"># docker exec -it s3_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<p>停掉leader，2个follower的状态有变化，如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 服务器<span class="number">1</span></div><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]# docker stop s1_zookeeper_1</div><div class="line">s1_zookeeper_1</div><div class="line"> </div><div class="line"> </div><div class="line"># 服务器<span class="number">2</span></div><div class="line"> </div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">555</span> [myid:<span class="number">2</span>] - WARN [WorkerSender[myid=<span class="number">2</span>]:QuorumCnxManager@<span class="number">400</span>] - Cannot open channel to <span class="number">1</span> <span class="meta">at</span> election address /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span>:<span class="number">3888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.java:<span class="number">381</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.java:<span class="number">354</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.java:<span class="number">452</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.java:<span class="number">433</span>)</div><div class="line"> <span class="meta">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">556</span> [myid:<span class="number">2</span>] - INFO [WorkerSender[myid=<span class="number">2</span>]:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span> to address: /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">556</span> [myid:<span class="number">2</span>] - INFO [WorkerReceiver[myid=<span class="number">2</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">2</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer@<span class="number">844</span>] - FOLLOWING</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:ZooKeeperServer@<span class="number">173</span>] - Created server with tickTime <span class="number">2000</span> minSessionTimeout <span class="number">4000</span> maxSessionTimeout <span class="number">40000</span> datadir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/logs/version-<span class="number">2</span> snapdir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Follower@<span class="number">61</span>] - FOLLOWING - LEADER ELECTION TOOK - <span class="number">215</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">760</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span> to address: /<span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">761</span> [myid:<span class="number">2</span>] - WARN [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Learner@<span class="number">236</span>] - Unexpected exception, tries=<span class="number">0</span>, connecting to /<span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span>:<span class="number">2888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.Learner.connectToLeader(Learner.java:<span class="number">228</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:<span class="number">69</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:<span class="number">846</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">794</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Learner@<span class="number">329</span>] - Getting a snapshot from leader</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">796</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:FileTxnSnapLog@<span class="number">240</span>] - Snapshotting: <span class="number">0x500000000</span> to /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span>/snapshot<span class="meta">.500000000</span></div><div class="line"> </div><div class="line"> </div><div class="line"># 服务器<span class="number">3</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">567</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:FastLeaderElection@<span class="number">818</span>] - New election. My id = <span class="number">3</span>, proposed zxid=<span class="number">0x500000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">568</span> [myid:<span class="number">3</span>] - WARN [WorkerSender[myid=<span class="number">3</span>]:QuorumCnxManager@<span class="number">400</span>] - Cannot open channel to <span class="number">1</span> <span class="meta">at</span> election address /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span>:<span class="number">3888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.java:<span class="number">381</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.java:<span class="number">354</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.java:<span class="number">452</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.java:<span class="number">433</span>)</div><div class="line"> <span class="meta">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">569</span> [myid:<span class="number">3</span>] - INFO [WorkerSender[myid=<span class="number">3</span>]:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span> to address: /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">569</span> [myid:<span class="number">3</span>] - INFO [WorkerReceiver[myid=<span class="number">3</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">3</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">575</span> [myid:<span class="number">3</span>] - INFO [WorkerReceiver[myid=<span class="number">3</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">2</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">776</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer@<span class="number">856</span>] - LEADING</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">779</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">59</span>] - TCP NoDelay set to: true</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">780</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:ZooKeeperServer@<span class="number">173</span>] - Created server with tickTime <span class="number">2000</span> minSessionTimeout <span class="number">4000</span> maxSessionTimeout <span class="number">40000</span> datadir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/logs/version-<span class="number">2</span> snapdir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">780</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">361</span>] - LEADING - LEADER ELECTION TOOK - <span class="number">219</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">782</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">329</span>] - Follower sid: <span class="number">2</span> : info : org.apache.zookeeper.server.quorum.QuorumPeer$QuorumServer@7f54169</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">808</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">384</span>] - Synchronizing with Follower sid: <span class="number">2</span> maxCommittedLog=<span class="number">0x0</span> minCommittedLog=<span class="number">0x0</span> peerLastZxid=<span class="number">0x300000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">809</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">458</span>] - Sending SNAP</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">809</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">482</span>] - Sending snapshot last zxid of peer is <span class="number">0x300000000</span> zxid of leader is 0x600000000sent zxid of <span class="built_in">db</span> as <span class="number">0x500000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">820</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">518</span>] - Received NEWLEADER-ACK message from <span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">820</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">952</span>] - Have quorum of supporters, sids: [ <span class="number">2</span>,<span class="number">3</span> ]<span class="comment">; starting up and setting last processed zxid: 0x600000000</span></div></pre></td></tr></table></figure>
<p>再次查看status:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="comment">#服务器2</span></div><div class="line"> </div><div class="line">[root@VM_19_15_centos ~]<span class="comment"># docker exec -it s2_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器3</span></div><div class="line"> </div><div class="line">[root@VM_124_217_centos ~]<span class="comment"># docker exec -it s3_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: leader</div></pre></td></tr></table></figure>
<p>服务器3变成leader了！</p>
<p>重新启动服务器1，服务器1是follower</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]<span class="comment"># docker start s1_zookeeper_1</span></div><div class="line"> </div><div class="line">s1_zookeeper_1</div><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]<span class="comment"># docker exec -it s1_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://blog.51cto.com/candon123/2050091" target="_blank" rel="external">Configuring Zookeeper Cluster</a></p>
<p><a href="https://www.jianshu.com/p/ea138dba2d36" target="_blank" rel="external">多台虚拟机搭建zookeeper集群</a></p>
<p><a href="https://www.jianshu.com/p/5297773fcc1b" target="_blank" rel="external">搭建kafka集群详细教程</a></p>
<p><a href="https://zookeeper.apache.org/" target="_blank" rel="external">zookeeper.apache.org</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、什么是ZooKeeper？&quot;&gt;&lt;a href=&quot;#一、什么是ZooKeeper？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是ZooKeeper？&quot;&gt;&lt;/a&gt;一、什么是ZooKeeper？&lt;/h1&gt;&lt;p&gt;ZooKeeper（动物园管理员），顾名思义，是用来管理Hadoop（大象）、Hive（蜜蜂）、Pig（小猪）的管理员，同时Apache HBase、Apache Solr、LinkedIn Sensei等众多项目中都采用了ZooKeeper。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="http://www.kekefund.com/tags/kafka/"/>
    
      <category term="zookeeper" scheme="http://www.kekefund.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>kafka原理及Docker环境部署</title>
    <link href="http://www.kekefund.com/2018/10/26/kafka-docker/"/>
    <id>http://www.kekefund.com/2018/10/26/kafka-docker/</id>
    <published>2018-10-26T04:59:05.000Z</published>
    <updated>2018-10-26T05:09:13.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布/订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。此外，Kafka可以通过Kafka Connect连接到外部系统（用于数据输入/输出），并提供了Kafka Streams——一个Java流式处理库 (计算机)。</p>
<p>Kafka是一个分布式的、高吞吐量、高可扩展性的消息系统。Kafka 基于发布/订阅模式，通过消息解耦，使生产者和消费者异步交互，无需彼此等待。Ckafka 具有数据压缩、同时支持离线和实时数据处理等优点，适用于日志压缩收集、监控数据聚合等场景。</p>
<h1 id="关键名词："><a href="#关键名词：" class="headerlink" title="关键名词："></a>关键名词：</h1><ul>
<li><p>broker：kafka集群包含一个或者多个服务器，服务器就称作broker</p>
</li>
<li><p>producer：负责发布消息到broker</p>
</li>
<li><p>consumer：消费者，从broker获取消息</p>
</li>
<li><p>topic：发布到kafka集群的消息类别。</p>
</li>
<li><p>partition：每个topic划分为多个partition。</p>
</li>
<li><p>group：每个partition分为多个group</p>
</li>
</ul>
<h1 id="架构示意图"><a href="#架构示意图" class="headerlink" title="架构示意图"></a>架构示意图</h1><p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker01.png" alt=""></p>
<p>一个典型的Kafka集群中包含若干Producer（可以是web前端FET，或者是服务器日志等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干ConsumerGroup，以及一个Zookeeper集群。</p>
<p>Kafka通过Zookeeper管理Kafka集群配置：选举Kafka broker的leader，以及在Consumer Group发生变化时进行rebalance，因为consumer消费kafka topic的partition的offsite信息是存在Zookeeper的。</p>
<p>Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker02.png" alt=""><br>一个典型的Cloud Kafka集群如上所示。其中的生产者Producer可能是网页活动产生的消息、或是服务日志等信息。生产者通过push模式将消息发布到Cloud Kafka的Broker集群，消费者通过pull模式从broker中消费消息。消费者Consumer被划分为若干个Consumer Group，此外，集群通过Zookeeper管理集群配置，进行leader选举，故障容错等。</p>
<h1 id="kafka特点："><a href="#kafka特点：" class="headerlink" title="kafka特点："></a>kafka特点：</h1><ul>
<li>它是一个处理流式数据的”发布-订阅“消息系统。</li>
<li>实时高效处理流式数据：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。</li>
<li>将数据安全存储在分布式集群。</li>
<li>它是运行在集群上的。</li>
<li>它将流式记录存储在topics中。</li>
<li>每个record由key, value和timestamp组成。</li>
</ul>
<h1 id="Docker搭建"><a href="#Docker搭建" class="headerlink" title="Docker搭建"></a>Docker搭建</h1><p>参考：<a href="https://github.com/wurstmeister/kafka-docker" target="_blank" rel="external">https://github.com/wurstmeister/kafka-docker</a></p>
<p>docker-compose.yml如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="attribute">version</span>: <span class="string">'2'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">zookeeper</span>:</div><div class="line">    <span class="attribute">image</span>: wurstmeister/zookeeper</div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">      - ./<span class="attribute">data</span>:/data</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"2181:2181"</span></div><div class="line">       </div><div class="line">  <span class="attribute">kafka</span>:</div><div class="line">    <span class="attribute">image</span>: wurstmeister/kafka</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"9092:9092"</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">KAFKA_ADVERTISED_HOST_NAME</span>: <span class="number">10.154</span>.<span class="number">38.115</span></div><div class="line">      <span class="attribute">KAFKA_MESSAGE_MAX_BYTES</span>: <span class="number">2000000</span></div><div class="line">      <span class="attribute">KAFKA_CREATE_TOPICS</span>: <span class="string">"Topic1:1:3,Topic2:1:1:compact"</span></div><div class="line">      <span class="attribute">KAFKA_ZOOKEEPER_CONNECT</span>: <span class="attribute">zookeeper</span>:<span class="number">2181</span></div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">      - ./<span class="attribute">kafka-logs</span>:/kafka</div><div class="line">      - /var/run/docker.<span class="attribute">sock</span>:/var/run/docker.sock</div><div class="line"> </div><div class="line">  <span class="attribute">kafka-manager</span>:</div><div class="line">    <span class="attribute">image</span>: sheepkiller/kafka-manager</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="number">9020</span>:<span class="number">9000</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">ZK_HOSTS</span>: <span class="attribute">zookeeper</span>:<span class="number">2181</span></div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>KAFKA_ADVERTISED_HOST_NAME：Docker宿主机IP（如果你要配置多个brokers，就不能设置为 localhost 或 127.0.0.1）</li>
<li>KAFKA_MESSAGE_MAX_BYTES：kafka(message.max.bytes) 会接收单个消息size的最大限制，默认值为1000000 , ≈1M</li>
<li>KAFKA_CREATE_TOPICS：初始创建的topics，可以不设置</li>
<li>环境变量./kafka-logs为防止容器销毁时消息数据丢失。</li>
<li>容器kafka-manager为yahoo出可视化kafka WEB管理平台。</li>
</ul>
<p>操作命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 启动：</span></div><div class="line"><span class="variable">$ </span>docker-compose up -d</div><div class="line"> </div><div class="line"><span class="comment"># 增加更多Broker：</span></div><div class="line"><span class="variable">$ </span>docker-compose scale kafka=<span class="number">3</span></div><div class="line"> </div><div class="line"><span class="comment"># 合并：</span></div><div class="line"><span class="variable">$ </span>docker-compose up --scale kafka=<span class="number">3</span></div></pre></td></tr></table></figure></p>
<h1 id="Kakfa使用"><a href="#Kakfa使用" class="headerlink" title="Kakfa使用"></a>Kakfa使用</h1><h2 id="1，Kafka管理节点"><a href="#1，Kafka管理节点" class="headerlink" title="1，Kafka管理节点"></a>1，Kafka管理节点</h2><p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker03.png" alt=""></p>
<h2 id="2，主题"><a href="#2，主题" class="headerlink" title="2，主题"></a>2，主题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">environment</span>:</div><div class="line">      <span class="selector-tag">KAFKA_CREATE_TOPICS</span>: "<span class="selector-tag">Topic1</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:3</span>,<span class="selector-tag">Topic2</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:compact"</span></div></pre></td></tr></table></figure>
<p>Topic1有1个Partition和3个replicas， Topic2有2个Partition，1个replica和cleanup.policy为compact。</p>
<blockquote>
<p>Topic 1 will have 1 partition and 3 replicas, Topic 2 will have 1 partition, 1 replica and a cleanup.policy set to compact.</p>
</blockquote>
<h2 id="3，读写验证"><a href="#3，读写验证" class="headerlink" title="3，读写验证"></a>3，读写验证</h2><p>读写验证的方法有很多，这里我们用kafka容器自带的工具来验证，首先进入到kafka容器的交互模式：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -<span class="keyword">it</span> kafka_kafka_1 /bin/bash</div></pre></td></tr></table></figure>
<p>创建一个主题：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/opt/kafka/bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">31</span><span class="string">.</span><span class="comment">84:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">replication</span><span class="literal">-</span><span class="comment">factor</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">partitions</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">my</span><span class="literal">-</span><span class="comment">test</span></div></pre></td></tr></table></figure></p>
<p>查看刚创建的主题：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">opt</span>/kafka/bin/kafka-topics.<span class="keyword">sh</span> --<span class="keyword">list</span> --zookeeper <span class="number">192.168</span>.<span class="number">31.84</span>:<span class="number">2181</span></div></pre></td></tr></table></figure></p>
<p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker04.png" alt=""></p>
<p>发送消息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">opt</span>/kafka/bin/kafka-console-producer.<span class="keyword">sh</span> --broker-<span class="keyword">list</span> <span class="number">192.168</span>.<span class="number">31.84</span>:<span class="number">9092</span> --topic my-test</div><div class="line">This <span class="keyword">is</span> <span class="keyword">a</span> message</div><div class="line">This <span class="keyword">is</span> another message</div></pre></td></tr></table></figure></p>
<p>读取消息：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">opt</span>/kafka/<span class="keyword">bin/kafka-console-consumer.sh </span>--<span class="keyword">bootstrap-server </span><span class="number">192</span>.<span class="number">168</span>.<span class="number">31</span>.<span class="number">84</span>:<span class="number">9092</span> --topic my-test --from-<span class="keyword">beginning</span></div></pre></td></tr></table></figure></p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>日志收集：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li>
</ul>
<p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker05.png" alt=""></p>
<ul>
<li>消息系统：解耦和生产者和消费者、缓存消息等。</li>
</ul>
<ul>
<li>用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li>
</ul>
<ul>
<li>运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li>
</ul>
<ul>
<li>流式处理：比如spark streaming和storm</li>
</ul>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>1，<a href="https://www.jianshu.com/p/bfeceb3548ad" target="_blank" rel="external">https://www.jianshu.com/p/bfeceb3548ad</a><br>2，<a href="https://www.jianshu.com/p/7f089cdff29a" target="_blank" rel="external">https://www.jianshu.com/p/7f089cdff29a</a><br>3，<a href="https://www.cnblogs.com/iforever/p/9130983.html" target="_blank" rel="external">https://www.cnblogs.com/iforever/p/9130983.html</a><br>4，<a href="http://dataunion.org/19045.html" target="_blank" rel="external">利用flume+kafka+storm+mysql构建大数据实时系统</a><br>5，<a href="http://www.dengshenyu.com/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/2017/11/14/kafka-consumer.html" target="_blank" rel="external">Kafka系列（四）Kafka消费者：从Kafka中读取数据</a><br>6，<a href="https://bbs.huaweicloud.com/blogs/b3a46198d03211e7b8317ca23e93a891" target="_blank" rel="external">基于Docker搭建分布式消息队列Kafka</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术原理&quot;&gt;&lt;a href=&quot;#技术原理&quot; class=&quot;headerlink&quot; title=&quot;技术原理&quot;&gt;&lt;/a&gt;技术原理&lt;/h1&gt;&lt;p&gt;Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="kafka" scheme="http://www.kekefund.com/tags/kafka/"/>
    
      <category term="zookeeper" scheme="http://www.kekefund.com/tags/zookeeper/"/>
    
      <category term="kafka-manager" scheme="http://www.kekefund.com/tags/kafka-manager/"/>
    
  </entry>
  
  <entry>
    <title>redash部署使用</title>
    <link href="http://www.kekefund.com/2018/09/12/redash-use/"/>
    <id>http://www.kekefund.com/2018/09/12/redash-use/</id>
    <published>2018-09-12T03:13:42.000Z</published>
    <updated>2018-09-21T07:50:46.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>从<a href="https://github.com/getredash/redash" target="_blank" rel="external">https://github.com/getredash/redash</a> 拉取代码，运行docker-compose.production.yml</p>
<h2 id="1，docker-compose文件调整"><a href="#1，docker-compose文件调整" class="headerlink" title="1，docker-compose文件调整"></a>1，docker-compose文件调整</h2><p>主要修改了两处：</p>
<p>1，增加了redis和postgres的db文件与宿主机的映射，不让docker容器停止后数据丢失。</p>
<blockquote>
<p>官方默认的docker-compose.production.yml在docker-compose down 命令后，所有的配置信息都丢失了</p>
</blockquote>
<p>2，增加了redis和postgres的端口映射，方便调试，线上环境也可以关掉。</p>
<p>3，修改REDASH_COOKIE_SECRET。</p>
<p>修改后的docker-compose.production.yml文件如下：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta"># This is an example configuration for Docker Compose. Make sure to atleast update</span></div><div class="line"><span class="meta"># the cookie secret &amp; postgres database password.</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Some other recommendations:</span></div><div class="line"><span class="meta"># 1. To persist Postgres data, assign it a volume host location.</span></div><div class="line"><span class="meta"># 2. Split the worker service to adhoc workers and scheduled queries workers.</span></div><div class="line"><span class="symbol">version:</span> <span class="string">'2'</span></div><div class="line"><span class="symbol">services:</span></div><div class="line"><span class="symbol">  server:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    command:</span> server</div><div class="line"><span class="symbol">    depends_on:</span></div><div class="line">      - postgres</div><div class="line">      - redis</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line"><span class="symbol">    environment:</span></div><div class="line"><span class="symbol">      PYTHONUNBUFFERED:</span> <span class="number">0</span></div><div class="line"><span class="symbol">      REDASH_LOG_LEVEL:</span> <span class="string">"INFO"</span></div><div class="line"><span class="symbol">      REDASH_REDIS_URL:</span> <span class="string">"redis://redis:6379/0"</span></div><div class="line"><span class="symbol">      REDASH_DATABASE_URL:</span> <span class="string">"postgresql://postgres@postgres/postgres"</span></div><div class="line"><span class="symbol">      REDASH_COOKIE_SECRET:</span> <span class="string">"Q422k6vaXUk8"</span></div><div class="line"><span class="symbol">      REDASH_WEB_WORKERS:</span> <span class="number">4</span>      </div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  worker:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    command:</span> scheduler</div><div class="line"><span class="symbol">    environment:</span></div><div class="line"><span class="symbol">      PYTHONUNBUFFERED:</span> <span class="number">0</span></div><div class="line"><span class="symbol">      REDASH_LOG_LEVEL:</span> <span class="string">"INFO"</span></div><div class="line"><span class="symbol">      REDASH_REDIS_URL:</span> <span class="string">"redis://redis:6379/0"</span></div><div class="line"><span class="symbol">      REDASH_DATABASE_URL:</span> <span class="string">"postgresql://postgres@postgres/postgres"</span></div><div class="line"><span class="symbol">      QUEUES:</span> <span class="string">"queries,scheduled_queries,celery"</span></div><div class="line"><span class="symbol">      WORKERS_COUNT:</span> <span class="number">2</span></div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  redis:</span></div><div class="line"><span class="symbol">    image:</span> redis:<span class="number">3.0</span>-alpine</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">    - <span class="string">"6379:6379"</span></div><div class="line"><span class="symbol">    volumes:</span> </div><div class="line">      - .<span class="meta-keyword">/data/</span>redis_data:/data</div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  postgres:</span></div><div class="line"><span class="symbol">    image:</span> postgres:<span class="number">9.5</span><span class="number">.6</span>-alpine</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">    - <span class="string">"5432:5432"</span></div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - .<span class="meta-keyword">/data/</span>postgresql_data:<span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data</div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  nginx:</span></div><div class="line"><span class="symbol">    image:</span> redash/nginx:latest</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="string">"88:80"</span></div><div class="line"><span class="symbol">    depends_on:</span></div><div class="line">      - server</div><div class="line"><span class="symbol">    links:</span></div><div class="line">      - server:redash</div><div class="line"><span class="symbol">    restart:</span> always</div></pre></td></tr></table></figure>
<h2 id="2，创建db"><a href="#2，创建db" class="headerlink" title="2，创建db"></a>2，创建db</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@VM<span class="emphasis">_38_</span>115<span class="emphasis">_centos redash]# docker-compose -f docker-compose.production.yml run --rm server create_</span>db</div><div class="line"> </div><div class="line">Starting redash<span class="emphasis">_redis_</span>1</div><div class="line"> </div><div class="line">Starting redash<span class="emphasis">_postgres_</span>1</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:39,580</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/Grammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:39,601</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/PatternGrammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,707</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Context impl PostgresqlImpl.</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,708</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Will assume transactional DDL.</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,724</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Running stamp_revision -&gt; 969126bd800f</div></pre></td></tr></table></figure>
<h2 id="3，运行"><a href="#3，运行" class="headerlink" title="3，运行"></a>3，运行</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">docker-compose</span> <span class="selector-tag">-f</span> <span class="selector-tag">docker-compose</span><span class="selector-class">.production</span><span class="selector-class">.yml</span> <span class="selector-tag">up</span></div></pre></td></tr></table></figure>
<p>运行起来的容器如下:<br><img src="http://pic.cbbing.com/redash00.png" alt=""></p>
<h2 id="4，邮件配置"><a href="#4，邮件配置" class="headerlink" title="4，邮件配置"></a>4，邮件配置</h2><p>For the system to be able to send emails (for example when alerts trigger), you need to set the mail server to use and the host name of your Redash server. If you’re using one of our images, you can do this by editing the .env file:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"># Note that not all values are required, <span class="keyword">as</span> they have default values.</div><div class="line"> </div><div class="line"><span class="keyword">export</span> REDASH_MAIL_SERVER=<span class="string">""</span> # default: localhost</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_PORT=<span class="string">""</span> # default: <span class="number">25</span></div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USE_TLS=<span class="string">""</span> # default: false</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USE_SSL=<span class="string">""</span> # default: false</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USERNAME=<span class="string">""</span> # default: None</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_PASSWORD=<span class="string">""</span> # default: None</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_DEFAULT_SENDER=<span class="string">""</span> # Email address to send <span class="keyword">from</span></div><div class="line"> </div><div class="line"><span class="keyword">export</span> REDASH_HOST=<span class="string">""</span> # base address <span class="keyword">of</span> your Redash <span class="keyword">instance</span>, for example: <span class="string">"https://demo.redash.io"</span></div></pre></td></tr></table></figure>
<p>docker-compose文件中配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">server:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    environment:</span></div><div class="line">  </div><div class="line">      ...</div><div class="line"> </div><div class="line">      <span class="meta">#邮箱 </span></div><div class="line"><span class="symbol">      REDASH_MAIL_SERVER:</span> <span class="string">"smtp.exmail.qq.com"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_PORT:</span> <span class="number">465</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USE_TLS:</span> <span class="string">"false"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USE_SSL:</span> <span class="string">"true"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USERNAME:</span> <span class="string">"no-reply@yoursite.com"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_PASSWORD:</span> <span class="string">"111111"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_DEFAULT_SENDER:</span> <span class="string">"no-reply@yoursite.com"</span></div><div class="line"><span class="symbol">      REDASH_HOST:</span> <span class="string">"http://redash.mysite.com"</span></div></pre></td></tr></table></figure>
<p>测试是否配置成功：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">[root@VM<span class="emphasis">_38_</span>115<span class="emphasis">_centos ~]# docker exec -it redash_</span>server<span class="emphasis">_1 python manage.py send_</span>test_mail</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 10:02:28,627</span>][<span class="symbol">PID:37</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/Grammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 10:02:28,649</span>][<span class="symbol">PID:37</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/PatternGrammar.txt</div></pre></td></tr></table></figure>
<p>自己邮件会收到Test message。<br><img src="http://pic.cbbing.com/redash01.png" alt=""></p>
<blockquote>
<p>PS：配置成功了，但在Alerts中触发了警告，设置的接受邮件没收到警告信息。还没找到原因…</p>
</blockquote>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="1，配置数据库"><a href="#1，配置数据库" class="headerlink" title="1，配置数据库"></a>1，配置数据库</h2><p><img src="http://pic.cbbing.com/redash02.png" alt=""></p>
<h2 id="2，查询语句"><a href="#2，查询语句" class="headerlink" title="2，查询语句"></a>2，查询语句</h2><ul>
<li>获取表的更新时间<br><img src="http://pic.cbbing.com/redash03.png" alt=""></li>
</ul>
<p>增加图表展示：<br><img src="http://pic.cbbing.com/redash04.png" alt=""></p>
<h2 id="3，Dashboards"><a href="#3，Dashboards" class="headerlink" title="3，Dashboards"></a>3，Dashboards</h2><p><img src="http://pic.cbbing.com/redash05.png" alt=""></p>
<h1 id="三、用户管理"><a href="#三、用户管理" class="headerlink" title="三、用户管理"></a>三、用户管理</h1><p><img src="http://pic.cbbing.com/redash06.png" alt=""><br>添加用户<br><img src="http://pic.cbbing.com/redash07.png" alt=""></p>
<h1 id="四、特性"><a href="#四、特性" class="headerlink" title="四、特性"></a>四、特性</h1><h2 id="1，支持iframe嵌入到其它网页"><a href="#1，支持iframe嵌入到其它网页" class="headerlink" title="1，支持iframe嵌入到其它网页"></a>1，支持iframe嵌入到其它网页</h2><p>对于任何Query，表格和图形都支持embed<br><img src="http://pic.cbbing.com/redash28.png" alt=""><br>点击Embed弹出：</p>
<p><img src="http://pic.cbbing.com/redash09.png" alt=""><br>这个功能可以实现自己系统中集成报表展示。</p>
<h2 id="2，可视化图形支持的类型"><a href="#2，可视化图形支持的类型" class="headerlink" title="2，可视化图形支持的类型"></a>2，可视化图形支持的类型</h2><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><p><img src="http://pic.cbbing.com/redash10.png" alt=""></p>
<h3 id="线形图、柱状图、面积图、饼图、散点图"><a href="#线形图、柱状图、面积图、饼图、散点图" class="headerlink" title="线形图、柱状图、面积图、饼图、散点图"></a>线形图、柱状图、面积图、饼图、散点图</h3><p><img src="http://pic.cbbing.com/redash11.png" alt=""><br><img src="http://pic.cbbing.com/redash12.png" alt=""><br><img src="http://pic.cbbing.com/redash13.png" alt=""></p>
<h3 id="队列图"><a href="#队列图" class="headerlink" title="队列图"></a>队列图</h3><p><img src="http://pic.cbbing.com/redash14.png" alt=""></p>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p><img src="http://pic.cbbing.com/redash15.png" alt=""></p>
<h3 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h3><p><img src="http://pic.cbbing.com/redash16.png" alt=""></p>
<h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><p><img src="http://pic.cbbing.com/redash17.png" alt=""></p>
<h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><p><img src="http://pic.cbbing.com/redash18.png" alt=""></p>
<h3 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h3><p><img src="http://pic.cbbing.com/redash19.png" alt=""></p>
<blockquote>
<p>桑基图用于表达流量分布于结构对比，最初的发明者使用它来呈现能量的流动与分布。</p>
</blockquote>
<h3 id="旭日图（Sunburst）"><a href="#旭日图（Sunburst）" class="headerlink" title="旭日图（Sunburst）"></a>旭日图（Sunburst）</h3><p><img src="http://pic.cbbing.com/redash20.png" alt=""></p>
<h3 id="词云图"><a href="#词云图" class="headerlink" title="词云图"></a>词云图</h3><p><img src="http://pic.cbbing.com/redash21.png" alt=""></p>
<h1 id="五，实践"><a href="#五，实践" class="headerlink" title="五，实践"></a>五，实践</h1><p>根据scrapy log日志表，设计出一张bashboard监控面板：<br><img src="http://pic.cbbing.com/redash22.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://redash.io/help/open-source/setup" target="_blank" rel="external">redash邮箱设置</a></p>
<p><a href="https://redash.io/help/open-source/admin-guide/env-vars-settings" target="_blank" rel="external">redash环境变量</a></p>
<p><a href="https://redash.io/help/user-guide/visualizations/visualization-types" target="_blank" rel="external">Visualization Types</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;p&gt;从&lt;a href=&quot;https://github.com/getredash/redash&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="redash" scheme="http://www.kekefund.com/tags/redash/"/>
    
  </entry>
  
  <entry>
    <title>jenkins 批量添加任务job</title>
    <link href="http://www.kekefund.com/2018/08/29/jenkins-jobs/"/>
    <id>http://www.kekefund.com/2018/08/29/jenkins-jobs/</id>
    <published>2018-08-29T07:06:15.000Z</published>
    <updated>2018-09-21T07:50:46.088Z</updated>
    
    <content type="html"><![CDATA[<p>最近重构一个Scrapy爬虫项目，需要将300个spider的调度任务在jenkins中添加。这已经超过了手动一个一个添加任务的极限，是时候要借助工具批量添加了。</p>
<h1 id="Jenkins-API"><a href="#Jenkins-API" class="headerlink" title="Jenkins API"></a>Jenkins API</h1><p>Jenkins提供了一套远端访问的API，目前有3种方式：</p>
<ul>
<li><p>XML</p>
</li>
<li><p>JSON with JSONP support</p>
</li>
<li><p>Python</p>
</li>
</ul>
<p>远程API可以执行以下这些功能：</p>
<ul>
<li><p>创建/复制 job</p>
</li>
<li><p>触发一个新的构建</p>
</li>
<li><p>查询Jenkins的运行状态</p>
</li>
</ul>
<h1 id="Jenkins-Job模板"><a href="#Jenkins-Job模板" class="headerlink" title="Jenkins Job模板"></a>Jenkins Job模板</h1><h2 id="1，创建job"><a href="#1，创建job" class="headerlink" title="1，创建job"></a>1，创建job</h2><p>本文的思路是先在网页上手动创建一个Job，然后将Job的配置文件拷贝至本地，制作成模板。</p>
<p><img src="http://pic.cbbing.com/jenkins_job01.png" alt=""></p>
<h2 id="2，配置job"><a href="#2，配置job" class="headerlink" title="2，配置job"></a>2，配置job</h2><p>模板job主要有两块内容：</p>
<p>1，【构建触发器】定时构建</p>
<p><img src="http://pic.cbbing.com/jenkins_job02.png" alt=""></p>
<ul>
<li>【构建】执行shell</li>
</ul>
<p><img src="http://pic.cbbing.com/jenkins_job03.png" alt=""></p>
<p>其中HOST_TEST，PROJECT_TEST是在jenkins系统配置中设置的环境变量，目的是为了更换scrapyd服务器时更加灵活。</p>
<p><img src="http://pic.cbbing.com/jenkins_job05.png" alt=""></p>
<h2 id="3，制作模板"><a href="#3，制作模板" class="headerlink" title="3，制作模板"></a>3，制作模板</h2><p>进入到jenkins的安装目录（默认为/var/lib/jenkins/)，在/var/lib/jenkins/jobs/【采集】template目录下找到config.xml文件，拷贝至本地</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.1"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">project</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">actions</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">keepDependencies</span>&gt;</span>false<span class="tag">&lt;/<span class="name">keepDependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scm</span> <span class="attr">class</span>=<span class="string">"hudson.scm.NullSCM"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canRoam</span>&gt;</span>true<span class="tag">&lt;/<span class="name">canRoam</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">disabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">disabled</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockBuildWhenDownstreamBuilding</span>&gt;</span>false<span class="tag">&lt;/<span class="name">blockBuildWhenDownstreamBuilding</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockBuildWhenUpstreamBuilding</span>&gt;</span>false<span class="tag">&lt;/<span class="name">blockBuildWhenUpstreamBuilding</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">triggers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hudson.triggers.TimerTrigger</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">spec</span>&gt;</span>0 12 * * *<span class="tag">&lt;/<span class="name">spec</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">hudson.triggers.TimerTrigger</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">triggers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">concurrentBuild</span>&gt;</span>false<span class="tag">&lt;/<span class="name">concurrentBuild</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">builders</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hudson.tasks.Shell</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">command</span>&gt;</span>curl $<span class="template-variable">&#123;HOST_TEST&#125;</span><span class="xml">/schedule.json -d project=$</span><span class="template-variable">&#123;PROJECT_TEST&#125;</span><span class="xml"> -d spider='tt_test_spider'<span class="tag">&lt;/<span class="name">command</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">hudson.tasks.Shell</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">builders</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">publishers</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">buildWrappers</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>批量创建的job主要差异在spider名称和crontab定时任务的设置不同，将这两处模板化：</p>
<p>config.xml</p>
<p><img src="http://pic.cbbing.com/jenkins_job06.png" alt=""></p>
<p>该文件中有4个变量要配置：</p>
<ul>
<li><p>crontab_value</p>
</li>
<li><p>spider_name</p>
</li>
<li><p>HOST_TEMPLATE</p>
</li>
<li><p>PROJECT_TEMPLATE</p>
</li>
</ul>
<h1 id="Python-Jenkins脚本批量创建job"><a href="#Python-Jenkins脚本批量创建job" class="headerlink" title="Python-Jenkins脚本批量创建job"></a>Python-Jenkins脚本批量创建job</h1><h2 id="1，安装"><a href="#1，安装" class="headerlink" title="1，安装"></a>1，安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pip <span class="keyword">install</span> python-jenkins</div></pre></td></tr></table></figure>
<h1 id="2，脚本"><a href="#2，脚本" class="headerlink" title="2，脚本"></a>2，脚本</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jenkins</div><div class="line">template_xml=<span class="string">"config.xml"</span></div><div class="line"><span class="comment">#与网页版Jenkins登录的账号、密码一致</span></div><div class="line">server = jenkins.Jenkins(<span class="string">'http://yourip:8080/'</span>, username=<span class="string">'admin'</span>, password=<span class="string">'admin'</span>)</div><div class="line"> </div><div class="line">job_list = &#123;   </div><div class="line">    <span class="string">"test1_spider"</span>: <span class="string">"30 2 * * *"</span>,</div><div class="line">    <span class="string">"test2_spider"</span>: <span class="string">"30 3 * * *"</span>,</div><div class="line">    <span class="string">"test3_spider"</span>: <span class="string">"55 11,23 * * *"</span>,</div><div class="line">&#125;</div><div class="line"> </div><div class="line">classify = <span class="string">'采集'</span></div><div class="line">host = <span class="string">'http://0.0.0.0:6800/'</span></div><div class="line">project = <span class="string">'test_spider'</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> spider_name, crontab <span class="keyword">in</span> job_list.items():</div><div class="line">    <span class="keyword">with</span> open(template_xml) as f:</div><div class="line">        profile = f.read()</div><div class="line"> </div><div class="line">    JOB_CONFIG=profile.replace(<span class="string">"crontab_value"</span>, crontab)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"spider_name"</span>,spider_name)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"HOST_TEMPLATE"</span>, host)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"PROJECT_TEMPLATE"</span>, project)</div><div class="line"> </div><div class="line">    <span class="built_in">print</span>(JOB_CONFIG[-<span class="number">200</span>:])</div><div class="line"> </div><div class="line">    view_name = <span class="string">"【&#123;&#125;】&#123;&#125;_"</span>.format(classify, type)</div><div class="line">    server.create_job(view_name+name, JOB_CONFIG)</div><div class="line">    <span class="comment"># del_job=server.delete_job(view_name+name)</span></div><div class="line">    <span class="comment"># print(del_job)</span></div></pre></td></tr></table></figure>
<h1 id="3，结果"><a href="#3，结果" class="headerlink" title="3，结果"></a>3，结果</h1><p><img src="http://pic.cbbing.com/jenkins_job07.png" alt=""></p>
<p>搞定！分分钟创建了几百个job。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://wiki.jenkins.io/display/JENKINS/Remote+access+API" target="_blank" rel="external">https://wiki.jenkins.io/display/JENKINS/Remote+access+API</a><br><a href="http://www.xskh.club/2017/07/31/python/%E6%89%B9%E9%87%8F%E5%85%8B%E9%9A%86jenkins%E7%9A%84job/" target="_blank" rel="external">批量克隆jenkins的job</a><br><a href="https://www.cnblogs.com/znicy/p/5498609.html" target="_blank" rel="external">https://www.cnblogs.com/znicy/p/5498609.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重构一个Scrapy爬虫项目，需要将300个spider的调度任务在jenkins中添加。这已经超过了手动一个一个添加任务的极限，是时候要借助工具批量添加了。&lt;/p&gt;
&lt;h1 id=&quot;Jenkins-API&quot;&gt;&lt;a href=&quot;#Jenkins-API&quot; class=&quot;
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Jenkins" scheme="http://www.kekefund.com/tags/Jenkins/"/>
    
      <category term="api" scheme="http://www.kekefund.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Django中配置Gunicorn</title>
    <link href="http://www.kekefund.com/2018/08/24/django-gunicorn/"/>
    <id>http://www.kekefund.com/2018/08/24/django-gunicorn/</id>
    <published>2018-08-24T01:51:17.000Z</published>
    <updated>2018-08-24T02:04:32.909Z</updated>
    
    <content type="html"><![CDATA[<p>Gunicorn是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植至Ruby的独角兽（Unicorn）项目，使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。</p>
<p>Django自带的简易服务器，它是一个纯Python写的轻量级的WEB服务器，但它是为了开发而设计的，不适合在生产环境中部署。<br><a id="more"></a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8000</span></div></pre></td></tr></table></figure>
<p>在Django中配置gunicorn，适合高并发的生产环境。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>Gunicorn是基于prefork模式的Python wsgi应用服务器，支持 Unix like的系统</p>
</li>
<li><p>采用epoll (Linux下) 非阻塞网络I/O 模型</p>
</li>
<li><p>多种Worker类型可以选择 同步的，基于事件的（gevent tornado等），基于多线程的</p>
</li>
<li><p>高性能，比之uwsgi不相上下</p>
</li>
<li><p>配置使用非常简单</p>
</li>
<li><p>支持 Python 2.x &gt;= 2.6 or Python 3.x &gt;= 3.2</p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> gunicorn</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>settings.py</li>
</ul>
<p>在settings.py添加gunicorn。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    <span class="string">'gunicorn'</span>,</div><div class="line">    ...</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>gunicorn配置文件gunicorn.conf.py</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.handlers</div><div class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> WatchedFileHandler</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line">bind = <span class="string">"0.0.0.0:8091"</span>   #绑定的ip与端口</div><div class="line">backlog = <span class="number">512</span>                #监听队列数量，<span class="number">64</span><span class="number">-2048</span></div><div class="line">#chdir = <span class="string">'/home/test/server/bin'</span>  #gunicorn要切换到的目的工作目录</div><div class="line">worker_class = <span class="string">'sync'</span> #使用gevent模式，还可以使用sync 模式，默认的是sync模式</div><div class="line">workers = <span class="number">4</span> # multiprocessing.cpu_count()    #进程数</div><div class="line">threads = <span class="number">16</span> #multiprocessing.cpu_count()*<span class="number">4</span> #指定每个进程开启的线程数</div><div class="line">loglevel = <span class="string">'info'</span> #日志级别，这个日志级别指的是错误日志的级别，而访问日志的级别无法设置</div><div class="line">access_log_format = <span class="string">'%(t)s %(p)s %(h)s "%(r)s" %(s)s %(L)s %(b)s %(f)s" "%(a)s"'</span></div><div class="line"></div><div class="line"># accesslog = <span class="string">"/home/log/gunicorn_access.log"</span>      #访问日志文件</div><div class="line">#errorlog = <span class="string">"/home/log/gunicorn_error.log"</span>        #错误日志文件</div><div class="line">accesslog = <span class="string">"-"</span>  #访问日志文件，<span class="string">"-"</span> 表示标准输出</div><div class="line">errorlog = <span class="string">"-"</span>   #错误日志文件，<span class="string">"-"</span> 表示标准输出</div><div class="line"></div><div class="line">proc_name = <span class="string">'fof_api'</span>   #进程名</div></pre></td></tr></table></figure>
<p>其中access_log_format选项的变量含义如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">其每个选项的含义如下：</div><div class="line">h          remote <span class="selector-tag">address</span></div><div class="line">l          <span class="string">'-'</span></div><div class="line">u          currently <span class="string">'-'</span>, may be user name <span class="keyword">in</span> future releases</div><div class="line">t          date of the request</div><div class="line">r          status line (e<span class="selector-class">.g</span>. ``GET / HTTP/<span class="number">1.1</span>``)</div><div class="line">s          status</div><div class="line"><span class="selector-tag">b</span>          response length or <span class="string">'-'</span></div><div class="line">f          referer</div><div class="line"><span class="selector-tag">a</span>          user agent</div><div class="line">T          request <span class="selector-tag">time</span> <span class="keyword">in</span> seconds</div><div class="line">D          request <span class="selector-tag">time</span> <span class="keyword">in</span> microseconds</div><div class="line">L          request <span class="selector-tag">time</span> <span class="keyword">in</span> decimal seconds</div><div class="line"><span class="selector-tag">p</span>          process ID</div></pre></td></tr></table></figure></p>
<p>accesslog、errorlog日志文件可以写到文件，也可以标准输出到屏幕。</p>
<h1 id="正常启动"><a href="#正常启动" class="headerlink" title="正常启动"></a>正常启动</h1><p>以gunicorn.conf.py配置文件启动gunicorn<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunicorn -c gunicorn<span class="selector-class">.conf</span><span class="selector-class">.py</span> api<span class="selector-class">.wsgi</span>:application</div></pre></td></tr></table></figure></p>
<p>也可以直接启动<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">api</span><span class="selector-class">.wsgi</span><span class="selector-pseudo">:application</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8091</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-k</span> <span class="selector-tag">gthread</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>-w 4是启动4个进程，可以支持更多的并发。</p>
</blockquote>
<p>or</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">api</span><span class="selector-class">.wsgi</span><span class="selector-pseudo">:application</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8091</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-k</span> <span class="selector-tag">gthread</span>  <span class="selector-tag">--thread</span> 40 <span class="selector-tag">--max-requests</span> 4096 <span class="selector-tag">--max-requests-jitter</span> 512</div></pre></td></tr></table></figure>
<blockquote>
<p>参数详见官网的配置说明，参考文章底部的链接</p>
</blockquote>
<h1 id="Docker方式启动"><a href="#Docker方式启动" class="headerlink" title="Docker方式启动"></a>Docker方式启动</h1><p>Dockerfile文件<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /usr/src/app/requirements.txt</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn -c gunicorn.conf.py api.wsgi:application</span></div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">45</span>:<span class="number">42</span> +<span class="number">0800</span>] &lt;<span class="number">16</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/compose/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">5.369574</span> <span class="number">1113</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">45</span>:<span class="number">43</span> +<span class="number">0800</span>] &lt;<span class="number">14</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/fund_static/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">5.868518</span> <span class="number">481</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">46</span>:<span class="number">00</span> +<span class="number">0800</span>] &lt;<span class="number">334</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/adjustment/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">0.845745</span> <span class="number">1398</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">46</span>:<span class="number">00</span> +<span class="number">0800</span>] &lt;<span class="number">12</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/risk/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">0.860662</span> <span class="number">1254</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://docs.gunicorn.org/en/stable/settings.html?highlight=backlog" target="_blank" rel="external">gunicorn参数</a></li>
<li><a href="https://www.jianshu.com/p/260f18aa5462" target="_blank" rel="external">Gunicorn运行与配置</a></li>
<li><a href="https://blog.csdn.net/y472360651/article/details/78538188" target="_blank" rel="external">Gunicorn-配置详解</a></li>
<li><a href="http://xiaorui.cc/2014/11/22/%E7%94%A8gunicorn%E5%92%8Cgevent%E6%8F%90%E9%AB%98python-web%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%A7%E8%83%BD/" target="_blank" rel="external">用gunicorn和gevent提高python-web框架的性能</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gunicorn是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植至Ruby的独角兽（Unicorn）项目，使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。&lt;/p&gt;
&lt;p&gt;Django自带的简易服务器，它是一个纯Python写的轻量级的WEB服务器，但它是为了开发而设计的，不适合在生产环境中部署。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Gunicorn" scheme="http://www.kekefund.com/tags/Gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>服务器被矿机程序攻击</title>
    <link href="http://www.kekefund.com/2018/07/31/attack-miner/"/>
    <id>http://www.kekefund.com/2018/07/31/attack-miner/</id>
    <published>2018-07-31T01:28:46.000Z</published>
    <updated>2018-09-21T07:50:46.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h1><p>今天早上7:00，收到腾讯云监控发来基础监控告警：某台服务器的CPU利用率为100%。SSH登录到服务器正常，说明root密码还没有被更改，我最初怀疑有可能是DDos攻击。<br><a id="more"></a><br>执行top命令：<br><img src="http://pic.cbbing.com/attack02.png" alt=""></p>
<p>发现有个名为qW3xT.2的程序CPU占用高达397.3%，服务器为4核8G，那就基本上把所有CPU资源占了，也就是腾讯云发来的CPU使用率大于99%。</p>
<p>Google搜索第一条显示这是一个矿机程序。</p>
<p><img src="http://pic.cbbing.com/attack03.png" alt=""></p>
<p>那就是说明云服务器被矿机程序破解了。</p>
<ul>
<li>切换到/tmp目录：<br><img src="http://pic.cbbing.com/attack01.png" alt=""></li>
</ul>
<p>有两个可执行程序ddgs.3013和qW3xT.2</p>
<ul>
<li>查看定时任务：<br><img src="http://pic.cbbing.com/attack04.png" alt=""></li>
</ul>
<p>执行远程脚本<a href="http://149.56.106.215:8000/i.sh" target="_blank" rel="external">http://149.56.106.215:8000/i.sh</a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1，删掉/tmp下的ddgs.3013和qW3xT.2<br>2.，删掉cron任务</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>云服务器上近期搭建了一个redis服务，没采用密码验证，挖矿程序就是通过Redis拿到了系统的控制权。</p>
<h1 id="关于reidis-未授权登陆漏洞"><a href="#关于reidis-未授权登陆漏洞" class="headerlink" title="关于reidis 未授权登陆漏洞"></a>关于reidis 未授权登陆漏洞</h1><h2 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h2><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将Redis服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功将自己的公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以直接登录目标服务器。</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Redis 安全模型的观念是: “请不要将Redis暴露在公开网络中, 因为让不受信任的客户接触到Redis是非常危险的” 。<br>Redis 作者之所以放弃解决未授权访问导致的不安全性是因为, 99.99%使用Redis的场景都是在沙盒化的环境中, 为了0.01%的可能性增加安全规则的同时也增加了复杂性, 虽然这个问题的并不是不能解决的, 但是这在他的设计哲学中仍是不划算的。<br>因为其他受信任用户需要使用Redis或者因为运维人员的疏忽等原因，部分Redis 绑定在0.0.0.0:6379，并且没有开启认证（这是Redis的默认配置），如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip访问等，将会导致Redis服务直接暴露在公网上，导致其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。<br>利用Redis自身的相关方法，可以进行写文件操作，攻击者可以成功将自己的公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys文件中，进而可以直接登录目标服务器。 （导致可以执行任何操作）</p>
<p>参考</p>
<blockquote>
<p><a href="https://wwxinjie.github.io/2018/06/15/linux-clean-mineral/" target="_blank" rel="external">https://wwxinjie.github.io/2018/06/15/linux-clean-mineral/</a><br><a href="https://blog.csdn.net/whs_321/article/details/51734602" target="_blank" rel="external">https://blog.csdn.net/whs_321/article/details/51734602</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事件经过&quot;&gt;&lt;a href=&quot;#事件经过&quot; class=&quot;headerlink&quot; title=&quot;事件经过&quot;&gt;&lt;/a&gt;事件经过&lt;/h1&gt;&lt;p&gt;今天早上7:00，收到腾讯云监控发来基础监控告警：某台服务器的CPU利用率为100%。SSH登录到服务器正常，说明root密码还没有被更改，我最初怀疑有可能是DDos攻击。&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://www.kekefund.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://www.kekefund.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="攻击" scheme="http://www.kekefund.com/tags/%E6%94%BB%E5%87%BB/"/>
    
      <category term="矿机" scheme="http://www.kekefund.com/tags/%E7%9F%BF%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>API自动化测试</title>
    <link href="http://www.kekefund.com/2018/07/15/api-test/"/>
    <id>http://www.kekefund.com/2018/07/15/api-test/</id>
    <published>2018-07-15T07:11:41.000Z</published>
    <updated>2018-12-04T08:35:51.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>公司目前用的前后端分离的架构，API接口的稳定性直接影响了与前端团队的沟通效率，前端开发和测试人员都比较熟练的使用Postman来测试API接口。</p>
<p>API接口的自动化测试有很多方案，但Postman+Newman+Jenkins的组合方案，对于测试人员的学习成本最低，实现起来速度是最快的。</p>
<p>由于公司目前已经采用Jenkins做自动化部署，因此只需要安装Newman，整个流程即可走通。<br><a id="more"></a></p>
<p>实现步骤如下：</p>
<ol>
<li><p>Postman编写测试用例；</p>
</li>
<li><p>导出到json文件</p>
</li>
<li><p>Newman执行json文件</p>
</li>
<li><p>Jenkins调用newman命令，定时执行或者触发执行</p>
</li>
</ol>
<h1 id="1，Postman编写测试用例"><a href="#1，Postman编写测试用例" class="headerlink" title="1，Postman编写测试用例"></a>1，Postman编写测试用例</h1><blockquote>
<p>Postman is the only complete API development environment, for API developers, used by more than 5 million developers and 100,000 companies worldwide. Postman makes working with APIs faster and easier by supporting developers at every stage of their workflow, and is available for Mac OS X, Windows, and Linux users.</p>
</blockquote>
<p><img src="http://pic.cbbing.com/test01.png" alt=""></p>
<p>配置环境变量：<br><img src="http://pic.cbbing.com/test02.png" alt=""></p>
<p>这里建立了测试环境和生产环境；</p>
<p><img src="http://pic.cbbing.com/test04.png" alt=""><br><img src="http://pic.cbbing.com/test03.png" alt=""><br>配置好环境变量后，就可以在api请求时用环境变量，方便切换测试环境和生产环境。<br><img src="http://pic.cbbing.com/test05.png" alt=""></p>
<p>可以直接在Postman中跑测试用例<br><img src="http://pic.cbbing.com/test06.png" alt=""></p>
<p>如果是临时的API接口测试，到这步就可以了。当然，我们的目的是实现测试自动化，接着往下走。</p>
<h1 id="2，导出到JSON"><a href="#2，导出到JSON" class="headerlink" title="2，导出到JSON"></a>2，导出到JSON</h1><p><img src="http://pic.cbbing.com/test07.png" alt=""></p>
<h1 id="3，添加到github项目"><a href="#3，添加到github项目" class="headerlink" title="3，添加到github项目"></a>3，添加到github项目</h1><p>创建一个github项目，专门存储postman脚本。这是为了方便项目成员在本地提交，跟踪版本。<br><img src="http://pic.cbbing.com/test08.png" alt=""></p>
<h1 id="4，Jenkins集成"><a href="#4，Jenkins集成" class="headerlink" title="4，Jenkins集成"></a>4，Jenkins集成</h1><p>新建一个自由风格的项目<br><img src="http://pic.cbbing.com/test09.png" alt=""><br>配置git<br><img src="http://pic.cbbing.com/test10.png" alt=""></p>
<p>构建触发器<br><img src="http://pic.cbbing.com/test11.png" alt=""><br>每天6点执行一次。</p>
<p>执行SHELL<br><img src="http://pic.cbbing.com/test12.png" alt=""></p>
<p>其中 newman是预先安装在系统上的：<br>先安装nodejs，再安装newman:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g newman</div></pre></td></tr></table></figure>
<p>脚本：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newman --version</div><div class="line"></div><div class="line">newman run Brison<span class="selector-class">.postman_collection</span><span class="selector-class">.json</span> -e test<span class="selector-class">.postman_environment</span><span class="selector-class">.json</span> --reporters cli,<span class="selector-tag">html</span>,json,junit --reporter-json-export brison_jsonOut<span class="selector-class">.json</span> --reporter-junit-export brison_xmlOut<span class="selector-class">.xml</span> --reporter-html-export brison_htmlOut.html</div></pre></td></tr></table></figure>
<p>Brison.postman_collection.json是postman请求 collection集合。<br>test.postman_environment.json 是环境变量。<br>生成brison_jsonOut.json，brison_xmlOut.xml，brison_htmlOut.html</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/wanglin_lin/article/details/51959342" target="_blank" rel="external">https://blog.csdn.net/wanglin_lin/article/details/51959342</a></p>
<p><a href="https://www.jianshu.com/p/dd0db1b13cfc" target="_blank" rel="external">https://www.jianshu.com/p/dd0db1b13cfc</a></p>
<p><a href="https://www.getpostman.com/docs/v6/postman/collection_runs/integration_with_jenkins" target="_blank" rel="external">https://www.getpostman.com/docs/v6/postman/collection_runs/integration_with_jenkins</a></p>
<p><a href="https://www.jianshu.com/p/d958fc8bf7a4" target="_blank" rel="external">https://www.jianshu.com/p/d958fc8bf7a4</a></p>
<p><a href="https://www.jianshu.com/p/2c83f2ffbd5e" target="_blank" rel="external">https://www.jianshu.com/p/2c83f2ffbd5e</a></p>
<p><a href="https://www.cnblogs.com/lsjdddddd/p/5734531.html" target="_blank" rel="external">https://www.cnblogs.com/lsjdddddd/p/5734531.html</a></p>
<p><a href="https://www.jianshu.com/p/9b196c71d1fc" target="_blank" rel="external">https://www.jianshu.com/p/9b196c71d1fc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;公司目前用的前后端分离的架构，API接口的稳定性直接影响了与前端团队的沟通效率，前端开发和测试人员都比较熟练的使用Postman来测试API接口。&lt;/p&gt;
&lt;p&gt;API接口的自动化测试有很多方案，但Postman+Newman+Jenkins的组合方案，对于测试人员的学习成本最低，实现起来速度是最快的。&lt;/p&gt;
&lt;p&gt;由于公司目前已经采用Jenkins做自动化部署，因此只需要安装Newman，整个流程即可走通。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="postman" scheme="http://www.kekefund.com/tags/postman/"/>
    
      <category term="newman" scheme="http://www.kekefund.com/tags/newman/"/>
    
      <category term="测试" scheme="http://www.kekefund.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>内网映射方案(lanproxy)</title>
    <link href="http://www.kekefund.com/2018/06/24/lanproxy/"/>
    <id>http://www.kekefund.com/2018/06/24/lanproxy/</id>
    <published>2018-06-24T03:56:49.000Z</published>
    <updated>2018-12-04T08:36:25.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>现在运营商提供的宽带服务，无论是动态IP，还是固定IP，默认都是禁止所有端口服务的（目前了解上海是这样的），在路由器上配置的端口映射和DMZ都失效。申请开通端口需要域名备案，过程比较繁琐。<br>运营商这么做是为了防止个人随意开设各种非法服务，也防止黑客通过扫描器进行抓鸡和批量扫描。这样封禁，虽然一定程度上保证了我们的网络安全，比如说前段时间的勒索病毒正因为国内大部分用户没有独立的公网IP，并且操作系统最容易爆发漏洞的一些，135，139等端口被运营商封禁了，使得国内个人家庭电脑中招的概率小了很多；但是导致即使有公网IP，也无法使用常用端口向外网提供服务。<br><a id="more"></a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>通过NAPT原理得知：NAPT实现了内网主机在没有公网IP的情况下访问公网主机。<br>那么我们可以这样做：假设公网IP为23.23.23.23，内网IP为192.168.1.2。<br>公网主机先监听80端口，监听这个端口是用于向外部提供一个HTTP服务，80是WEB服务器的默认端口。同时其他任意一个端口（这里我们假设为7777），监听这个端口是用于让内网服务器主动连接进来打通一个隧道。接着内网再主动向公网主机的7777发起一个请求，这样内网就成功与公网主机建立了一个连接通道。</p>
<p>然后当有任何客户端主动连接公网的80端口时，公网接收到连接请求之后马上把这连接请求通过先前建立好的隧道转发到内网主机，内网主机接收到来自隧道的数据包后再主动连接内网主机自身的80端口，连接成功之后将数据包原封不动地转发数据包给80端口，待HTTP服务器程序处理完这个数据包，生成了响应报文之后再原路转发回去，最终到达公网的80端口，然后返回给最开始请求公网服务器80端口的客户端。<br><img src="http://pic.cbbing.com/lanproxy1.png" alt=""></p>
<p>大名鼎鼎的花生壳内网版以及nat123等内网穿透工具的原理基本就是如此。</p>
<blockquote>
<p><a href="https://juejin.im/entry/59f2ed94518825098951554c" target="_blank" rel="external">https://juejin.im/entry/59f2ed94518825098951554c</a></p>
</blockquote>
<h1 id="lanproxy"><a href="#lanproxy" class="headerlink" title="lanproxy"></a>lanproxy</h1><p>lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，目前仅支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面…）。目前市面上提供类似服务的有花生壳、TeamViewer、GoToMyCloud等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。</p>
<h2 id="1，服务器配置"><a href="#1，服务器配置" class="headerlink" title="1，服务器配置"></a>1，服务器配置</h2><p>服务器如腾讯云服务器、阿里云服务器，必须有独立IP。<br>下载<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/?p=/lanproxy-server&amp;mode=list" target="_blank" rel="external">lanproxy-server-20171116.zip</a>，解压后放到服务器上。<br>server的配置文件放置在conf目录中，配置 config.properties<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server.bind=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line"></div><div class="line">#与代理客户端通信端口</div><div class="line">server.port=<span class="number">4900</span></div><div class="line"></div><div class="line">#ssl相关配置</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.enable</span>=true</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.bind</span>=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.port</span>=<span class="number">4993</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.jksPath</span>=test<span class="selector-class">.jks</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.keyStorePassword</span>=<span class="number">123456</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.keyManagerPassword</span>=<span class="number">123456</span></div><div class="line"></div><div class="line">#这个配置可以忽略</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.needsClientAuth</span>=false</div><div class="line"></div><div class="line">#WEB在线配置管理相关信息</div><div class="line">config<span class="selector-class">.server</span><span class="selector-class">.bind</span>=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">config<span class="selector-class">.server</span><span class="selector-class">.port</span>=<span class="number">8090</span></div><div class="line">config<span class="selector-class">.admin</span><span class="selector-class">.username</span>=admin</div><div class="line">config<span class="selector-class">.admin</span><span class="selector-class">.password</span>=admin</div></pre></td></tr></table></figure></p>
<p>代理配置，打开地址 <a href="http://ip:8090" target="_blank" rel="external">http://ip:8090</a> ，使用上面配置中配置的用户名密码登录<br><img src="http://pic.cbbing.com/lanproxy2.png" alt=""></p>
<p>添加客户端:<br><img src="http://pic.cbbing.com/lanproxy3.png" alt=""></p>
<p>配置客户端：<br><img src="http://pic.cbbing.com/lanproxy4.png" alt=""></p>
<p>示例是将公网的80、443端口映射到内网主机的80、443端口。</p>
<h2 id="2，Java客户端配置"><a href="#2，Java客户端配置" class="headerlink" title="2，Java客户端配置"></a>2，Java客户端配置</h2><blockquote>
<p>Java client的配置文件放置在conf目录中，配置 config.properties<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#与在proxy-server配置后台创建客户端时填写的秘钥保持一致；</span></div><div class="line">client.<span class="attr">key=</span></div><div class="line">ssl.<span class="attr">enable=true</span></div><div class="line">ssl.<span class="attr">jksPath=test.jks</span></div><div class="line">ssl.<span class="attr">keyStorePassword=123456</span></div><div class="line"></div><div class="line"><span class="comment">#这里填写实际的proxy-server地址；没有服务器默认即可，自己有服务器的更换为自己的proxy-server（IP）地址</span></div><div class="line">server.<span class="attr">host=lp.thingsglobal.org</span></div><div class="line"></div><div class="line"><span class="comment">#proxy-server ssl默认端口4993，默认普通端口4900</span></div><div class="line"><span class="comment">#ssl.enable=true时这里填写ssl端口，ssl.enable=false时这里填写普通端口</span></div><div class="line">server.<span class="attr">port=4993</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>java客户端需要以下环境:</p>
<ul>
<li>安装java1.7或以上环境</li>
<li>linux（mac）环境中运行bin目录下的 startup.sh</li>
<li>windows环境中运行bin目录下的 startup.bat</li>
</ul>
<p>下载: <a href="http://pic.cbbing.com/lanproxy-java-client-20171116.zip" target="_blank" rel="external">lanproxy-java-client-20171116</a></p>
<h2 id="3，其他平台客户端"><a href="#3，其他平台客户端" class="headerlink" title="3，其他平台客户端"></a>3，其他平台客户端</h2><p>不用java客户端的可以使用下面提供的各个平台的客户端，省去安装java运行环境</p>
<p><strong>源码地址</strong><br><a href="https://github.com/ffay/lanproxy-go-client" target="_blank" rel="external">https://github.com/ffay/lanproxy-go-client</a></p>
<p><strong>发布包</strong><br><a href="https://github.com/ffay/lanproxy-go-client/releases" target="_blank" rel="external">https://github.com/ffay/lanproxy-go-client/releases</a></p>
<p><strong>普通端口连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mac 64位</span></div><div class="line">nohup ./client_darwin_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</div><div class="line"></div><div class="line"><span class="comment"># linux 64位</span></div><div class="line">nohup ./client_linux_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</div><div class="line"></div><div class="line"><span class="comment"># windows 64 位</span></div><div class="line">./client_windows_amd64.exe <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY</div></pre></td></tr></table></figure></p>
<p><strong>SSL端口连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mac 64位</span></div><div class="line">nohup ./client_darwin_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span> &amp;</div><div class="line"></div><div class="line"><span class="comment"># linux 64位</span></div><div class="line">nohup ./client_linux_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span> &amp;</div><div class="line"></div><div class="line"><span class="comment"># windows 64 位</span></div><div class="line">./client_windows_amd64.exe <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h2 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h2><p><img src="http://pic.cbbing.com/lanproxy5.png" alt=""><br>查看管理后台的数据统计，有访问流量，说明转发成功！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h1&gt;&lt;p&gt;现在运营商提供的宽带服务，无论是动态IP，还是固定IP，默认都是禁止所有端口服务的（目前了解上海是这样的），在路由器上配置的端口映射和DMZ都失效。申请开通端口需要域名备案，过程比较繁琐。&lt;br&gt;运营商这么做是为了防止个人随意开设各种非法服务，也防止黑客通过扫描器进行抓鸡和批量扫描。这样封禁，虽然一定程度上保证了我们的网络安全，比如说前段时间的勒索病毒正因为国内大部分用户没有独立的公网IP，并且操作系统最容易爆发漏洞的一些，135，139等端口被运营商封禁了，使得国内个人家庭电脑中招的概率小了很多；但是导致即使有公网IP，也无法使用常用端口向外网提供服务。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="内网映射" scheme="http://www.kekefund.com/tags/%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84/"/>
    
      <category term="端口转发" scheme="http://www.kekefund.com/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>seafile服务器配置</title>
    <link href="http://www.kekefund.com/2018/06/24/seafile-server/"/>
    <id>http://www.kekefund.com/2018/06/24/seafile-server/</id>
    <published>2018-06-24T01:28:22.000Z</published>
    <updated>2018-12-04T08:36:13.716Z</updated>
    
    <content type="html"><![CDATA[<p>公司内部网盘分享方案。</p>
<p>目前开源的企业网盘方案有seafile，<a href="http://kekefund.com/2017/04/19/docker-owncloud/" target="_blank" rel="external">ownCloud</a>。</p>
<p>Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 全平台。支持文件同步或者直接挂载到本地访问。</p>
<a id="more"></a>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1、搭建seafile服务器"><a href="#1、搭建seafile服务器" class="headerlink" title="1、搭建seafile服务器"></a>1、搭建seafile服务器</h2><p>seafile服务器主要支持Linux系统，包括Debian，Ubuntu，Centos等，也支持Windows系统（版本更新有滞后，人数超过25人会卡）。同时也提供 <a href="https://manual-cn.seafile.com/deploy/deploy_with_docker.html" target="_blank" rel="external">Docker安装</a>方式，更加轻松的部署和更新Seafile服务。</p>
<p>本文采用Docker的部署方式。</p>
<ul>
<li>配置文件：docker-compose.yml</li>
</ul>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attribute">version</span>: '3.4'</div><div class="line"></div><div class="line"><span class="less"><span class="attribute">services</span>:</span></div><div class="line"></div><div class="line">  <span class="attribute">seafile</span>:</div><div class="line"></div><div class="line">    <span class="attribute">image</span>: seafileltd/<span class="attribute">seafile</span>:latest</div><div class="line"></div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line"></div><div class="line">        - ./<span class="attribute">shared</span>:/shared</div><div class="line"></div><div class="line">    <span class="attribute">ports</span>:</div><div class="line"></div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line"></div><div class="line">      - <span class="number">8000</span>:<span class="number">8000</span></div><div class="line"></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_SERVER_HOSTNAME</span>: pan.xxx.com</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_ADMIN_EMAIL</span>:xxx<span class="variable">@163</span>.com</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_ADMIN_PASSWORD</span>: <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>该配置文件将seafile的数据文件存储于当前目录的shared目录下，开放80和8000端口；环境变量设置了访问的主机IP或域名、设置了管理员账号和密码。                                                                                                                                                                              </p>
<h2 id="2、向Let’s-encrypt申请SSL证书"><a href="#2、向Let’s-encrypt申请SSL证书" class="headerlink" title="2、向Let’s encrypt申请SSL证书"></a>2、向Let’s encrypt申请SSL证书</h2><p>添加环境变量，并且添加443端口。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">SEAFILE_SERVER_LETSENCRYPT</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>这样完整的docker-compose.yml如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">version</span>: <span class="string">'3'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">seafile</span>:</div><div class="line">    <span class="attribute">image</span>: seafileltd/<span class="attribute">seafile</span>:latest</div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">        - ./<span class="attribute">shared</span>:/shared</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div><div class="line">      - <span class="number">8000</span>:<span class="number">8000</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">SEAFILE_SERVER_LETSENCRYPT</span>: <span class="string">"true"</span></div><div class="line">      <span class="attribute">SEAFILE_SERVER_HOSTNAME</span>: pan1.cbbing.com</div><div class="line">      <span class="attribute">SEAFILE_ADMIN_EMAIL</span>: cbbing<span class="variable">@163</span>.com</div><div class="line">      <span class="attribute">SEAFILE_ADMIN_PASSWORD</span>: <span class="number">12356789</span></div></pre></td></tr></table></figure></p>
<h2 id="3、支持在线编辑"><a href="#3、支持在线编辑" class="headerlink" title="3、支持在线编辑"></a>3、支持在线编辑</h2><p>onlyoffice 的 documentserver 镜像是提供在线编辑服务的，镜像内已包含了 nginx 服务器，支持 80 端口和 443 端口，如果有合法证书，我们可以使用 https 连接。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git clone https://github.com/neroxps/Docker-Only-Office-Chinese-font.git </div><div class="line"></div><div class="line">cd Docker-Only-Office-Chinese-font docker </div><div class="line"></div><div class="line">build -t onlyoffice/chinese .</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># http</span></div><div class="line"></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -itd -p 780:80 --name office --restart=always onlyoffice/chinese</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># https</span></div><div class="line"></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -itd -p 7443:443 --name office --restart=always onlyoffice/chinese</span></div></pre></td></tr></table></figure>
<ul>
<li>conf/seahub_settings.py添加</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Enable Only Office</span></div><div class="line"></div><div class="line"><span class="attr">ENABLE_ONLYOFFICE</span> = <span class="literal">True</span></div><div class="line"></div><div class="line"><span class="attr">VERIFY_ONLYOFFICE_CERTIFICATE</span> = <span class="literal">False</span></div><div class="line"></div><div class="line"><span class="attr">ONLYOFFICE_APIJS_URL</span> = <span class="string">'http://pan.fofpower.com:780/web-apps/apps/api/documents/api.js'</span></div><div class="line"></div><div class="line"><span class="attr">ONLYOFFICE_FILE_EXTENSION</span> = (<span class="string">'doc'</span>, <span class="string">'docx'</span>, <span class="string">'ppt'</span>, <span class="string">'pptx'</span>, <span class="string">'xls'</span>, <span class="string">'xlsx'</span>, <span class="string">'odt'</span>, <span class="string">'fodt'</span>, <span class="string">'odp'</span>, <span class="string">'fodp'</span>, <span class="string">'ods'</span>, <span class="string">'fods'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://bbs.seafile.com/t/topic/3430" target="_blank" rel="external">https://bbs.seafile.com/t/topic/3430</a></p>
</blockquote>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h1 id="1、添加-导入用户"><a href="#1、添加-导入用户" class="headerlink" title="1、添加/导入用户"></a>1、添加/导入用户</h1><p><img src="http://pic.cbbing.com/seafile1.png" alt=""></p>
<p>下载模板，填入用户信息批量添加用户，适合从企业邮箱通讯录中批量导入用户</p>
<h1 id="2、新建群组"><a href="#2、新建群组" class="headerlink" title="2、新建群组"></a>2、新建群组</h1><p><img src="http://pic.cbbing.com/seafile2.png" alt=""></p>
<p>群组共享的资料库对组内所有成员可见，方便部门内部文档沟通。<br><img src="http://pic.cbbing.com/seafile3.png" alt=""></p>
<h2 id="3，多终端使用"><a href="#3，多终端使用" class="headerlink" title="3，多终端使用"></a>3，多终端使用</h2><p>seafile支持ios，android，同步盘，web端，实测体验不错。<br>需要注意的是，如果seafile服务器端做了域名映射，需要修改系统配置，否则ios和android手机端文件上传和下载会失败。</p>
<p><img src="http://pic.cbbing.com/seafile4.png" alt=""><br>将SERVICE_URL的8000去掉，直接用80端口<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">SERVICE_URL:</span>  <span class="string">http:</span><span class="comment">//pan.xxxx.com</span></div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.kancloud.cn/kancloud/seafile-manual/51487" target="_blank" rel="external">https://www.kancloud.cn/kancloud/seafile-manual/51487</a><br><a href="https://bbs.seafile.com/t/topic/3430" target="_blank" rel="external">https://bbs.seafile.com/t/topic/3430</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司内部网盘分享方案。&lt;/p&gt;
&lt;p&gt;目前开源的企业网盘方案有seafile，&lt;a href=&quot;http://kekefund.com/2017/04/19/docker-owncloud/&quot;&gt;ownCloud&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 全平台。支持文件同步或者直接挂载到本地访问。&lt;/p&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="seafile" scheme="http://www.kekefund.com/tags/seafile/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器运行多条命令(supervisor)</title>
    <link href="http://www.kekefund.com/2018/03/30/supervisor/"/>
    <id>http://www.kekefund.com/2018/03/30/supervisor/</id>
    <published>2018-03-30T01:45:32.000Z</published>
    <updated>2018-09-21T07:50:46.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一, 简介"></a>一, 简介</h1><p>Dockerfile 运行只支持一条命令，当在Docker里要运行多条命令，用supervisor来管理就比较合适了。<br>Supervisor是一个 Python 开发的 client/server 系统，可以管理和监控类 UNIX 操作系统上面的进程。它可以同时启动，关闭多个进程，使用起来特别的方便。</p>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><p>supervisor 主要由两部分组成：</p>
<ol>
<li>supervisord(server 部分)：主要负责管理子进程，响应客户端命令以及日志的输出等；</li>
<li>supervisorctl(client 部分)：命令行客户端，用户可以通过它与不同的 supervisord 进程联系，获取子进程的状态等。</li>
</ol>
<h1 id="二，存在的问题——日志不输出"><a href="#二，存在的问题——日志不输出" class="headerlink" title="二，存在的问题——日志不输出"></a>二，存在的问题——日志不输出</h1><p>但是使用supervisor，Django运行的日志就不会在Docker里输出了，默认的输出如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">20</span>,<span class="number">292</span> CRIT Supervisor running as root (no <span class="keyword">user</span> <span class="keyword">in</span> config file)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">20</span>,<span class="number">308</span> INFO supervisord started with pid <span class="number">1</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">310</span> INFO spawned: 'celery_beat' with pid <span class="number">7</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">312</span> INFO spawned: 'celery_worker' with pid <span class="number">8</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">313</span> INFO spawned: 'django' with pid <span class="number">9</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: celery_beat entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: celery_worker entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: django entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div></pre></td></tr></table></figure></p>
<p>上面的Docker中supervisor配置如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">[supervisord]</span></div><div class="line"><span class="attr">nodaemon</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:django]</div><div class="line"><span class="attr">command</span>=python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_worker]</div><div class="line"><span class="attr">command</span>=python manage.py celery worker -c <span class="number">4</span> -l info</div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_beat]</div><div class="line"><span class="attr">command</span>=python manage.py celery beat</div></pre></td></tr></table></figure></p>
<p>这样的配置在容器中是同时运行Django，celery。</p>
<h1 id="三，解决方案"><a href="#三，解决方案" class="headerlink" title="三，解决方案"></a>三，解决方案</h1><h2 id="1，改进后的配置方案"><a href="#1，改进后的配置方案" class="headerlink" title="1，改进后的配置方案"></a>1，改进后的配置方案</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="section">[inet_http_server]</span></div><div class="line"><span class="attr">port</span>=<span class="number">9001</span></div><div class="line"><span class="attr">username</span>=abc</div><div class="line"><span class="attr">password</span>=<span class="number">123456</span></div><div class="line"><span class="section"> </span></div><div class="line">[supervisord]</div><div class="line"><span class="attr">nodaemon</span>=<span class="literal">true</span></div><div class="line"><span class="attr">logfile</span>=/var/log/supervisor/supervisord.log ; (main log file;default <span class="variable">$CWD</span>/supervisord.log)</div><div class="line"><span class="attr">pidfile</span>=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class="line"><span class="attr">childlogdir</span>=/var/log/supervisor            ; (<span class="string">'AUTO'</span> child log dir, default <span class="variable">$TEMP</span>)</div><div class="line"><span class="section"> </span></div><div class="line">[program:django]</div><div class="line"><span class="attr">command</span>=python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span></div><div class="line"><span class="comment">#stdout_logfile = /var/log/supervisord/django_stdout.log</span></div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_worker]</div><div class="line"><span class="attr">command</span>=python manage.py celery worker -c <span class="number">4</span> -l info</div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_beat]</div><div class="line"><span class="attr">command</span>=python manage.py celery beat</div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>实测发现Django的日志输出会写到stderr.log文件中，所以在配置文件中将错误日志重定向到标准日志里;<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>容器中的生成的日志文件如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@a16bc77e96bc:/var/<span class="built_in">log</span>/supervisor<span class="meta"># ls</span></div><div class="line">celery_beat-<span class="built_in">stderr</span>---supervisor-rSPQ7E.<span class="built_in">log</span>    django-<span class="built_in">stderr</span>---supervisor<span class="number">-9</span>LS_KA.<span class="built_in">log</span></div><div class="line">celery_beat-<span class="built_in">stdout</span>---supervisor-t5Q4UI.<span class="built_in">log</span>    django-<span class="built_in">stdout</span>---supervisor-cTSBmq.<span class="built_in">log</span></div><div class="line">celery_worker-<span class="built_in">stderr</span>---supervisor-TRFzc7.<span class="built_in">log</span>  supervisord.<span class="built_in">log</span></div><div class="line">celery_worker-<span class="built_in">stdout</span>---supervisor-xNgeBU.<span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<h2 id="2，查看日志"><a href="#2，查看日志" class="headerlink" title="2，查看日志"></a>2，查看日志</h2><p>运行容器时，将9001端口映射出去，通过ip:9001访问：<br><img src="http://pic.cbbing.com/2018-03-30/supervisor-web.png" alt=""></p>
<p>点击 Tail -f 查看各个进程的日志。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://debugo.com/docker-supervisord/" target="_blank" rel="external">http://debugo.com/docker-supervisord/</a></p>
<p><a href="http://blog.csdn.net/zhousenshan/article/details/52988885" target="_blank" rel="external">http://blog.csdn.net/zhousenshan/article/details/52988885</a></p>
<p><a href="http://supervisord.org/configuration.html" target="_blank" rel="external">supervisor配置</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一, 简介&quot;&gt;&lt;/a&gt;一, 简介&lt;/h1&gt;&lt;p&gt;Dockerfile 运行只支持一条命令，当在Docker里要运行多条命令，用supervisor来管理就比较合适了。&lt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="supervisor" scheme="http://www.kekefund.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>scrapy+selenium爬取UC头条网站</title>
    <link href="http://www.kekefund.com/2017/12/06/scrapy-and-selenium/"/>
    <id>http://www.kekefund.com/2017/12/06/scrapy-and-selenium/</id>
    <published>2017-12-06T05:49:26.000Z</published>
    <updated>2018-09-21T07:50:46.077Z</updated>
    
    <content type="html"><![CDATA[<p>Scrapy是Python优秀的爬虫框架，selenium是非常好用的自动化WEB测试工具，两者结合可以非常容易对动态网页进行爬虫。<br>本文的需求是抓取UC头条各个板块的内容。UC头条(<a href="https://news.uc.cn/" target="_blank" rel="external">https://news.uc.cn/</a> )网站没有提供搜索入口，只能每个板块的首页向下滚动鼠标加载更多。要对这样的网站进行检索，抓取其内容，采用一般的scrapy请求方式，每次只能获取最新的10条数据，分析其JS请求，发现参数过于复杂，没有规律。如果想获取更多数据，则需要采用模拟浏览器的方法，这时候selenium就派上用场了。<br><a id="more"></a><br><img src="http://pic.cbbing.com/2017-12-06/86387208.png" alt=""></p>
<h1 id="1，定义spider"><a href="#1，定义spider" class="headerlink" title="1，定义spider"></a>1，定义spider</h1><p>模拟从百度搜索进入，这个步骤可以省略，主要为了跳到parse函数<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCTouTiaoSpider</span>(<span class="title">VideoBaseSpider</span>):</span></div><div class="line">    name = <span class="string">"uctoutiao_spider"</span></div><div class="line">    df_keys = [<span class="string">'人物'</span>, <span class="string">'百科'</span>, <span class="string">'乌镇'</span>]</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, scrapy_task_id=None, *args, **kwargs)</span></span>:        </div><div class="line">        <span class="keyword">self</span>.url_src = <span class="string">"http://www.baidu.com"</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line"> </div><div class="line">        requests = []</div><div class="line">        request = scrapy.Request(<span class="string">"http://www.baidu.com"</span>, callback=<span class="keyword">self</span>.parse)</div><div class="line">        requests.append(request)       </div><div class="line">        <span class="keyword">return</span> requests</div></pre></td></tr></table></figure></p>
<h1 id="2，parse函数"><a href="#2，parse函数" class="headerlink" title="2，parse函数"></a>2，parse函数</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">def parse(self, response):</div><div class="line">    self.<span class="built_in">log</span>(response.url)</div><div class="line"> </div><div class="line"> </div><div class="line">    urls = [<span class="string">"https://news.uc.cn/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_redian/"</span>,</div><div class="line">            <span class="comment"># "https://news.uc.cn/c_shipin/",</span></div><div class="line">            <span class="comment"># "https://news.uc.cn/c_gaoxiao/",</span></div><div class="line">            <span class="string">"https://news.uc.cn/c_shehui/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_yule/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_keji/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_tiyu/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_qiche/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_caijing/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_junshi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_tansuo/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_lishi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_youxi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_lvyou/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/news/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_shishang/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_jiankang/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_guoji/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_yuer/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_meishi/"</span>]</div><div class="line">      </div><div class="line">    <span class="comment"># 启动浏览器，这里用的火狐，如果在linux环境下可以用PhantomJS，稳定性稍微差点，有内存泄露的风险。</span></div><div class="line">    driver = webdriver.Firefox()</div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(url)</div><div class="line">            driver.<span class="built_in">get</span>(url)</div><div class="line">            <span class="comment">#模拟鼠标滚到底部(加载100条数据)</span></div><div class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">                driver.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight)"</span>)</div><div class="line">                driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 隐性等待,最长10秒</span></div><div class="line"> </div><div class="line">            <span class="comment"># print driver.page_source</span></div><div class="line">            soup = bs(driver.page_source, <span class="string">'lxml'</span>)</div><div class="line">            articles = soup.find_all(href=re.compile(<span class="string">"/a_\w+?/"</span>), <span class="keyword">text</span>=re.compile(<span class="string">".+"</span>))</div><div class="line">            <span class="keyword">for</span> article <span class="keyword">in</span> articles:</div><div class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> self.df_keys:</div><div class="line">                    <span class="keyword">item</span> = VideoItem()  <span class="comment">#自定义的Item</span></div><div class="line">                    <span class="keyword">item</span>[<span class="string">'title'</span>] = article.<span class="keyword">text</span></div><div class="line">                    <span class="keyword">item</span>[<span class="string">'href'</span>] = article[<span class="string">'href'</span>]                    </div><div class="line">                    self.<span class="built_in">log</span>(<span class="keyword">item</span>)</div><div class="line">                    yield <span class="keyword">item</span></div><div class="line"> </div><div class="line">        except Exception <span class="keyword">as</span> e:</div><div class="line">            print e</div><div class="line">            <span class="keyword">if</span> driver == None:</div><div class="line">                driver = webdriver.Firefox()</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> driver != None:</div><div class="line">        driver.quit()</div></pre></td></tr></table></figure>
<p>真正的实现部分比较简单，几句代码就搞定了。</p>
<h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><h2 id="selenium使用实例"><a href="#selenium使用实例" class="headerlink" title="selenium使用实例"></a>selenium使用实例</h2><h3 id="1，切换焦点至新窗口"><a href="#1，切换焦点至新窗口" class="headerlink" title="1，切换焦点至新窗口"></a>1，切换焦点至新窗口</h3><p>在页面上点击一个button, 然后打开了一个新的window, 将当前IWebDriver的focus切换到新window，使用IWebDriver.SwitchTo().Window(string windowName)。</p>
<p>例如， 我点击按钮以后弹出一个名字叫做”Content Display”的window， 要切换焦点到新窗口的方法是， 首先，获得新window的window name, 大家不要误以为page tile就是window name 哦， 如果你使用driver.SwitchTo().Window(“Content Display”)是找不到window name 叫做”Content Display”的窗口的， 其实Window Name 是一长串数字，类似“59790103-4e06-4433-97a9-b6e519a84fd0”。</p>
<p>要正确切换到”Content Display”的方法是：</p>
<ol>
<li><p>获得当前所有的WindowHandles。</p>
</li>
<li><p>循环遍历到所有的window, 查找window.title与”Content Display”相符的window返回。</p>
</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> dr<span class="selector-class">.window_handles</span>:</div><div class="line">    dr<span class="selector-class">.switch_to</span><span class="selector-class">.window</span>(handle)</div><div class="line">    print dr<span class="selector-class">.title</span></div><div class="line">    <span class="keyword">if</span> len(dr.title) == <span class="string">'目标窗口标题'</span>:</div><div class="line">        break</div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/qixue/p/3928775.html" target="_blank" rel="external">Selenium - IWebDriver.SwitchTo() frame 和 Window 的用法</a></p>
</blockquote>
<h3 id="2-，移至底部"><a href="#2-，移至底部" class="headerlink" title="2 ，移至底部"></a>2 ，移至底部</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">driver</span><span class="selector-class">.execute_script</span>("<span class="selector-tag">window</span><span class="selector-class">.scrollTo</span>(0, <span class="selector-tag">document</span><span class="selector-class">.body</span><span class="selector-class">.scrollHeight</span>)")</div></pre></td></tr></table></figure>
<h3 id="3，移动至指定元素"><a href="#3，移动至指定元素" class="headerlink" title="3，移动至指定元素"></a>3，移动至指定元素</h3><p>某些按钮点击时必须可见，于是要把屏幕移动到按钮可见的区域<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span> = driver.find_element_by_xpath(<span class="string">"//a[@class='p-next']"</span>)</div><div class="line"><span class="keyword">element</span>.location_once_scrolled_into_view</div><div class="line"> </div><div class="line"><span class="comment">#或者</span></div><div class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">800</span>)</div><div class="line"><span class="keyword">element</span> = driver.find_element_by_xpath(<span class="string">"//a[@class='p-next']"</span>)</div><div class="line">js = <span class="string">"window.scrollTo(&#123;&#125;,&#123;&#125;);"</span>.<span class="built_in">format</span>(<span class="keyword">element</span>.location[<span class="string">'x'</span>], <span class="keyword">element</span>.location[<span class="string">'y'</span>] - <span class="number">100</span>)</div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait" target="_blank" rel="external">Python selenium —— 一定要会用selenium的等待，三种等待方式解读</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scrapy是Python优秀的爬虫框架，selenium是非常好用的自动化WEB测试工具，两者结合可以非常容易对动态网页进行爬虫。&lt;br&gt;本文的需求是抓取UC头条各个板块的内容。UC头条(&lt;a href=&quot;https://news.uc.cn/&quot;&gt;https://news.uc.cn/&lt;/a&gt; )网站没有提供搜索入口，只能每个板块的首页向下滚动鼠标加载更多。要对这样的网站进行检索，抓取其内容，采用一般的scrapy请求方式，每次只能获取最新的10条数据，分析其JS请求，发现参数过于复杂，没有规律。如果想获取更多数据，则需要采用模拟浏览器的方法，这时候selenium就派上用场了。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="selenium" scheme="http://www.kekefund.com/tags/selenium/"/>
    
      <category term="scrapy" scheme="http://www.kekefund.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>nginx日志分析</title>
    <link href="http://www.kekefund.com/2017/10/27/nginx-log/"/>
    <id>http://www.kekefund.com/2017/10/27/nginx-log/</id>
    <published>2017-10-27T10:57:09.000Z</published>
    <updated>2018-09-21T07:50:46.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，日志定义"><a href="#1，日志定义" class="headerlink" title="1，日志定义"></a>1，日志定义</h1><p>在nginx.conf中定义的日志格式如下：<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">http</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> [<span class="variable">$request_body</span>] <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>日志文件如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">POST</span> /api/v1/f1_static/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[&#123;\x22user_id\x22:\x229b999d46dd6149f49\x22&#125;]</span> <span class="number">323</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">OPTIONS</span> /api/v1/fund_info/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[-]</span> <span class="number">31</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div></pre></td></tr></table></figure></p>
<h1 id="2，日志分割"><a href="#2，日志分割" class="headerlink" title="2，日志分割"></a>2，日志分割</h1><p>nginx没有命令直接将日志按天分割，我们写了一个shell脚本，每日0点定时执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nginx.log.sh</span></div><div class="line"><span class="comment">#nginx日志切割脚本</span></div><div class="line"> </div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#设置日志文件存放目录</span></div><div class="line">logs_path=<span class="string">"/mydata/nginx/logs/"</span></div><div class="line"> </div><div class="line"><span class="comment">#重命名日志文件</span></div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-web.log <span class="variable">$&#123;logs_path&#125;</span>access-web-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-api.log <span class="variable">$&#123;logs_path&#125;</span>access-api-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div></pre></td></tr></table></figure></p>
<p>cron：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> * * * /mydata/nginx/nginx.<span class="keyword">log</span>.sh</div></pre></td></tr></table></figure></p>
<h1 id="3，日志搜集"><a href="#3，日志搜集" class="headerlink" title="3，日志搜集"></a>3，日志搜集</h1><p>从nginx服务器将日志数据传输到日志服务器<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@VM_231_116_centos ~]# scp -r /mydata/<span class="built_in">code</span>/deploy/nginx/logs <span class="number">10.115</span>.<span class="number">82.34</span><span class="symbol">:</span>/mydata/logs</div><div class="line">root@<span class="number">10.105</span>.<span class="number">83.34</span>'s passwo<span class="symbol">rd:</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170929</span>.<span class="built_in">log</span> <span class="number">100%</span>  <span class="number">126</span>KB <span class="number">125.8</span>KB/s  <span class="symbol">00:00</span></div><div class="line">access-web-<span class="number">20171016</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">2616</span>KB  <span class="number">2.6</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">1687</span>KB  <span class="number">1.7</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170911</span>.<span class="built_in">log</span>    <span class="number">100%</span> <span class="number">1209</span>KB  <span class="number">1.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170930</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">1354</span>KB  <span class="number">1.3</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access.log   <span class="number">100%</span>  <span class="number">45</span>MB  <span class="number">45.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">2960</span>KB  <span class="number">2.9</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170906</span>.<span class="built_in">log</span>  <span class="number">100%</span>  <span class="number">669</span>KB <span class="number">669.1</span>KB/s  <span class="symbol">00:01</span></div><div class="line">access-api-<span class="number">20170904</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">9186</span>KB  <span class="number">9.0</span>MB/s  <span class="symbol">00:00</span></div></pre></td></tr></table></figure></p>
<ul>
<li>服务器之间文件（夹）复制<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文件</span></div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span>  </div><div class="line">或者  </div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_file</span>  </div><div class="line"> </div><div class="line"><span class="comment"># 目录</span></div><div class="line">scp -r local_folder remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4，日志解析"><a href="#4，日志解析" class="headerlink" title="4，日志解析"></a>4，日志解析</h1><p>主要有几点：</p>
<ol>
<li>逐行解析</li>
<li>正则匹配</li>
<li>日期的处理</li>
<li>批量写入数据库</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> arrow</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> io_tosql</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"> </div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line">engine_user_info = create_engine(</div><div class="line">    <span class="string">"mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;"</span>.format(<span class="string">'usr'</span>, <span class="string">'pwd'</span>, <span class="string">'host'</span>,<span class="string">'port'</span>, <span class="string">'db'</span>),</div><div class="line">    connect_args=&#123;<span class="string">"charset"</span>: <span class="string">"utf8"</span>&#125;)</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(filename)</span>:</span></div><div class="line"> </div><div class="line">    month_abr = &#123;<span class="string">"Jan"</span>:<span class="string">"01"</span>, <span class="string">"Feb"</span>:<span class="string">"02"</span>, <span class="string">"Mar"</span>:<span class="string">"03"</span>, <span class="string">"Apr"</span>:<span class="string">"04"</span>, <span class="string">"May"</span>:<span class="string">"05"</span>, <span class="string">"Jun"</span>:<span class="string">"06"</span>,</div><div class="line">                 <span class="string">"Jul"</span>:<span class="string">"07"</span>, <span class="string">"Aug"</span>:<span class="string">"08"</span>, <span class="string">"Sep"</span>:<span class="string">"09"</span>, <span class="string">"Oct"</span>:<span class="string">"10"</span>, <span class="string">"Nov"</span>:<span class="string">"11"</span>, <span class="string">"Dec"</span>:<span class="string">"12"</span>&#125;</div><div class="line"> </div><div class="line">    dfs = []</div><div class="line"> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line"> </div><div class="line">        i = <span class="number">0</span></div><div class="line">        file = open(filename)</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">            pattern = <span class="string">"(\d+\.\d+\.\d+\.\d+).*?\[(.*?)\].*?(\w+) (/.*?) .*?\" (\d+) \[(.*?)\] (\d+) \"(.*?)\" \"(.*?)\" \"(.*?)\""</span></div><div class="line">            s = re.search(pattern, line)</div><div class="line">            <span class="keyword">if</span> s:</div><div class="line">                remote_addr = s.group(<span class="number">1</span>)</div><div class="line">                local_time = s.group(<span class="number">2</span>)</div><div class="line">                request_method = s.group(<span class="number">3</span>)</div><div class="line">                request_url = s.group(<span class="number">4</span>)</div><div class="line">                status = s.group(<span class="number">5</span>)</div><div class="line">                request_body = s.group(<span class="number">6</span>)</div><div class="line">                body_bytes_sent = s.group(<span class="number">7</span>)</div><div class="line">                http_referer = s.group(<span class="number">8</span>)</div><div class="line">                http_user_agent = s.group(<span class="number">9</span>)</div><div class="line">                http_x_forwarded_for = s.group(<span class="number">10</span>)</div><div class="line"> </div><div class="line">                <span class="comment"># 30/Sep/2017:01:08:39 +0000</span></div><div class="line">                <span class="keyword">for</span> mon <span class="keyword">in</span> month_abr.keys():</div><div class="line">                    <span class="keyword">if</span> mon <span class="keyword">in</span> local_time:</div><div class="line">                        local_time = local_time.replace(mon, month_abr[mon])</div><div class="line">                        <span class="keyword">break</span></div><div class="line"> </div><div class="line">                lt = arrow.get(local_time, <span class="string">"DD/MM/YYYY:HH:mm:ss"</span>)</div><div class="line">                lt = lt.shift(hours=<span class="number">8</span>)</div><div class="line">                local_time = str(lt.datetime)</div><div class="line">                i = i+<span class="number">1</span></div><div class="line">                <span class="comment"># print("line:&#123;&#125; &gt; &#123;&#125;".format(i, local_time))</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_body != <span class="string">'-'</span>:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        request_body = request_body.replace(<span class="string">r'\x22'</span>, <span class="string">'"'</span>).replace(<span class="string">"null"</span>, <span class="string">'""'</span>)</div><div class="line">                        request_body_dict = json.loads(request_body)</div><div class="line">                        fund_id = request_body_dict.get(<span class="string">'fund_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        user_id = request_body_dict.get(<span class="string">'user_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                            user_id = request_body_dict.get(<span class="string">'userId'</span>, <span class="keyword">None</span>)</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        print(<span class="string">"request_body:&#123;&#125;"</span>.format(request_body))</div><div class="line">                        print(e)</div><div class="line">                        fund_id = <span class="keyword">None</span></div><div class="line">                        user_id = <span class="keyword">None</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    fund_id = <span class="keyword">None</span></div><div class="line">                    user_id = <span class="keyword">None</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">"GET"</span>, <span class="string">"POST"</span>):</div><div class="line">                    <span class="comment"># print(request_method)</span></div><div class="line">                    <span class="keyword">continue</span></div><div class="line">  </div><div class="line">                df = pd.DataFrame(&#123;<span class="string">"remote_addr"</span>: [remote_addr], <span class="string">"request_method"</span>: [request_method], <span class="string">"local_time"</span>: [local_time],</div><div class="line">                                                <span class="string">"request_url"</span>: [request_url], <span class="string">"status"</span>: [status], <span class="string">"request_body"</span>: [request_body],</div><div class="line">                                                <span class="string">"body_bytes_sent"</span>: [body_bytes_sent], <span class="string">"http_referer"</span>: [http_referer],</div><div class="line">                                                <span class="string">"http_user_agent"</span>: [http_user_agent], <span class="string">"http_x_forwarded_for"</span>: [http_x_forwarded_for],</div><div class="line">                                                <span class="string">"fund_id"</span>: [fund_id], <span class="string">"user_id"</span>: [user_id]</div><div class="line">                                                &#125;)</div><div class="line">                df[<span class="string">'create_at'</span>] = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">                <span class="comment"># print(df)</span></div><div class="line">                dfs.append(df)</div><div class="line"> </div><div class="line">                <span class="comment">#每100条写数据库</span></div><div class="line">                <span class="keyword">if</span> len(dfs) &gt;= <span class="number">100</span>:</div><div class="line">                    df_all = pd.concat(dfs)</div><div class="line">                    df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])                    </div><div class="line">                    df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line">                    print(<span class="string">"写入长度为："</span> + str(len(df_all)))</div><div class="line">                    dfs = []</div><div class="line">  </div><div class="line">        df_all = pd.concat(dfs)</div><div class="line">        df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])</div><div class="line">        df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div></pre></td></tr></table></figure>
<h1 id="5，日志展示"><a href="#5，日志展示" class="headerlink" title="5，日志展示"></a>5，日志展示</h1><p>日志结构化写入数据库后，到前端页面可以多维度展示，下面是展示页面示例：</p>
<ul>
<li><p>统计每日活跃IP数<br><img src="http://pic.cbbing.com/2017-10-27/log1.png" alt=""></p>
</li>
<li><p>统计每日API请求次数<br><img src="http://pic.cbbing.com/2017-10-27/log2.png" alt=""></p>
</li>
<li><p>分类分析<br><img src="http://pic.cbbing.com/2017-10-27/log3.png" alt=""><br><img src="http://pic.cbbing.com/2017-10-27/log4.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，日志定义&quot;&gt;&lt;a href=&quot;#1，日志定义&quot; class=&quot;headerlink&quot; title=&quot;1，日志定义&quot;&gt;&lt;/a&gt;1，日志定义&lt;/h1&gt;&lt;p&gt;在nginx.conf中定义的日志格式如下：&lt;br&gt;&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log_format  &lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$remote_addr&lt;/span&gt; - &lt;span class=&quot;variable&quot;&gt;$remote_user&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$time_local&lt;/span&gt;] &quot;&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$status&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$request_body&lt;/span&gt;] &lt;span class=&quot;variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &quot;&lt;span class=&quot;variable&quot;&gt;$http_referer&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&quot;&lt;span class=&quot;variable&quot;&gt;$http_user_agent&lt;/span&gt;&quot; &quot;&lt;span class=&quot;variable&quot;&gt;$http_x_forwarded_for&lt;/span&gt;&quot;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.kekefund.com/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="日志" scheme="http://www.kekefund.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>docker命令手册</title>
    <link href="http://www.kekefund.com/2017/08/09/docker-command/"/>
    <id>http://www.kekefund.com/2017/08/09/docker-command/</id>
    <published>2017-08-09T08:06:45.000Z</published>
    <updated>2017-10-13T05:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 命令操作手册，方便查询使用。</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>docker run </p>
<blockquote>
<p>–name 指定容器名<br>-p 指定端口映射<br><a id="more"></a><br>-v 挂载数据卷或者本地目录映射 :ro 挂载为只读<br>-d 后台持续运行<br>-i 交互式操作<br>-t 终端<br>-rm 容器退出后随之将其删除(与-d 冲突)</p>
</blockquote>
<p>eg:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> --name ghost1 -p 80:2368 -v /c/Dev/server/blogtest2:/var/lib/ghost ghost</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -it --rm ubuntu:14.04 bash</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> ubuntu:14.04 /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> --name webserver <span class="_">-d</span> -p 80:80 nginx</span></div></pre></td></tr></table></figure>
<h1 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker ps 列出正在运行的容器 </div><div class="line">docker <span class="keyword">kill</span> $(docker ps -q) 停止所有正在运行的容器 </div><div class="line">docker ps -a 查看所有容器，包括运行和停止的</div><div class="line">docker <span class="keyword">start</span> 启动一个已有容器 </div><div class="line">docker <span class="keyword">stop</span> 终止一个运行中的容器 </div><div class="line">docker restart 重启某个容器 </div><div class="line">docker rm xxxx 删除容器 -f 删除运行中的 </div><div class="line">docker rm $(docker ps -a -q) 删除所有终止的容器 </div><div class="line">docker <span class="keyword">logs</span> [<span class="keyword">container</span> <span class="keyword">id</span> <span class="keyword">or</span> <span class="keyword">names</span>] 获取输出<span class="keyword">log</span> -f 实时打印日志</div><div class="line">docker diff 容器名 查看我们定制以及修改 </div><div class="line">docker volume ls 列出所有本机的数据卷</div></pre></td></tr></table></figure>
<h1 id="管理镜像"><a href="#管理镜像" class="headerlink" title="管理镜像"></a>管理镜像</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker pull [option] [url]  获取镜像, 例如: docker pull ubuntu:<span class="number">14.04</span> </div><div class="line">docker images 列出本地镜像 </div><div class="line">docker build -t nginx:v3 .   在当前目录构建镜像,-t 是指定镜像名称 <span class="keyword">tag</span></div><div class="line"><span class="title">docker</span> rmi xxxxxx 删除本地镜像</div><div class="line">docker commit 选项 容器名/id 仓库名 <span class="keyword">tag</span> <span class="title">：可以把修改定制过的容器保存为镜像</span></div><div class="line"> </div><div class="line">docker images -f <span class="attr">dangling=</span><span class="literal">true</span> 列出所有虚悬镜像(dangling image)</div><div class="line">docker rmi $(docker images -q -f <span class="attr">dangling=</span><span class="literal">true</span>) 删除所有虚悬镜像</div><div class="line">docker histroy 镜像名:标签 查看镜像修改的历史纪录</div></pre></td></tr></table></figure>
<h1 id="查询单个容器详细信息"><a href="#查询单个容器详细信息" class="headerlink" title="查询单个容器详细信息"></a>查询单个容器详细信息</h1><p>可以看到容器的完整ID、运行状态、网络设置、镜像等信息。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@VM_25_5_centos</span> ~]<span class="meta"># docker inspect splash</span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"b5a387e5f9064113e48c06384be045675e12047c7ef5564f76ae8bf0c7f95304"</span>,</div><div class="line">        <span class="string">"Created"</span>: <span class="string">"2017-04-05T04:49:40.025249222Z"</span>,</div><div class="line">        <span class="string">"Path"</span>: <span class="string">"python3"</span>,</div><div class="line">        ....   </div><div class="line">        <span class="string">"State"</span>: &#123;</div><div class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</div><div class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</div><div class="line">         </div><div class="line">            <span class="string">"Networks"</span>: &#123;</div><div class="line">                <span class="string">"bridge"</span>: &#123;</div><div class="line">                    <span class="string">"IPAMConfig"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Links"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Aliases"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"b3063867b30c820bb92ee198edad8d5cb8974135d0490e956d3646364ccca711"</span>,</div><div class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"979a8d0bbfde532c45dfbf97bab3c2d874100b4ca448a460b81904709260eb3b"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</div><div class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.3"</span>,</div><div class="line">                    <span class="string">"IPPrefixLen"</span>: <span class="number">16</span>,</div><div class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: <span class="number">0</span>,</div><div class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:03"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure>
<h1 id="实时打印日志"><a href="#实时打印日志" class="headerlink" title="实时打印日志"></a>实时打印日志</h1><p>加上-f参数<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs -f splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器所占用的系统资源"><a href="#查看容器所占用的系统资源" class="headerlink" title="查看容器所占用的系统资源"></a>查看容器所占用的系统资源</h1><p>如CPU使用率、内存、网络和磁盘开销。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]# docker stats splash</div><div class="line"></div><div class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O              BLOCK I/O             PIDS</div><div class="line">splash              <span class="number">0.04</span>%               <span class="number">230.5</span> MiB / <span class="number">7.64</span> GiB   <span class="number">2.95</span>%               <span class="number">50.7</span> MB / <span class="number">33.77</span> MB   <span class="number">547.9</span> MB / <span class="number">131.1</span> kB   <span class="number">7</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器使用了哪些进程"><a href="#查看容器使用了哪些进程" class="headerlink" title="查看容器使用了哪些进程"></a>查看容器使用了哪些进程</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]<span class="comment"># docker exec api1 ps aux</span></div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root        <span class="number"> 1 </span> 0.0  0.3<span class="number"> 125480 </span>25136 ?        Ss+  Mar31   0:00 python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root        <span class="number"> 6 </span> 0.9  0.8<span class="number"> 747960 </span>64664 ?        Sl+  Mar31 139:37 /usr/local/bin/python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root      <span class="number"> 886 </span> 0.0  0.0 <span class="number"> 19180 </span><span class="number"> 1300 </span>?        Rs   16:56   0:00 ps aux</div></pre></td></tr></table></figure>
<h1 id="转移Docker的数据目录到大的磁盘分区上"><a href="#转移Docker的数据目录到大的磁盘分区上" class="headerlink" title="转移Docker的数据目录到大的磁盘分区上"></a>转移Docker的数据目录到大的磁盘分区上</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">service docker stop</div><div class="line">mkdir /data/dockerData/</div><div class="line">mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span> /<span class="title">data</span>/<span class="title">dockerData</span>/</span></div><div class="line">ln -s /data/dockerData/docker /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></div><div class="line">service docker start</div></pre></td></tr></table></figure>
<h1 id="centos7-安装docker"><a href="#centos7-安装docker" class="headerlink" title="centos7 安装docker"></a>centos7 安装docker</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">yum -y install docker-io</div></pre></td></tr></table></figure>
<p>可通过以下命令启动 Docker 服务：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">chkconfig docker <span class="keyword">on</span> <span class="comment"># 设置开机启动</span></div></pre></td></tr></table></figure></p>
<p>可使用以下命令，查看 Docker 是否安装成功：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@localhost</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div></pre></td></tr></table></figure></p>
<h1 id="centos7-卸载docker"><a href="#centos7-卸载docker" class="headerlink" title="centos7 卸载docker"></a>centos7 卸载docker</h1><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root<span class="title">@localhost</span> ~]# yum list installed | grep docker</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos </div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div></pre></td></tr></table></figure>
<h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker network <span class="keyword">create</span></div><div class="line">docker network <span class="keyword">connect</span></div><div class="line">docker network ls</div><div class="line">docker network rm</div><div class="line">docker network <span class="keyword">disconnect</span></div><div class="line">docker network inspect</div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/0a03b68023e1" target="_blank" rel="external">Docker network命令详解</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 命令操作手册，方便查询使用。&lt;/p&gt;
&lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;p&gt;docker run &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–name 指定容器名&lt;br&gt;-p 指定端口映射&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像自动构建</title>
    <link href="http://www.kekefund.com/2017/08/08/docker-image-auo-build/"/>
    <id>http://www.kekefund.com/2017/08/08/docker-image-auo-build/</id>
    <published>2017-08-08T10:09:51.000Z</published>
    <updated>2018-09-21T07:50:46.072Z</updated>
    
    <content type="html"><![CDATA[<p>基于Git的代码版本控制，能保证每个开发人员的开发成果得到有效的保护，不会发生因为其他人的“误操作”操作将自己辛辛苦苦写的代码删除，而且能够跟踪每一次的改动，能快速回滚到之前任一版本。<br>基于Docker镜像的版本控制，能保证应用服务的正常迭代更新，某一版本出问题了可以快速切换至其他镜像版本。<br><a id="more"></a></p>
<h1 id="1，镜像仓库"><a href="#1，镜像仓库" class="headerlink" title="1，镜像仓库"></a>1，镜像仓库</h1><p>镜像的版本控制，主要是通过给image加tag来区分。首先，我们需要一个镜像仓库，最好是私有仓库。目前国内阿里云和腾讯云都提供免费的私有镜像服务，当然，我们还可以自己搭建私有镜像仓库。</p>
<h2 id="1-1，腾讯云镜像仓库：（https-console-qcloud-com-ccs）"><a href="#1-1，腾讯云镜像仓库：（https-console-qcloud-com-ccs）" class="headerlink" title="1.1，腾讯云镜像仓库：（https://console.qcloud.com/ccs）"></a>1.1，腾讯云镜像仓库：（<a href="https://console.qcloud.com/ccs）" target="_blank" rel="external">https://console.qcloud.com/ccs）</a></h2><p><img src="http://pic.cbbing.com/2017-08-08/b1.png" alt=""></p>
<h2 id="1-2，阿里云镜像仓库：（https-cr-console-aliyun-com）"><a href="#1-2，阿里云镜像仓库：（https-cr-console-aliyun-com）" class="headerlink" title="1.2，阿里云镜像仓库：（https://cr.console.aliyun.com）"></a>1.2，阿里云镜像仓库：（<a href="https://cr.console.aliyun.com）" target="_blank" rel="external">https://cr.console.aliyun.com）</a></h2><p><img src="http://pic.cbbing.com/2017-08-08/b2.png" alt=""></p>
<h2 id="1-3，自建私有仓库"><a href="#1-3，自建私有仓库" class="headerlink" title="1.3，自建私有仓库"></a>1.3，自建私有仓库</h2><p>参考本人博客: <a href="http://kekefund.com/2017/06/07/doker-registry/" target="_blank" rel="external">docker私有仓库搭建</a></p>
<p><img src="http://pic.cbbing.com/2017-08-08/b3.png" alt=""></p>
<h1 id="2-上传镜像"><a href="#2-上传镜像" class="headerlink" title="2, 上传镜像"></a>2, 上传镜像</h1><p>以腾讯云镜像仓库为例。先开通镜像仓库，然后在命令行登录：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker login --username=yourname -p=yourpassword ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span></div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<blockquote>
<p>username：腾讯云账号，p为密码</p>
</blockquote>
<p>本地镜像上传<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker tag [ImageId] ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/[namespace]/[ImageName]:[镜像版本号]</div><div class="line">$ sudo docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/[namespace]/[ImageName]:[镜像版本号]</div></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker tag fof_api:v20170808 ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div><div class="line">$ docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div></pre></td></tr></table></figure></p>
<h1 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3, 下载镜像"></a>3, 下载镜像</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker login --username=yourname -p=yourpassword ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span></div><div class="line">$ docker pull ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div></pre></td></tr></table></figure>
<h1 id="4，镜像制作"><a href="#4，镜像制作" class="headerlink" title="4，镜像制作"></a>4，镜像制作</h1><h2 id="4-1-API镜像自动构建"><a href="#4-1-API镜像自动构建" class="headerlink" title="4.1 API镜像自动构建"></a>4.1 API镜像自动构建</h2><p>API是基于python的Django框架编写的。在项目的根目录定义好Dockerfile和requirements.txt，具体参考<a href="http://kekefund.com/2017/03/30/docker-django/" target="_blank" rel="external">docker版Django</a>。然后定义Shell脚本(make.sh)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># make.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git pull</div><div class="line"><span class="built_in">echo</span> <span class="string">"开始制作镜像..."</span></div><div class="line">image_tag=`date +%Y%m%d_%H%M`</div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t ccr.ccs.tencentyun.com/sk/api:<span class="variable">$&#123;image_tag&#125;</span> .</div><div class="line"><span class="built_in">echo</span> <span class="string">"制作镜像成功!"</span></div><div class="line"></div><div class="line">docker login --username=yourname -p=yourpassword ccr.ccs.tencentyun.com</div><div class="line">docker push ccr.ccs.tencentyun.com/sk/api:<span class="variable">$&#123;image_tag&#125;</span></div></pre></td></tr></table></figure></p>
<p>制作流程：</p>
<ol>
<li>更新最新代码</li>
<li>制作镜像</li>
<li>镜像添加tag，这里tag是当前日期</li>
<li>上传镜像只腾讯云docker仓库</li>
</ol>
<h2 id="4-2-Web应用镜像自动构建"><a href="#4-2-Web应用镜像自动构建" class="headerlink" title="4.2 Web应用镜像自动构建"></a>4.2 Web应用镜像自动构建</h2><p>Web应用是用maven搭建的SpringMVC+MyBatis项目。打包生成war包可以通过maven命令行在服务器上执行。这里我们采用的服务器是centos7.3，java版本是1.8，maven版本是3.3.9。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mvn -v</div><div class="line">Apache Maven <span class="number">3.3</span><span class="number">.9</span> (bb52d8502b132ec0a5a3f4c09453c07478323dc5; <span class="number">2015</span><span class="number">-11</span><span class="number">-11</span><span class="string">T00:</span><span class="number">41</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span>)</div><div class="line">Maven <span class="string">home:</span> <span class="regexp">/usr/</span>local/apache-maven<span class="number">-3.3</span><span class="number">.9</span></div><div class="line">Java <span class="string">version:</span> <span class="number">1.8</span><span class="number">.0</span>_111, <span class="string">vendor:</span> Oracle Corporation</div><div class="line">Java <span class="string">home:</span> <span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_111/</span>jre</div><div class="line">Default <span class="string">locale:</span> en_US, platform <span class="string">encoding:</span> ANSI_X3<span class="number">.4</span><span class="number">-1968</span></div><div class="line">OS <span class="string">name:</span> <span class="string">"linux"</span>, <span class="string">version:</span> <span class="string">"3.10.0-514.21.2.el7.x86_64"</span>, <span class="string">arch:</span> <span class="string">"amd64"</span>, <span class="string">family:</span> <span class="string">"unix"</span></div></pre></td></tr></table></figure></p>
<p>在服务器上安装好java，maven后，配置maven repository路径:apache-maven-3.3.9/conf/settings.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></div><div class="line">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/your/path/apache-maven-3.3.9/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-2-1-war包生成脚本"><a href="#4-2-1-war包生成脚本" class="headerlink" title="4.2.1 war包生成脚本"></a>4.2.1 war包生成脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mvn_on_centos.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">APP_PATH=<span class="string">"/mydata/code/build/fofweb"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/dzmsoft-ccs</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/dzmsoft-ucs</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy-base</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy-backstage</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeay-report</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /mydata/code/deploy/web_war</div><div class="line">mkdir ./ROOT</div><div class="line"><span class="built_in">cd</span> ROOT</div><div class="line">cp /mydata/code/build/fofweb/fofeasy/target/fofeasy.war .</div><div class="line">jar xvf fofeasy.war</div><div class="line">rm fofeasy.war</div><div class="line"><span class="built_in">cd</span> ..</div><div class="line">rm ROOT.tar.gz</div><div class="line">tar czf ROOT.tar.gz ./ROOT</div><div class="line">rm -rf ROOT/</div></pre></td></tr></table></figure>
<p>这里，我们先生成fofeasy.war包，然后将war包移到脚本所在目录解压，打包成tar.gz。</p>
<h3 id="4-2-2-镜像制作及上传"><a href="#4-2-2-镜像制作及上传" class="headerlink" title="4.2.2 镜像制作及上传"></a>4.2.2 镜像制作及上传</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#make_power_image_on_centos.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">MVN_PATH=<span class="string">"/mydata/code/deploy/web_war"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"MVN_PATH:<span class="variable">$&#123;MVN_PATH&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"开始生成WAR包..."</span></div><div class="line"><span class="variable">$&#123;MVN_PATH&#125;</span>/mvn_on_centos.sh</div><div class="line"><span class="built_in">echo</span> <span class="string">"WAR包生成成功！"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"复制War包到source目录"</span></div><div class="line">cp <span class="variable">$&#123;MVN_PATH&#125;</span>/ROOT.tar.gz <span class="built_in">source</span>/</div><div class="line"><span class="built_in">echo</span> <span class="string">"复制完成"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"开始制作镜像..."</span></div><div class="line">image_tag=`date +%Y%m%d` <span class="comment">#_%H%M</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t ccr.ccs.tencentyun.com/sk/power:v<span class="variable">$&#123;image_tag&#125;</span> .</div><div class="line"><span class="built_in">echo</span> <span class="string">"制作镜像成功!"</span></div><div class="line"></div><div class="line">docker login --username=yourname -p=yourpassword ccr.ccs.tencentyun.com</div><div class="line">docker push ccr.ccs.tencentyun.com/sk/power:v<span class="variable">$&#123;image_tag&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"上传镜像成功!"</span></div></pre></td></tr></table></figure>
<h3 id="4-2-3-镜像自动制作-定时任务"><a href="#4-2-3-镜像自动制作-定时任务" class="headerlink" title="4.2.3 镜像自动制作-定时任务"></a>4.2.3 镜像自动制作-定时任务</h3><p>编译一个调用shell脚本build.sh来管理以上两个构建镜像的sh文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">POWER_PATH=<span class="string">"/mydata/code/deploy/fofpower/web"</span></div><div class="line">API_PATH=<span class="string">"/mydata/code/build/fof_api"</span></div><div class="line">GIT_WEB_PATH=<span class="string">"/mydata/code/build/fofweb"</span></div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"fofweb:git pull..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;GIT_WEB_PATH&#125;</span></div><div class="line">git pull</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"Build fofpower..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;POWER_PATH&#125;</span></div><div class="line"><span class="variable">$&#123;POWER_PATH&#125;</span>/make_power_image_on_centos.sh</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"Build fof_api..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;API_PATH&#125;</span></div><div class="line"><span class="variable">$&#123;API_PATH&#125;</span>/make.sh</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> `date +%Y-%m-%d` `date +%X` <span class="string">"制作完成"</span> &gt;&gt; /mydata/code/build/console.txt</div></pre></td></tr></table></figure></p>
<p>在cron中添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ crontab <span class="_">-e</span></div></pre></td></tr></table></figure></p>
<p>在行尾添加:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">22 </span><span class="number">11</span> * * * cd /mydata/code/build/ &amp;&amp; ./build.sh</div></pre></td></tr></table></figure></p>
<p>定时任务每天11：22执行。</p>
<ul>
<li>遇到在Shell sh下执行成功，在cron中确执行不成功的问题？<br>这是因为cron使用的环境变量不是系统的环境变量，而是自己的环境变量。<br>解决方法：<br>在sh脚本添加如下代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!bin/bash</span></div><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="5，镜像使用"><a href="#5，镜像使用" class="headerlink" title="5，镜像使用"></a>5，镜像使用</h1><p>本地push镜像（需先登录）<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:[tag]</div></pre></td></tr></table></figure></p>
<p>上传成果的镜像在镜像仓库能看到：<br><img src="http://pic.cbbing.com/2017-08-08/b4.png" alt=""></p>
<p>还可以在后台自动构建，关联github工程，指定Dockerfile，commit触发自动构建。</p>
<blockquote>
<p>PS: commit触发自动构建，在阿里云和腾讯云上测试没成果，需手动构建。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.mykernel.cn/archives/487" target="_blank" rel="external">使用阿里云免费构建docker私有仓库</a><br><a href="http://www.jianshu.com/p/c36fb8d80157" target="_blank" rel="external">Centos 下maven的安装与配置～</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Git的代码版本控制，能保证每个开发人员的开发成果得到有效的保护，不会发生因为其他人的“误操作”操作将自己辛辛苦苦写的代码删除，而且能够跟踪每一次的改动，能快速回滚到之前任一版本。&lt;br&gt;基于Docker镜像的版本控制，能保证应用服务的正常迭代更新，某一版本出问题了可以快速切换至其他镜像版本。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="镜像" scheme="http://www.kekefund.com/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="腾讯云" scheme="http://www.kekefund.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="阿里云" scheme="http://www.kekefund.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="build" scheme="http://www.kekefund.com/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>2017腾讯云+未来峰会</title>
    <link href="http://www.kekefund.com/2017/06/23/qcloud-summit/"/>
    <id>http://www.kekefund.com/2017/06/23/qcloud-summit/</id>
    <published>2017-06-23T07:19:59.000Z</published>
    <updated>2018-09-21T07:50:46.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云时代的新趋势-马化腾"><a href="#云时代的新趋势-马化腾" class="headerlink" title="云时代的新趋势  马化腾"></a>云时代的新趋势  马化腾</h1><p><img src="http://pic.cbbing.com/2017-06-23/qs1.png" alt=""><br><a id="more"></a></p>
<blockquote>
<p>电子发票，扫描填写，云端上传，财务报销，钱款到账</p>
</blockquote>
<h1 id="人工智能，为何是现在？"><a href="#人工智能，为何是现在？" class="headerlink" title="人工智能，为何是现在？"></a>人工智能，为何是现在？</h1><blockquote>
<p>张首晟 斯坦福大学物理教授，美国国家科学院院士</p>
</blockquote>
<ul>
<li>摩尔定律所描述的计算能力的指数增长</li>
<li>互联网和物联网的爆发性增长所产生的海量数据</li>
<li>智能算法的快速发展</li>
</ul>
<h2 id="仅基于摄像头的自动驾驶技术"><a href="#仅基于摄像头的自动驾驶技术" class="headerlink" title="仅基于摄像头的自动驾驶技术"></a>仅基于摄像头的自动驾驶技术</h2><p>不需要激光雷达，也不需要高清三维地图 =&gt;Autox技术的可扩展性<br><img src="http://pic.cbbing.com/2017-06-23/qs2.png" alt=""></p>
<ul>
<li><p>大数据<br>金融、教育、健康……，我们需要更多的结构化数据。</p>
</li>
<li><p>数据市场<br>分享个人数据而保护个人隐私 =&gt; 形成数据市场<br>Homomorphic encryption（同态加密）技术</p>
</li>
</ul>
<h1 id="AI即服务"><a href="#AI即服务" class="headerlink" title="AI即服务"></a>AI即服务</h1><p><img src="http://pic.cbbing.com/2017-06-23/qs3.png" alt=""></p>
<h1 id="金融科技"><a href="#金融科技" class="headerlink" title="金融科技"></a>金融科技</h1><blockquote>
<p>李亮，平安科技首席战略官 </p>
</blockquote>
<ul>
<li>1.0：金融IT，科技支持金融</li>
<li>2.0：互联网金融，互联网+金融</li>
<li>3.0：金融科技，科技引领金融<br><img src="http://pic.cbbing.com/2017-06-23/qs4.png" alt=""></li>
</ul>
<h2 id="AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱"><a href="#AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱" class="headerlink" title="AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱"></a>AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱</h2><p><img src="http://pic.cbbing.com/2017-06-23/qs5.png" alt=""></p>
<h2 id="金融·科技-or-科技·金融"><a href="#金融·科技-or-科技·金融" class="headerlink" title="金融·科技 or 科技·金融"></a>金融·科技 or 科技·金融</h2><p><img src="http://pic.cbbing.com/2017-06-23/qs6.png" alt=""></p>
<h2 id="金融应用场景"><a href="#金融应用场景" class="headerlink" title="金融应用场景"></a>金融应用场景</h2><ul>
<li>投资类<br><img src="http://pic.cbbing.com/2017-06-23/qs7.png" alt=""></li>
</ul>
<ul>
<li>银行类<br><img src="http://pic.cbbing.com/2017-06-23/qs8.png" alt=""></li>
<li>保险类<br><img src="http://pic.cbbing.com/2017-06-23/qs9.png" alt=""></li>
</ul>
<h1 id="无缝的数据访问是推动AI商业化应用的关键"><a href="#无缝的数据访问是推动AI商业化应用的关键" class="headerlink" title="无缝的数据访问是推动AI商业化应用的关键"></a>无缝的数据访问是推动AI商业化应用的关键</h1><blockquote>
<p>田民，顺丰集团CTO，顺丰科技CEO</p>
</blockquote>
<h2 id="AI的4大核心要素"><a href="#AI的4大核心要素" class="headerlink" title="AI的4大核心要素"></a>AI的4大核心要素</h2><ul>
<li>数据</li>
<li>场景</li>
<li>技术</li>
<li>算法</li>
</ul>
<h2 id="AI转型的5大关键"><a href="#AI转型的5大关键" class="headerlink" title="AI转型的5大关键"></a>AI转型的5大关键</h2><ul>
<li>成功用例</li>
<li>数据生态</li>
<li>技术工具</li>
<li>无缝介入工作流程</li>
<li>开放的文化和组织</li>
</ul>
<h2 id="AI技术采用率成熟度的6大标准"><a href="#AI技术采用率成熟度的6大标准" class="headerlink" title="AI技术采用率成熟度的6大标准"></a>AI技术采用率成熟度的6大标准</h2><ul>
<li>数字化成熟度</li>
<li>商业规模化应用</li>
<li>核心业务应用</li>
<li>技术多元化</li>
<li>投资回报</li>
<li>高管态度<br><img src="http://pic.cbbing.com/2017-06-23/qs10.png" alt=""></li>
</ul>
<h1 id="互联网专场"><a href="#互联网专场" class="headerlink" title="互联网专场"></a>互联网专场</h1><h2 id="摩拜高速增长背后的技术支撑（六脉神剑）"><a href="#摩拜高速增长背后的技术支撑（六脉神剑）" class="headerlink" title="摩拜高速增长背后的技术支撑（六脉神剑）"></a>摩拜高速增长背后的技术支撑（六脉神剑）</h2><blockquote>
<p>摩拜首席架构师 范同祥</p>
</blockquote>
<ul>
<li>物联网技术</li>
<li>云计算平台</li>
<li>微服务架构</li>
<li>DevOps流水线</li>
<li>腾讯专家团</li>
<li>摩拜技术文化<br><img src="http://pic.cbbing.com/2017-06-23/qs11.png" alt=""></li>
</ul>
<h3 id="领先同行的物联网技术"><a href="#领先同行的物联网技术" class="headerlink" title="领先同行的物联网技术"></a>领先同行的物联网技术</h3><ul>
<li>智能锁</li>
<li>OTA在线升级</li>
<li>软硬件快速迭代</li>
<li>近100项专利或专利申请</li>
<li>GPS定位</li>
<li>GSM通信</li>
<li>蓝牙开锁</li>
<li>NB-IoT<br><img src="http://pic.cbbing.com/2017-06-23/qs12.png" alt=""></li>
</ul>
<h3 id="拥抱主流技术栈"><a href="#拥抱主流技术栈" class="headerlink" title="拥抱主流技术栈"></a>拥抱主流技术栈</h3><ul>
<li>Spring Cloud</li>
<li>Netflix OSS</li>
<li>Consul</li>
<li>ZipKin<br><img src="http://pic.cbbing.com/2017-06-23/qs13.png" alt=""></li>
</ul>
<h3 id="服务分层，保障核心系统稳定可用"><a href="#服务分层，保障核心系统稳定可用" class="headerlink" title="服务分层，保障核心系统稳定可用"></a>服务分层，保障核心系统稳定可用</h3><ul>
<li>数据分层</li>
<li>核心业务系统</li>
<li>运营支撑系统<br><img src="http://pic.cbbing.com/2017-06-23/qs14.png" alt=""><br><img src="http://pic.cbbing.com/2017-06-23/qs15.png" alt=""></li>
</ul>
<h3 id="实用、高效的工具链，步入DevOps快车道"><a href="#实用、高效的工具链，步入DevOps快车道" class="headerlink" title="实用、高效的工具链，步入DevOps快车道"></a>实用、高效的工具链，步入DevOps快车道</h3><ul>
<li>代码模板化</li>
<li>服务容器化</li>
<li>环境标准化</li>
<li>自动化测试</li>
<li>自动化部署</li>
<li>多分支并行迭代<br><img src="http://pic.cbbing.com/2017-06-23/qs16.png" alt=""></li>
</ul>
<h3 id="借力腾讯云"><a href="#借力腾讯云" class="headerlink" title="借力腾讯云"></a>借力腾讯云</h3><p><img src="http://pic.cbbing.com/2017-06-23/qs18.png" alt=""></p>
<h3 id="技术文化"><a href="#技术文化" class="headerlink" title="技术文化"></a>技术文化</h3><p><img src="http://pic.cbbing.com/2017-06-23/qs17.png" alt=""></p>
<h1 id="金融专场"><a href="#金融专场" class="headerlink" title="金融专场"></a>金融专场</h1><h2 id="云上“智”造新金融"><a href="#云上“智”造新金融" class="headerlink" title="云上“智”造新金融"></a>云上“智”造新金融</h2><blockquote>
<p>朱立强，腾讯FiT副总裁,腾讯云副总裁</p>
</blockquote>
<p>AI与金融结合的方向<br><img src="http://pic.cbbing.com/2017-06-23/qs19.png" alt=""></p>
<h2 id="“云-AI”金融应用"><a href="#“云-AI”金融应用" class="headerlink" title="“云+AI”金融应用"></a>“云+AI”金融应用</h2><ul>
<li>智能投顾<br><img src="http://pic.cbbing.com/2017-06-23/qs20.png" alt=""></li>
<li>智能营销<br><img src="http://pic.cbbing.com/2017-06-23/qs21.png" alt=""></li>
<li>智能审批<br><img src="http://pic.cbbing.com/2017-06-23/qs22.png" alt=""></li>
<li>反欺诈<br><img src="http://pic.cbbing.com/2017-06-23/qs23.png" alt=""></li>
</ul>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://cloud.tencent.com/act/tcc2017" target="_blank" rel="external">2017腾讯云+未来峰会</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;云时代的新趋势-马化腾&quot;&gt;&lt;a href=&quot;#云时代的新趋势-马化腾&quot; class=&quot;headerlink&quot; title=&quot;云时代的新趋势  马化腾&quot;&gt;&lt;/a&gt;云时代的新趋势  马化腾&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pic.cbbing.com/2017-06-23/qs1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="http://www.kekefund.com/categories/Others/"/>
    
    
      <category term="AI" scheme="http://www.kekefund.com/tags/AI/"/>
    
      <category term="云计算" scheme="http://www.kekefund.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="金融" scheme="http://www.kekefund.com/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>docker私有仓库搭建</title>
    <link href="http://www.kekefund.com/2017/06/07/doker-registry/"/>
    <id>http://www.kekefund.com/2017/06/07/doker-registry/</id>
    <published>2017-06-07T08:08:33.000Z</published>
    <updated>2018-09-21T07:50:46.067Z</updated>
    
    <content type="html"><![CDATA[<p>Docker提供了开放的中央仓库dockerhub，同时也允许我们使用registry搭建本地私有仓库。搭建私有仓库有如下的优点：</p>
<ol>
<li>节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；</li>
<li>私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。<a id="more"></a>
</li>
</ol>
<h1 id="1，搭建私有仓库"><a href="#1，搭建私有仓库" class="headerlink" title="1，搭建私有仓库"></a>1，搭建私有仓库</h1><h2 id="1-1-下载镜像registry"><a href="#1-1-下载镜像registry" class="headerlink" title="1.1 下载镜像registry"></a>1.1 下载镜像registry</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker pull registry</div></pre></td></tr></table></figure>
<h2 id="1-2-启动容器"><a href="#1-2-启动容器" class="headerlink" title="1.2 启动容器"></a>1.2 启动容器</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> --restart=always --name=registry-srv -v /mydata/<span class="symbol">dockerRegistry:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span> <span class="title">registry</span></span></div></pre></td></tr></table></figure>
<p>解释一下:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-d：后台运行</div><div class="line">-p：将容器的<span class="number">5000</span>端口映射到宿主机的<span class="number">5000</span>端口</div><div class="line">--restart：docker服务重启后总是重启此容器</div><div class="line">--name：容器的名称</div><div class="line">-v：将容器内的/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span>映射到宿主机的/<span class="title">mydata</span>/<span class="title">dockerRegistry</span>目录</span></div></pre></td></tr></table></figure></p>
<h1 id="2，搭建WEB服务"><a href="#2，搭建WEB服务" class="headerlink" title="2，搭建WEB服务"></a>2，搭建WEB服务</h1><p>私有仓库搭建好了，怎么查看仓库里的镜像，搭建一个web服务，查看修改image比较方便。</p>
<h2 id="2-1-下载镜像"><a href="#2-1-下载镜像" class="headerlink" title="2.1 下载镜像"></a>2.1 下载镜像</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker pull hyper/docker-registry-web</div></pre></td></tr></table></figure>
<h2 id="2-2-启动容器"><a href="#2-2-启动容器" class="headerlink" title="2.2 启动容器"></a>2.2 启动容器</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -p <span class="number">8080</span>:<span class="number">8080</span> --restart=always --name <span class="keyword">registry</span>-web --link <span class="keyword">registry</span>-srv -e REGISTRY_URL=<span class="keyword">http</span>://<span class="keyword">registry</span>-srv:<span class="number">5000</span>/v2 -e REGISTRY_NAME=localhost:<span class="number">5000</span> hyper/docker-<span class="keyword">registry</span>-web</div></pre></td></tr></table></figure>
<p>解释一下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="symbol">it:</span> 以交互模式运行</span></div><div class="line">-<span class="ruby">-link：链接其它容器(registry-srv)，在此容器中，使用registry-srv等同于registry-srv容器的局域网地址</span></div><div class="line">-<span class="ruby">e：设置环境变量</span></div></pre></td></tr></table></figure></p>
<h1 id="3，上传本地镜像到私有仓库"><a href="#3，上传本地镜像到私有仓库" class="headerlink" title="3，上传本地镜像到私有仓库"></a>3，上传本地镜像到私有仓库</h1><p>例如，将本地的hcharts上传到仓库<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker images | grep hcharts</div><div class="line">cbbing/hcharts                       latest              <span class="number">64164</span>ca3dafe        <span class="number">3</span> weeks ago         <span class="number">550</span> MB</div></pre></td></tr></table></figure></p>
<h2 id="3-1-修改镜像tag"><a href="#3-1-修改镜像tag" class="headerlink" title="3.1 修改镜像tag"></a>3.1 修改镜像tag</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">tag</span> <span class="title">cbbing</span>/hcharts <span class="number">192.168</span>.<span class="number">1.87</span>:<span class="number">5000</span>/cbbing/hcharts</div></pre></td></tr></table></figure>
<h2 id="3-2-上传tag镜像到仓库"><a href="#3-2-上传tag镜像到仓库" class="headerlink" title="3.2 上传tag镜像到仓库"></a>3.2 上传tag镜像到仓库</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">push</span> <span class="number">192.168</span>.1.87:<span class="number">5000</span>/cbbing/hcharts</div><div class="line"></div><div class="line">The <span class="built_in">push</span> refers to a repository [<span class="number">192.168</span>.1.87:<span class="number">5000</span>/hcharts]</div><div class="line"><span class="number">96b641920005</span>: Pushing [===&gt;                                               ] <span class="number">8.852</span> MB/<span class="number">125.1</span> MB</div><div class="line">ee2881ef910e: Pushing [==&gt;                                                ] <span class="number">11.69</span> MB/<span class="number">232.7</span> MB</div><div class="line">36018b5e9787: Pushing [===&gt;                                               ] <span class="number">11.99</span> MB/<span class="number">192.5</span> MB</div></pre></td></tr></table></figure>
<h2 id="3-3-会出现的push失败"><a href="#3-3-会出现的push失败" class="headerlink" title="3.3 会出现的push失败"></a>3.3 会出现的push失败</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">push</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts</div><div class="line">The <span class="keyword">push</span> refers to a repository [<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts]</div><div class="line">Get https://<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>这是因为Docker在1.3.x之后默认docker registry使用的是https，为了解决这个问题，修改本地主机的docker启动配置文件，添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">--insecure-registry</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.87</span><span class="selector-pseudo">:5000</span></div></pre></td></tr></table></figure></p>
<p>我的macbook在图形化终端上修改如下，填写后“Apply&amp;Restart”。<br><img src="http://pic.cbbing.com/2017-06-07/dr1.png" alt=""></p>
<h2 id="3-4-下载镜像"><a href="#3-4-下载镜像" class="headerlink" title="3.4 下载镜像"></a>3.4 下载镜像</h2><p>在另外的客户机上pull镜像，跟拉取DockerHub上的镜像是一样的流程。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts</div></pre></td></tr></table></figure></p>
<h1 id="4，wen端查看私有仓库镜像"><a href="#4，wen端查看私有仓库镜像" class="headerlink" title="4，wen端查看私有仓库镜像"></a>4，wen端查看私有仓库镜像</h1><p>访问:<a href="http://192.168.1.87:8080/，网页上呈现：" target="_blank" rel="external">http://192.168.1.87:8080/，网页上呈现：</a><br><img src="http://pic.cbbing.com/2017-06-07/dr2.png" alt=""></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote>
<p>1, <a href="https://store.docker.com/images/registry" target="_blank" rel="external">https://store.docker.com/images/registry</a><br>2, <a href="https://store.docker.com/community/images/hyper/docker-registry-web" target="_blank" rel="external">https://store.docker.com/community/images/hyper/docker-registry-web</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker提供了开放的中央仓库dockerhub，同时也允许我们使用registry搭建本地私有仓库。搭建私有仓库有如下的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；&lt;/li&gt;
&lt;li&gt;私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Registry" scheme="http://www.kekefund.com/tags/Registry/"/>
    
  </entry>
  
  <entry>
    <title>scrapy+splash 爬取动态网站(JS)</title>
    <link href="http://www.kekefund.com/2017/05/25/scrapy-splash/"/>
    <id>http://www.kekefund.com/2017/05/25/scrapy-splash/</id>
    <published>2017-05-25T09:05:06.000Z</published>
    <updated>2017-12-18T08:48:43.451Z</updated>
    
    <content type="html"><![CDATA[<p>scrapy只支持静态网页的抓取，通过scrapy-splash，能实现对JavaScript的解析。<br><a id="more"></a></p>
<h1 id="一、搭建Docker服务器"><a href="#一、搭建Docker服务器" class="headerlink" title="一、搭建Docker服务器"></a>一、搭建Docker服务器</h1><blockquote>
<p>Docker的相关知识参考本站的<a href="http://kekefund.com/categories/Docker/" target="_blank" rel="external">Docker相关文章</a>。</p>
</blockquote>
<p>Scrapy-Splash采用Splash HTTP API，需要搭建一个Splash实例，用Docker搭建最方便：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 8050:8050 --restart=always --name=splash -m 200m scrapinghub/splash</span></div><div class="line"> </div><div class="line"><span class="comment"># -m 200m 内存限制使用200兆</span></div></pre></td></tr></table></figure>
<p>在服务器运行好Docker后，就可以通过IP+端口(例如：<a href="http://123.206.211.100:8050" target="_blank" rel="external">http://123.206.211.100:8050</a>  )访问了。</p>
<h1 id="二、Scrapy项目"><a href="#二、Scrapy项目" class="headerlink" title="二、Scrapy项目"></a>二、Scrapy项目</h1><h2 id="1，安装scrapy-splash"><a href="#1，安装scrapy-splash" class="headerlink" title="1，安装scrapy-splash"></a>1，安装scrapy-splash</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip <span class="keyword">install</span> scrapy-splash</div></pre></td></tr></table></figure>
<h2 id="2，配置-setting-py"><a href="#2，配置-setting-py" class="headerlink" title="2，配置(setting.py)"></a>2，配置(setting.py)</h2><h3 id="增加Splash服务器地址"><a href="#增加Splash服务器地址" class="headerlink" title="增加Splash服务器地址"></a>增加Splash服务器地址</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SPLASH_URL</span> = <span class="string">'http://123.206.211.100:8050'</span></div></pre></td></tr></table></figure>
<h3 id="开启Splash中间件"><a href="#开启Splash中间件" class="headerlink" title="开启Splash中间件"></a>开启Splash中间件</h3><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    '<span class="attribute">scrapy_splash.SplashCookiesMiddleware'</span>: 723,</div><div class="line">    'scrapy_splash<span class="variable">.SplashMiddleware</span>': 725,</div><div class="line">    'scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpcompression</span><span class="variable">.HttpCompressionMiddleware</span>': 810,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DUPEFILTER_CLASS</span> = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></div><div class="line"><span class="attr">HTTPCACHE_STORAGE</span> = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></div><div class="line"><span class="attr">SPLASH_COOKIES_DEBUG</span> = <span class="literal">True</span></div></pre></td></tr></table></figure>
<h2 id="3，spider-py使用SplashRequest"><a href="#3，spider-py使用SplashRequest" class="headerlink" title="3，spider.py使用SplashRequest"></a>3，spider.py使用SplashRequest</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line">from scrapy_splash import SplashRequest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderS1</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></div><div class="line"></div><div class="line">    name = <span class="string">"s1_spider"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    	</div><div class="line">    	urls = [<span class="string">'http://sports.sina.com.cn/g/seriea/2017-05-23/doc-ifyfkqiv6736172.shtml'</span>,</div><div class="line">                <span class="string">'http://sports.sina.com.cn/basketball/nba/2017-05-23/doc-ifyfkqiv6683532.shtml'</span>]</div><div class="line">    	</div><div class="line">        requests = []</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="symbol">urls:</span></div><div class="line">       	    url = url.strip()</div><div class="line">       	    request = SplashRequest(url, callback=<span class="keyword">self</span>.parse, args=&#123;<span class="string">'wait'</span><span class="symbol">:</span><span class="number">3</span>&#125;)</div><div class="line">        	requests.append(request)</div><div class="line">        <span class="keyword">return</span> requests</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span>:</div><div class="line">        <span class="keyword">self</span>.log(response.url)</div><div class="line">        ...</div></pre></td></tr></table></figure>
<p>使用非常简单，具体请求参数参考 <a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="external">Scrapy&amp;JavaScript integration through Splash</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scrapy只支持静态网页的抓取，通过scrapy-splash，能实现对JavaScript的解析。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Scrapy" scheme="http://www.kekefund.com/tags/Scrapy/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Splash" scheme="http://www.kekefund.com/tags/Splash/"/>
    
      <category term="JavaScript" scheme="http://www.kekefund.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Docker版highcharts中文导出服务器</title>
    <link href="http://www.kekefund.com/2017/05/12/docker-highcharts-server/"/>
    <id>http://www.kekefund.com/2017/05/12/docker-highcharts-server/</id>
    <published>2017-05-12T08:57:28.000Z</published>
    <updated>2018-09-21T07:50:46.064Z</updated>
    
    <content type="html"><![CDATA[<p>highcharts的导出服务器使用固然方便，但需要把数据上传到它的服务器，对于数据安全性的考虑和外网访问限制的场景，搭建自己的导出服务器是比较可靠的。highcharts提供了一套搭建导出服务器的方法，本文在这个基础上将导出服务器封装成一个Docker容器，并且实现了图片中文字体的支持。</p>
<h1 id="1，基于centos官方镜像"><a href="#1，基于centos官方镜像" class="headerlink" title="1，基于centos官方镜像"></a>1，基于centos官方镜像</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker pull centos</span></div></pre></td></tr></table></figure>
<h1 id="2，启动容器并进入"><a href="#2，启动容器并进入" class="headerlink" title="2，启动容器并进入"></a>2，启动容器并进入</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--name=hcharts -p 3002:80 -v /Users/Download:/home centos bash</span></div></pre></td></tr></table></figure>
<h1 id="3，安装phantomjs"><a href="#3，安装phantomjs" class="headerlink" title="3，安装phantomjs"></a>3，安装phantomjs</h1><p>由于phantomjs的tar.bz2在centos容器中解压失败，我们采用在宿主机中下载并解压好，通过-v链接到容器中。<br>在宿主机中下载最新版的<a href="http://phantomjs.org/download.html" target="_blank" rel="external">phamtomjs</a>，解压到/Users/Download/。在容器的/home目录下就能看到宿主机的解压文件。</p>
<p>设置PATH路径：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="meta">@bfdb</span>9f8adaf6 my_fonts]# <span class="keyword">export</span> PHANTOMJS_HOME = <span class="regexp">/PATH/</span>phantomjs<span class="number">-2.1</span><span class="number">.1</span></div><div class="line">[root<span class="meta">@bfdb</span>9f8adaf6 my_fonts]# <span class="keyword">export</span> PATH = $PATH:$PHANTOMJS_HOME/bin</div></pre></td></tr></table></figure></p>
<p>请在下面相对应的linux版本 运行以下命令</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ubuntu</span></div><div class="line">sudo apt-<span class="keyword">get</span> install libfontconfig</div><div class="line"> </div><div class="line"><span class="meta"># centos</span></div><div class="line">yum install libXext libXrender fontconfig libfontconfig.so<span class="number">.1</span></div></pre></td></tr></table></figure>
<p>输出下面的版本信息即安装成功</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">phantomjs</span> <span class="selector-tag">--version</span></div><div class="line">2<span class="selector-class">.1</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<h1 id="4，安装node-js"><a href="#4，安装node-js" class="headerlink" title="4，安装node.js"></a>4，安装node.js</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --<span class="keyword">location</span> <span class="title">https</span>://rpm.nodesource.com/setup_6.x | bash -</div><div class="line">yum -y install nodejs</div></pre></td></tr></table></figure>
<blockquote>
<p>参考:<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">https://nodejs.org/en/download/package-manager/</a></p>
</blockquote>
<h1 id="5，安装highcharts导出模块"><a href="#5，安装highcharts导出模块" class="headerlink" title="5，安装highcharts导出模块"></a>5，安装highcharts导出模块</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 淘宝[npm镜像](http:<span class="comment">//npm.taobao.org/)：</span></div><div class="line">npm config <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org </span></div><div class="line"><span class="comment">// 全局安装导出模块</span></div><div class="line">npm install highcharts-<span class="keyword">export</span>-server -g</div><div class="line"><span class="comment">// 安装完毕后检查是否安装成功</span></div><div class="line">highcharts-<span class="keyword">export</span>-server</div></pre></td></tr></table></figure>
<h1 id="6，中文字体的支持"><a href="#6，中文字体的支持" class="headerlink" title="6，中文字体的支持"></a>6，中文字体的支持</h1><h2 id="a，复制中文字体到容器"><a href="#a，复制中文字体到容器" class="headerlink" title="a，复制中文字体到容器"></a>a，复制中文字体到容器</h2><p>将windows的fonts目录下拷贝simkai.ttf、simsun.ttc、simhei.ttf，通过-v上传到容器/home目录下。<br>在容器的usr/share/fonts目录下新建my_fonts，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/share/fonts</div><div class="line">$ mkdir myfonts</div><div class="line">$ mv /home/simkai<span class="selector-class">.ttf</span> ./myfonts</div><div class="line">$ mv /home/simsun<span class="selector-class">.ttc</span> ./myfonts</div><div class="line">$ mv /home/simhei<span class="selector-class">.ttf</span> ./myfonts</div></pre></td></tr></table></figure></p>
<h2 id="b，生成字体索引"><a href="#b，生成字体索引" class="headerlink" title="b，生成字体索引"></a>b，生成字体索引</h2><p>在myfonts目录下执行 mkfontscale，执行成功后执行下面命令：fc-list :lang=zh，输出有信息即安装成功！<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@bfdb9f8adaf6</span> my_fonts]<span class="comment"># fc-list :lang=zh</span></div><div class="line">/usr/share/fonts/my_fonts/simsun.<span class="symbol">ttc:</span> NSimSun,新宋体<span class="symbol">:style=Regular</span></div><div class="line">/usr/share/fonts/my_fonts/simhei.<span class="symbol">ttf:</span> SimHei,黑体<span class="symbol">:style=Regular</span>,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,Arrunta</div><div class="line">/usr/share/fonts/my_fonts/simkai.<span class="symbol">ttf:</span> KaiTi,楷体<span class="symbol">:style=Regular</span>,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,Arrunta</div><div class="line">/usr/share/fonts/my_fonts/simsun.<span class="symbol">ttc:</span> SimSun,宋体<span class="symbol">:style=Regular</span></div></pre></td></tr></table></figure></p>
<h1 id="7，测试"><a href="#7，测试" class="headerlink" title="7，测试"></a>7，测试</h1><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'&#123;"</span>infile<span class="string">":&#123;"</span>title<span class="string">": &#123;"</span>text<span class="string">": "</span>中文测试<span class="string">"&#125;, "</span>xAxis<span class="string">": &#123;"</span>categories<span class="string">": ["</span>Jan<span class="string">", "</span>Feb<span class="string">", "</span>Mar<span class="string">"]&#125;, "</span>series<span class="string">": [&#123;"</span>data<span class="string">": [29.9, 71.5, 106.4]&#125;]&#125;&#125;'</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3002</span> -o mychart.png</div></pre></td></tr></table></figure>
<p>得到图片：<br><img src="http://pic.cbbing.com/2017-05-12/mychart.png" alt=""></p>
<h1 id="8，从Docker仓库获取"><a href="#8，从Docker仓库获取" class="headerlink" title="8，从Docker仓库获取"></a>8，从Docker仓库获取</h1><p>本教程中的镜像已上传至docker官方仓库, <a href="https://store.docker.com/community/images/cbbing/hcharts" target="_blank" rel="external">链接</a>，按照说明pull即可。<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">d</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name=hcharts0</span><span class="string">.</span><span class="comment">2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">restart=always</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">3003:3000</span> <span class="comment">cbbing/hcharts</span> <span class="comment">highcharts</span><span class="literal">-</span><span class="comment">export</span><span class="literal">-</span><span class="comment">server</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enableServer</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">3000</span></div></pre></td></tr></table></figure></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote>
<p>1，<a href="https://bbs.hcharts.cn/thread-113-1-1.html" target="_blank" rel="external">Linux下导出服务器缺少字体中文乱码问题解决办法</a></p>
<p>2，<a href="https://www.hcharts.cn/docs/setting-up-the-server" target="_blank" rel="external">搭建导出服务器</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;highcharts的导出服务器使用固然方便，但需要把数据上传到它的服务器，对于数据安全性的考虑和外网访问限制的场景，搭建自己的导出服务器是比较可靠的。highcharts提供了一套搭建导出服务器的方法，本文在这个基础上将导出服务器封装成一个Docker容器，并且实现了图片
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="highcharts" scheme="http://www.kekefund.com/tags/highcharts/"/>
    
  </entry>
  
</feed>
