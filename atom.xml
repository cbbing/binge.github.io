<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KeKeFund</title>
  <subtitle>金融 · Python · 技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kekefund.com/"/>
  <updated>2017-04-19T04:59:12.000Z</updated>
  <id>http://www.kekefund.com/</id>
  
  <author>
    <name>Binger Chen</name>
    <email>cbbing@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker版私人网盘ownCloud</title>
    <link href="http://www.kekefund.com/2017/04/19/docker-owncloud/"/>
    <id>http://www.kekefund.com/2017/04/19/docker-owncloud/</id>
    <published>2017-04-19T04:37:04.000Z</published>
    <updated>2017-04-19T04:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>ownCloud是一个自由且开源的个人云存储解决方案。ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。<br>除了云存储之外，ownCloud也可用于同步日历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能（类似google documents或Duddle等等）。<br>ownCloud官方提供了Docker版的<a href="https://store.docker.com/images/owncloud?tab=description" target="_blank" rel="external">ownCloud</a>，部署安装能一步到位。<br><a id="more"></a></p>
<h1 id="如何使用Docker"><a href="#如何使用Docker" class="headerlink" title="如何使用Docker"></a>如何使用Docker</h1><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>直接运行：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 80:80 owncloud:8.1</span></div></pre></td></tr></table></figure></p>
<p>然后进入 <a href="http://localhost/" target="_blank" rel="external">http://localhost/</a>，根据向导配置。默认情况下使用SQLite作为数据储存。对于MySQL数据库，可以通过容器连接，例如:–link my-mysql:mysql。</p>
<h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>所有的数据在数据库中管理，数据保存在/var/www/html。可以通过以下命令对容器的数据卷和宿主机的数据卷映射。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="symbol">:/var/www/html</span></span></div></pre></td></tr></table></figure></p>
<p>对于更细粒度的数据持久，设置如下的命令：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="regexp">/apps:/var</span><span class="regexp">/www/html</span><span class="regexp">/apps installed /</span> modified apps</span></div><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="regexp">/config:/var</span><span class="regexp">/www/html</span><span class="regexp">/config local configuration</span></span></div><div class="line">-<span class="ruby"><span class="regexp">v /</span>&lt;mydatalocation&gt;<span class="regexp">/data:/var</span><span class="regexp">/www/html</span><span class="regexp">/data the actual data of your ownCloud</span></span></div></pre></td></tr></table></figure></p>
<h1 id="通过docker-compose"><a href="#通过docker-compose" class="headerlink" title="通过docker-compose"></a>通过docker-compose</h1><p>ownCloud的docker-compose.yml示例如下：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ownCloud with MariaDB/MySQL</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Access via <span class="string">"http://localhost:8080"</span> (or <span class="string">"http://$(docker-machine ip):8080"</span> <span class="meta-keyword">if</span> using docker-machine)</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># During initial ownCloud setup, select <span class="string">"Storage &amp; database"</span> --&gt; <span class="string">"Configure the database"</span> --&gt; <span class="string">"MySQL/MariaDB"</span></span></div><div class="line"><span class="meta"># Database user: root</span></div><div class="line"><span class="meta"># Database password: example</span></div><div class="line"><span class="meta"># Database name: pick any name</span></div><div class="line"><span class="meta"># Database host: replace <span class="string">"localhost"</span> with <span class="string">"mysql"</span></span></div><div class="line"><span class="symbol"></span></div><div class="line">version: <span class="string">'2'</span></div><div class="line"><span class="symbol"></span></div><div class="line">services:</div><div class="line"><span class="symbol"></span></div><div class="line">  owncloud:</div><div class="line"><span class="symbol">    image:</span> owncloud</div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - <span class="string">"/mydata/code/ownCloud/ownData:/var/www/html"</span></div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="number">8021</span>:<span class="number">80</span></div><div class="line"><span class="symbol"></span></div><div class="line">  mysql:</div><div class="line"><span class="symbol">    image:</span> mysql:<span class="number">5.6</span></div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">        - <span class="string">"/mydata/code/ownCloud/mysqldata:/var/lib/mysql"</span></div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="number">3308</span>:<span class="number">3306</span></div><div class="line"><span class="symbol"></span></div><div class="line">    environment:</div><div class="line"><span class="symbol">      MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></div><div class="line"><span class="symbol">      MYSQL_DATABASE:</span> ownCloud</div><div class="line"><span class="symbol">      MYSQL_USER:</span> abc</div><div class="line"><span class="symbol">      MYSQL_PASSWORD:</span> <span class="number">123456</span></div></pre></td></tr></table></figure></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker-compose up</div></pre></td></tr></table></figure>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ownCloud]<span class="comment"># docker-compose ps</span></div><div class="line">      Name             Command             State              Ports</div><div class="line">-------------------------------------------------------------------------</div><div class="line">owncloud_mysql_1   docker-            Up                 <span class="number">3306</span>/tcp</div><div class="line">                   <span class="keyword">entrypoint</span>.<span class="bash">sh</span></div><div class="line">                   mysqld</div><div class="line">owncloud_ownclou   /<span class="keyword">entrypoint</span>.<span class="bash">sh     Up                 0.0.0.0:8021-&gt;80</span></div><div class="line">d_1                apache2-for ...                       /tcp</div></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ownCloud]# docker-compose down</div><div class="line"><span class="function"><span class="title">Stopping</span></span> owncloud_owncloud_1 ... done</div><div class="line"><span class="function"><span class="title">Stopping</span></span> owncloud_mysql_1 ... done</div><div class="line"><span class="function"><span class="title">Removing</span></span> owncloud_owncloud_1 ... done</div><div class="line"><span class="function"><span class="title">Removing</span></span> owncloud_mysql_1 ... done</div><div class="line">Removing network owncloud_default</div></pre></td></tr></table></figure>
<h1 id="ownCloud配置"><a href="#ownCloud配置" class="headerlink" title="ownCloud配置"></a>ownCloud配置</h1><p>进入 <a href="http://localhost:8021/" target="_blank" rel="external">http://localhost:8021/</a> , 出现页面：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own1.png" alt=""><br>添加用户和数据库信息：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own2.png" alt=""></p>
<p>注意：红框内的数据库地址为docker-compose.yml中mysql的名称。<br>点击“安装完成”！<br>网页版登录：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own3.png" alt=""><br>ownCloud支持windows，mac桌面端，ios/android手机端。基本可以替代在线网盘如百度网盘等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ownCloud是一个自由且开源的个人云存储解决方案。ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。&lt;br&gt;除了云存储之外，ownCloud也可用于同步日历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能（类似google documents或Duddle等等）。&lt;br&gt;ownCloud官方提供了Docker版的&lt;a href=&quot;https://store.docker.com/images/owncloud?tab=description&quot;&gt;ownCloud&lt;/a&gt;，部署安装能一步到位。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="ownCloud" scheme="http://www.kekefund.com/tags/ownCloud/"/>
    
      <category term="网盘" scheme="http://www.kekefund.com/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>docker版Django</title>
    <link href="http://www.kekefund.com/2017/03/30/docker-django/"/>
    <id>http://www.kekefund.com/2017/03/30/docker-django/</id>
    <published>2017-03-30T09:14:05.000Z</published>
    <updated>2017-04-19T03:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django的运行是基于python的环境，加上django包。在docker中运行django，实现方式是从docker下载python镜像，然后安装django运行所依赖的包。</p>
<p>在<a href="https://store.docker.com/images/python?tab=description" target="_blank" rel="external">https://store.docker.com/images/python?tab=description</a>  中介绍pull镜像方式有一种叫python:onbuild。<br>这种镜像创建方式根据项目中提供的requirements.txt文件自动pip安装依赖包。大多数情况，通过python:onbuild能创建一个满足工程所需的独立镜像。<br><a id="more"></a></p>
<h1 id="一、编写requirements-txt"><a href="#一、编写requirements-txt" class="headerlink" title="一、编写requirements.txt"></a>一、编写requirements.txt</h1><p>下述的目录结构是一个Django Rest Framework例子，其中项目名称为restful，app名称为api。</p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/dd1.png" alt=""></p>
<p>首先我们需要把项目所依赖的包放到requirements.txt中：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Django</span>==<span class="number">1.8</span></div><div class="line"><span class="attr">django-bootstrap-toolkit</span>==<span class="number">2.15</span>.<span class="number">0</span></div><div class="line"><span class="attr">django-filter</span>==<span class="number">1.0</span>.<span class="number">1</span></div><div class="line"><span class="attr">djangorestframework</span>==<span class="number">3.5</span>.<span class="number">4</span></div><div class="line"><span class="attr">djangorestframework-jwt</span>==<span class="number">1.10</span>.<span class="number">0</span></div><div class="line"><span class="attr">pandas</span>==<span class="number">0.19</span>.<span class="number">2</span></div><div class="line"><span class="attr">SQLAlchemy</span>==<span class="number">1.1</span>.<span class="number">4</span></div><div class="line"><span class="attr">MySQL-python</span>==<span class="number">1.2</span>.<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="二、编写Dockerfile"><a href="#二、编写Dockerfile" class="headerlink" title="二、编写Dockerfile"></a>二、编写Dockerfile</h1><p>本文是基于python2.7制作的，Dockerfile文件如下：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">2</span>-<span class="keyword">onbuild</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"python"</span>, <span class="string">"./manage.py"</span>, <span class="string">"runserver"</span>, <span class="string">"0.0.0.0:8000"</span>]</span></div></pre></td></tr></table></figure></p>
<p>CMD命令执行Django启动程序，0.0.0.0是对所有IP开放，监听端口8000。<br>需要说明的是CMD中的每个参数得单独分开，像这样”runserver 0.0.0.0:8000”是运行不成功的。</p>
<h1 id="三、构建镜像"><a href="#三、构建镜像" class="headerlink" title="三、构建镜像"></a>三、构建镜像</h1><ul>
<li>$ docker build -t my-python-app .<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">[cbb@number_api]$ docker build -t number_api_django:<span class="number">0.3</span> .</div><div class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">655.9</span> kB</div><div class="line">Step <span class="number">1</span>/<span class="number">2</span> : FROM <span class="keyword">python</span>:<span class="number">2</span>-onbuild</div><div class="line"># Executing <span class="number">3</span> build triggers...</div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : COPY requirements.txt /usr/src/app/</div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : RUN pip install --<span class="keyword">no</span>-cache-dir -r requirements.txt</div><div class="line"> ---&gt; Running in <span class="number">4711187</span>b3011</div><div class="line">Collecting Django==<span class="number">1.8</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">2</span>))</div><div class="line">  Downloading Django-<span class="number">1.8</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">6.2</span>MB)</div><div class="line">Collecting django-bootstrap-toolkit==<span class="number">2.15</span>.<span class="number">0</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">3</span>))</div><div class="line">  Downloading django-bootstrap-toolkit-<span class="number">2.15</span>.<span class="number">0</span>.tar.gz</div><div class="line">Collecting django-<span class="built_in">filter</span>==<span class="number">1.0</span>.<span class="number">1</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">4</span>))</div><div class="line">  Downloading django_filter-<span class="number">1.0</span>.<span class="number">1</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">54</span>kB)</div><div class="line">Collecting djangorestframework==<span class="number">3.5</span>.<span class="number">4</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">5</span>))</div><div class="line">  Downloading djangorestframework-<span class="number">3.5</span>.<span class="number">4</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">709</span>kB)</div><div class="line">Collecting djangorestframework-jwt==<span class="number">1.10</span>.<span class="number">0</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">6</span>))</div><div class="line">  Downloading djangorestframework_jwt-<span class="number">1.10</span>.<span class="number">0</span>-py2.<span class="keyword">py3</span>-none-any.whl</div><div class="line">Collecting pandas==<span class="number">0.19</span>.<span class="number">2</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading pandas-<span class="number">0.19</span>.<span class="number">2</span>-cp27-cp27mu-manylinux1_x86_64.whl (<span class="number">17.2</span>MB)</div><div class="line">Collecting SQLAlchemy==<span class="number">1.1</span>.<span class="number">4</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">8</span>))</div><div class="line">  Downloading SQLAlchemy-<span class="number">1.1</span>.<span class="number">4</span>.tar.gz (<span class="number">5.1</span>MB)</div><div class="line">Collecting MySQL-<span class="keyword">python</span>==<span class="number">1.2</span>.<span class="number">5</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">9</span>))</div><div class="line">  Downloading MySQL-<span class="keyword">python</span>-<span class="number">1.2</span>.<span class="number">5</span>.zip (<span class="number">108</span>kB)</div><div class="line">Collecting PyJWT&lt;<span class="number">2.0</span>.<span class="number">0</span>,&gt;=<span class="number">1.4</span>.<span class="number">0</span> (from djangorestframework-jwt==<span class="number">1.10</span>.<span class="number">0</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">6</span>))</div><div class="line">  Downloading PyJWT-<span class="number">1.4</span>.<span class="number">2</span>-py2.<span class="keyword">py3</span>-none-any.whl</div><div class="line">Collecting pytz&gt;=<span class="number">2011</span><span class="keyword">k</span> (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading pytz-<span class="number">2016.10</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">483</span>kB)</div><div class="line">Collecting numpy&gt;=<span class="number">1.7</span>.<span class="number">0</span> (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading numpy-<span class="number">1.12</span>.<span class="number">1</span>-cp27-cp27mu-manylinux1_x86_64.whl (<span class="number">16.5</span>MB)</div><div class="line">Collecting <span class="keyword">python</span>-dateutil (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading python_dateutil-<span class="number">2.6</span>.<span class="number">0</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">194</span>kB)</div><div class="line">Requirement already satisfied: six&gt;=<span class="number">1.5</span> in /usr/local/lib/python2.<span class="number">7</span>/site-packages (from <span class="keyword">python</span>-dateutil-&gt;pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">Installing collected package<span class="variable">s:</span> Django, django-bootstrap-toolkit, django-<span class="built_in">filter</span>, djangorestframework, PyJWT, djangorestframework-jwt, pytz, numpy, <span class="keyword">python</span>-dateutil, pandas, SQLAlchemy, MySQL-<span class="keyword">python</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> django-bootstrap-toolki<span class="variable">t:</span> started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> django-bootstrap-toolki<span class="variable">t:</span> finished with status <span class="string">'done'</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> SQLAlchemy: started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> SQLAlchemy: finished with status <span class="string">'done'</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> MySQL-<span class="keyword">python</span>: started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> MySQL-<span class="keyword">python</span>: finished with status <span class="string">'done'</span></div><div class="line">Successfully installed Django-<span class="number">1.8</span> MySQL-<span class="keyword">python</span>-<span class="number">1.2</span>.<span class="number">5</span> PyJWT-<span class="number">1.4</span>.<span class="number">2</span> SQLAlchemy-<span class="number">1.1</span>.<span class="number">4</span> django-bootstrap-toolkit-<span class="number">2.15</span>.<span class="number">0</span> django-<span class="built_in">filter</span>-<span class="number">1.0</span>.<span class="number">1</span> djangorestframework-<span class="number">3.5</span>.<span class="number">4</span> djangorestframework-jwt-<span class="number">1.10</span>.<span class="number">0</span> numpy-<span class="number">1.12</span>.<span class="number">1</span> pandas-<span class="number">0.19</span>.<span class="number">2</span> <span class="keyword">python</span>-dateutil-<span class="number">2.6</span>.<span class="number">0</span> pytz-<span class="number">2016.10</span></div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : COPY . /usr/src/app</div><div class="line"> ---&gt; <span class="number">712</span>a54b6b923</div><div class="line">Removing intermediate container df33c056f7c0</div><div class="line">Removing intermediate container <span class="number">4711187</span>b3011</div><div class="line">Removing intermediate container <span class="number">6220</span>af43bf96</div><div class="line">Step <span class="number">2</span>/<span class="number">2</span> : CMD <span class="keyword">python</span> ./manage.<span class="keyword">py</span> runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></div><div class="line"> ---&gt; Running in <span class="number">53</span>c0cf32d840</div><div class="line"> ---&gt; <span class="number">17</span>c97bc704d9</div><div class="line">Removing intermediate container <span class="number">53</span>c0cf32d840</div><div class="line">Successfully built <span class="number">17</span>c97bc704d9</div><div class="line"></div><div class="line">[cbb@number_api]$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">number_api_django   <span class="number">0.3</span>                 <span class="number">17</span>c97bc704d9        <span class="number">23</span> seconds ago      <span class="number">868</span> MB</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就成功创建了镜像number_api_django:0.3</p>
<h1 id="四、运行容器"><a href="#四、运行容器" class="headerlink" title="四、运行容器"></a>四、运行容器</h1><ul>
<li>docker run<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[cbb@number_api]$ docker run -it <span class="comment">--rm -p 8080:8000 --name api1 number_api_django:0.3</span></div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">March <span class="number">30</span>, <span class="number">2017</span> - <span class="number">07</span>:<span class="number">34</span>:<span class="number">03</span></div><div class="line">Django <span class="keyword">version</span> <span class="number">1.8</span>, <span class="keyword">using</span> <span class="keyword">settings</span> <span class="string">'restful.settings'</span></div><div class="line"><span class="keyword">Starting</span> development <span class="keyword">server</span> <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>/</div><div class="line">Quit the <span class="keyword">server</span> <span class="keyword">with</span> CONTROL-C.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就启动了django程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django的运行是基于python的环境，加上django包。在docker中运行django，实现方式是从docker下载python镜像，然后安装django运行所依赖的包。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://store.docker.com/images/python?tab=description&quot;&gt;https://store.docker.com/images/python?tab=description&lt;/a&gt;  中介绍pull镜像方式有一种叫python:onbuild。&lt;br&gt;这种镜像创建方式根据项目中提供的requirements.txt文件自动pip安装依赖包。大多数情况，通过python:onbuild能创建一个满足工程所需的独立镜像。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="Dockerfile" scheme="http://www.kekefund.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest Framework 通过token访问</title>
    <link href="http://www.kekefund.com/2017/03/30/django-rest-framework-jwt/"/>
    <id>http://www.kekefund.com/2017/03/30/django-rest-framework-jwt/</id>
    <published>2017-03-30T03:47:57.000Z</published>
    <updated>2017-04-19T03:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在web apps上实现身份验证时，首先考虑到的解决方案就是Cookie。基于Cookie的身份验证使用服务器端Cookie来对每个请求进行身份验证，这意味着您需要在数据库中（如Redis）保留一个会话存储。</p>
<p>基于token令牌的身份验证是一个最近比较流行的解决方案，它依赖于每个请求发送到服务器的签名令牌，对于移动端和网页端都比较适用。</p>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>需先安装django rest framework<br><a id="more"></a></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> djangorestframework-jwt</div></pre></td></tr></table></figure>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><p>setting.py<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    '<span class="attribute">DEFAULT_PERMISSION_CLASSES'</span>: (</div><div class="line">        'rest_framework<span class="variable">.permissions</span><span class="variable">.IsAuthenticated</span>',</div><div class="line">    ),</div><div class="line">    'DEFAULT_AUTHENTICATION_CLASSES': (</div><div class="line">        'rest_framework_jwt<span class="variable">.authentication</span><span class="variable">.JSONWebTokenAuthentication</span>',</div><div class="line">        'rest_framework<span class="variable">.authentication</span><span class="variable">.SessionAuthentication</span>',</div><div class="line">        'rest_framework<span class="variable">.authentication</span><span class="variable">.BasicAuthentication</span>',</div><div class="line">    ),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工程的urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</div><div class="line"><span class="comment">#...</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    <span class="string">''</span>,</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">    url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="三、python-访问"><a href="#三、python-访问" class="headerlink" title="三、python 访问"></a>三、python 访问</h1><h2 id="1-获得令牌"><a href="#1-获得令牌" class="headerlink" title="1, 获得令牌"></a>1, 获得令牌</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">n [<span class="number">41</span>]: <span class="keyword">import</span> requests</div><div class="line"></div><div class="line">In [<span class="number">42</span>]: r = requests.post(<span class="string">"http://localhost:8000/api-token-auth/"</span>, <span class="keyword">data</span>=&#123;<span class="string">'username'</span>:<span class="string">'cbb'</span>,<span class="string">'password'</span>:<span class="string">'cbb'</span>&#125;)</div><div class="line"></div><div class="line">In [<span class="number">43</span>]: print r.<span class="keyword">text</span></div><div class="line">&#123;<span class="string">"token"</span>:<span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM"</span>&#125;</div></pre></td></tr></table></figure>
<p>注意，post请求需要网址最后带“/”，django默认自动补全是关闭的。</p>
<blockquote>
<p>网址不带/的出错提示： You called this URL via POST, but the URL doesn’t end in a slash and you have APPEND_SLASH set. Django can’t redirect to the slash URL while maintaining POST data. Change your form to point to 127.0.0.1:8000/api/users/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">44</span>]: <span class="keyword">import</span> json</div><div class="line"></div><div class="line">In [<span class="number">45</span>]: jsonData = json.loads(r.text)</div><div class="line"></div><div class="line">In [<span class="number">46</span>]: jsonData[<span class="string">u'token'</span>]</div><div class="line">Out[<span class="number">46</span>]: <span class="string">u'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM'</span></div></pre></td></tr></table></figure>
<h2 id="2，通过令牌访问"><a href="#2，通过令牌访问" class="headerlink" title="2，通过令牌访问"></a>2，通过令牌访问</h2><ul>
<li><p>构造headers</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">48</span>]: headers = &#123;<span class="string">'Authorization'</span>: <span class="string">'JWT &#123;&#125;'</span>.format(jsonData[<span class="string">u'token'</span>])&#125;</div><div class="line"></div><div class="line">In [<span class="number">49</span>]: headers</div><div class="line">Out[<span class="number">49</span>]: &#123;<span class="string">'Authorization'</span>: <span class="string">'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>get请求</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">50</span>]: r = requests.get(<span class="string">"http://127.0.0.1:8000/api/users?format=json"</span>, headers=headers)</div><div class="line"></div><div class="line">In [<span class="number">51</span>]: print r.text</div><div class="line">[&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"xx"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-01"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"keke"</span>,<span class="string">"birthday"</span>:<span class="string">"2016-03-01"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小1"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小1"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"xx"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-22"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-22"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckkk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-09"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;]</div></pre></td></tr></table></figure>
</li>
<li><p>post请求</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [54]: data = &#123;"name":"xx","birthday":"2017-03-01","gender":2&#125;</div><div class="line"></div><div class="line">In [55]: r = requests.post("http://127.0.0.1:8000/api/users/",data=data, headers=headers)</div><div class="line"></div><div class="line">In [56]: print r.text</div><div class="line">"&#123;<span class="symbol">\"</span>birthdayNumberCount<span class="symbol">\"</span>: &#123;<span class="symbol">\"</span>1<span class="symbol">\"</span>: 4, <span class="symbol">\"</span>2<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>3<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>4<span class="symbol">\"</span>: 2, <span class="symbol">\"</span>5<span class="symbol">\"</span>: 3, <span class="symbol">\"</span>6<span class="symbol">\"</span>: 0, <span class="symbol">\"</span>7<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>8<span class="symbol">\"</span>: 0, <span class="symbol">\"</span>9<span class="symbol">\"</span>: 0&#125;, <span class="symbol">\"</span>suitableJob<span class="symbol">\"</span>: <span class="symbol">\"</span>公众人物、开发商、投机者、设计师、新闻工作(媒体)、表演者、变革推动者、广告创意人才、探险家、心灵导师、作家、自由职业<span class="symbol">\"</span>, <span class="symbol">\"</span>destinyNumber<span class="symbol">\"</span>: 5, <span class="symbol">\"</span>destinyMean<span class="symbol">\"</span>: <span class="symbol">\"</span>很注重感观享受，喜欢冒险、自由，个性开朗，人缘好；有口才，社交能力强，拥有演说和促销的天才。不容易离婚，爱美。<span class="symbol">\"</span>, <span class="symbol">\"</span>destinyDetailMean<span class="symbol">\"</span>: <span class="symbol">\"</span>因4的能力充斥内在，更需要职业的稳定来协助创造力与变动，不然就会形成外强中干，而无法让自己身心自由。<span class="symbol">\"</span>, <span class="symbol">\"</span>birthdayNumbers<span class="symbol">\"</span>: [2, 0, 1, 7, 0, 3, 0, 1, 1, 4, 5], <span class="symbol">\"</span>toLearn<span class="symbol">\"</span>: <span class="symbol">\"</span>节制自由，学习承诺与勇气。<span class="symbol">\"</span>, <span class="symbol">\"</span>userInfo<span class="symbol">\"</span>: &#123;<span class="symbol">\"</span>username<span class="symbol">\"</span>: <span class="symbol">\"</span>xx<span class="symbol">\"</span>, <span class="symbol">\"</span>gender<span class="symbol">\"</span>: 2, <span class="symbol">\"</span>birthday<span class="symbol">\"</span>: <span class="symbol">\"</span>2017-03-01<span class="symbol">\"</span>&#125;, <span class="symbol">\"</span>talentNumbers<span class="symbol">\"</span>: [14]&#125;"</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、进阶"><a href="#四、进阶" class="headerlink" title="四、进阶"></a>四、进阶</h1><p>自定义令牌有效期，如设置有效期为5小时，在setting.py中添加<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta<span class="comment">(hours=5)</span>,  <span class="attr">#seconds=300</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官方文档中所有能自定义的参数如下：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_encode_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_decode_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_response_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_SECRET_KEY'</span>: settings.SECRET_KEY,</div><div class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_PUBLIC_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_PRIVATE_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</div><div class="line">    <span class="string">'JWT_VERIFY'</span>: <span class="literal">True</span>,</div><div class="line">    <span class="string">'JWT_VERIFY_EXPIRATION'</span>: <span class="literal">True</span>,</div><div class="line">    <span class="string">'JWT_LEEWAY'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</div><div class="line">    <span class="string">'JWT_AUDIENCE'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_ISSUER'</span>: <span class="literal">None</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">False</span>,</div><div class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</div><div class="line"></div><div class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</div><div class="line">    <span class="string">'JWT_AUTH_COOKIE'</span>: <span class="literal">None</span>,</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://github.com/GetBlimp/django-rest-framework-jwt" target="_blank" rel="external">https://github.com/GetBlimp/django-rest-framework-jwt</a><br><a href="http://getblimp.github.io/django-rest-framework-jwt/#requirements" target="_blank" rel="external">http://getblimp.github.io/django-rest-framework-jwt/#requirements</a><br><a href="http://stackoverflow.com/questions/21317899/how-do-i-create-a-login-api-using-django-rest-framework" target="_blank" rel="external">http://stackoverflow.com/questions/21317899/how-do-i-create-a-login-api-using-django-rest-framework</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在web apps上实现身份验证时，首先考虑到的解决方案就是Cookie。基于Cookie的身份验证使用服务器端Cookie来对每个请求进行身份验证，这意味着您需要在数据库中（如Redis）保留一个会话存储。&lt;/p&gt;
&lt;p&gt;基于token令牌的身份验证是一个最近比较流行的解决方案，它依赖于每个请求发送到服务器的签名令牌，对于移动端和网页端都比较适用。&lt;/p&gt;
&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;p&gt;需先安装django rest framework&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="DjangoRestFramework" scheme="http://www.kekefund.com/tags/DjangoRestFramework/"/>
    
      <category term="API" scheme="http://www.kekefund.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest Framwork实现RESTful API</title>
    <link href="http://www.kekefund.com/2017/03/30/django-restful-framework/"/>
    <id>http://www.kekefund.com/2017/03/30/django-restful-framework/</id>
    <published>2017-03-30T02:46:25.000Z</published>
    <updated>2017-04-19T03:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> djangorestframework</div><div class="line">pip <span class="keyword">install</span> markdown <span class="comment"># Markdown为可视化 API 提供了支持</span></div><div class="line">pip <span class="keyword">install</span> django-filter</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf1.png" alt=""></p>
<p>工程名：restful<br>app名：api<br>IDE：PyCharm</p>
<h1 id="配置rest-framework"><a href="#配置rest-framework" class="headerlink" title="配置rest_framework"></a>配置rest_framework</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"setting.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"># Application <span class="keyword">definition</span></div><div class="line"></div><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line"></div><div class="line">    # 新增</div><div class="line">    <span class="string">'api'</span>, </div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line"></div><div class="line">)</div><div class="line"></div><div class="line"># 新增</div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (<span class="string">'rest_framework.permissions.IsAdminUser'</span>,),</div><div class="line">    <span class="string">'PAGINATE_BY'</span>: <span class="number">10</span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h1><p>数据库采用mysql</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"setting.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'restful'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'admin'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">"models.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line"></div><div class="line">    GENDER_CHOICES = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"Male"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"Female"</span>)</div><div class="line">    )</div><div class="line">    name = models.CharField(max_length=<span class="number">60</span>, blank=<span class="keyword">False</span>, verbose_name=<span class="string">'姓名'</span>)</div><div class="line">    birthday = models.DateField(blank=<span class="keyword">False</span>)</div><div class="line">    gender = models.IntegerField(choices=GENDER_CHOICES)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name + <span class="string">" ( "</span> + str(self.birthday) + <span class="string">")"</span></div></pre></td></tr></table></figure>
<h1 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> makemigrations</div><div class="line">python manage<span class="selector-class">.py</span> migrate</div></pre></td></tr></table></figure>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>在api下新建serializers.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"serializers.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User, NumberologyInfo, OtherInfo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line"></div><div class="line">        fields = (<span class="string">'name'</span>, <span class="string">'birthday'</span>, <span class="string">'gender'</span>)</div></pre></td></tr></table></figure>
<h1 id="添加视图"><a href="#添加视图" class="headerlink" title="添加视图"></a>添加视图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="string">"views.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</div><div class="line"></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User, NumberologyInfo</div><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> UserSerializer, NumberologyInfoSerializer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    允许查看和编辑user 的 API endpoint</div><div class="line">    """</div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div></pre></td></tr></table></figure>
<h2 id="创建视图的三种方式"><a href="#创建视图的三种方式" class="headerlink" title="创建视图的三种方式"></a>创建视图的三种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="string">"views.py"</span></div><div class="line"></div><div class="line"><span class="comment"># 第一种方式：APIView</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskList</span><span class="params">(APIView)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        users = User.objects.all()</div><div class="line">        serializer = UserSerializer(users, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        serializer = UserSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line"><span class="comment"># 第二种方式：通用视图 ListCreateAPIView</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskListCreate</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 第三种方式：装饰器 api_view</span></div><div class="line"><span class="meta">@api_view(['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_list</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    List all tasks, or create a new task.</div><div class="line">    '''</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        tasks = User.objects.all()</div><div class="line">        serializer = UserSerializer(tasks, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        serializer = UserSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure>
<h1 id="设置url"><a href="#设置url" class="headerlink" title="设置url"></a>设置url</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="string">"urls.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, url, include</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</div><div class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</div><div class="line"></div><div class="line">router = routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Wire up our API using automatic URL routing.</span></div><div class="line"><span class="comment"># Additionally, we include login URLs for the browseable API.</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line"></div><div class="line">    <span class="comment">#验证登录使用</span></div><div class="line">    url(<span class="string">r'auth'</span>,include(<span class="string">'rest_framework.urls'</span>)),</div><div class="line"></div><div class="line">    ]</div></pre></td></tr></table></figure>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf2.png" alt=""></p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf3.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>1，<a href="http://www.jianshu.com/p/653a0a5684eb" target="_blank" rel="external">django-rest-framework 系列教程（一）- Start Your API</a></p>
<p>2，<a href="http://www.cnblogs.com/Edifier-7/p/4994338.html" target="_blank" rel="external">Django RESTful API 设计指南</a></p>
<p>3，<a href="https://blog.laisky.com/p/django-rest/" target="_blank" rel="external">利用 Django REST framework 编写 RESTful API</a></p>
<p>4，<a href="http://jingpin.jikexueyuan.com/article/56178.html" target="_blank" rel="external">用Django Rest Framework和AngularJS开始你的项目</a></p>
<p>5，<a href="http://www.jianshu.com/p/943eae36f708" target="_blank" rel="external">Django Rest Framework 入门指南</a></p>
<p>6，<a href="http://me.iblogc.com/2016/12/17/django-rest-framework里的api请求频率控制/" target="_blank" rel="external">django-rest-framework里的api请求频率控制</a></p>
<p>7，<a href="https://github.com/thehackercat/django-rest-framework-tutorial/blob/master/4%20-%20%E9%AA%8C%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83.md" target="_blank" rel="external"> 验证和授权</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; djangorestframework&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; markdown &lt;span class=&quot;comment&quot;&gt;# Markdown为可视化 API 提供了支持&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; django-filter&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="DjangoRestFramework" scheme="http://www.kekefund.com/tags/DjangoRestFramework/"/>
    
      <category term="API" scheme="http://www.kekefund.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装VNC服务器</title>
    <link href="http://www.kekefund.com/2017/03/24/centos7-install-gnome/"/>
    <id>http://www.kekefund.com/2017/03/24/centos7-install-gnome/</id>
    <published>2017-03-24T02:51:59.000Z</published>
    <updated>2017-04-19T03:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>centos7系统下的VNC服务器的中文安装教程多如牛毛，有些安装流程复杂但到最后却不成功，本人试验了不下10个教程，装的快要吐血😓。谷歌到这篇英文教程<a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">How to install VNC server on Centos 7</a>，发现是良心之作，操作简单可行。于是翻译之以饷读者。</p>
</blockquote>
<p>VNC服务器用于从远程客户端连接到服务器的桌面环境。远程计算机上使用VNC客户端连接服务器。<br>在本文我们可以了解如何在centos 7上安装VNC服务器，将采用centos yum库中提供的默认包来安装。<br><a id="more"></a></p>
<h1 id="安装-VNC服务器"><a href="#安装-VNC服务器" class="headerlink" title="安装 VNC服务器"></a>安装 VNC服务器</h1><p>如果你不曾安装过桌面环境（X windows），就按照以下命令来安装软件，重启后，你就会具有centos7的桌面。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum check-update</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum groupinstall <span class="string">"X Window System"</span></span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># unlink /etc/systemd/system/default.target</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># reboot</span></div></pre></td></tr></table></figure>
<p>现在开始安装VCN包<br><strong>步骤1：</strong>执行下面的命令安装VNC包<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum install tigervnc-server -y</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤2：</strong>将/lib/systemd/system/vncserver@.service拷贝至/etc/systemd/system/，并重命名为vncserver@:1.service。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@krizna ~]# cp /lib/systemd/<span class="keyword">system</span>/vncserver@.service /etc/systemd/<span class="keyword">system</span>/vncserver@:<span class="number">1.</span>service</div></pre></td></tr></table></figure></p>
<p><strong>步骤3：</strong>打开/etc/systemd/system/下的vncserver@:1.service，将<user>替换为你的用户名。<br>找到这两行：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ExecStart=<span class="meta-keyword">/sbin/</span>runuser -l <span class="params">&lt;USER&gt;</span> -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line">PIDFile=<span class="meta-keyword">/home/</span><span class="params">&lt;USER&gt;</span>/.vnc/%H%i.pid</div></pre></td></tr></table></figure></user></p>
<p>替换为（假定用户名为john）：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ExecStart</span>=/sbin/runuser -l john -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line"><span class="attr">PIDFile</span>=/home/john/.vnc/%H%i.pid</div></pre></td></tr></table></figure></p>
<p>如果你是root用户，就这样替换：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ExecStart</span>=/sbin/runuser -l root -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line"><span class="attr">PIDFile</span>=/root/.vnc/%H%i.pid</div></pre></td></tr></table></figure></p>
<p><strong>步骤4：</strong>重新加载systemd进行更改<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl daemon-reload</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤5：</strong>创建VNC密码<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># vncpasswd</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤6：</strong>启动服务，并设置开机自动运行<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl enable vncserver@:1.service</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl start vncserver@:1.service</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤7：</strong>防火墙允许VNC访问</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># firewall-cmd --permanent --add-service vnc-server</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl restart firewalld.service</span></div></pre></td></tr></table></figure>
<p>到这里，你就可以用VNC客户端连接服务器桌面了（192.168.11.165:1）。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-24/gnome.png" alt=""></p>
<blockquote>
<p>PS: VNC客户端各个系统版本都有，自行百度~。我这里用的是mac版的VNC Viewer。</p>
</blockquote>
<p>对于其他用户，创建不同的端口文件vncserver@:2.service，参考步骤2，然后重复步骤3，4，5，6即可。</p>
<h1 id="附加命令"><a href="#附加命令" class="headerlink" title="附加命令"></a>附加命令</h1><ul>
<li><p>停止VNC服务</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl stop vncserver@:1.service</span></div></pre></td></tr></table></figure>
</li>
<li><p>取消开机自动运行</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@krizna ~]# systemctl <span class="keyword">disable</span> vncserver@:<span class="number">1.</span>service</div></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙（用于故障排除）</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl stop firewalld.service</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>好运~</p>
<p>翻译自: <a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">How to install VNC server on Centos 7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;centos7系统下的VNC服务器的中文安装教程多如牛毛，有些安装流程复杂但到最后却不成功，本人试验了不下10个教程，装的快要吐血😓。谷歌到这篇英文教程&lt;a href=&quot;http://www.krizna.com/centos/install-vnc-server-centos-7/&quot;&gt;How to install VNC server on Centos 7&lt;/a&gt;，发现是良心之作，操作简单可行。于是翻译之以饷读者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VNC服务器用于从远程客户端连接到服务器的桌面环境。远程计算机上使用VNC客户端连接服务器。&lt;br&gt;在本文我们可以了解如何在centos 7上安装VNC服务器，将采用centos yum库中提供的默认包来安装。&lt;br&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="centos7" scheme="http://www.kekefund.com/tags/centos7/"/>
    
      <category term="VNC" scheme="http://www.kekefund.com/tags/VNC/"/>
    
      <category term="gnome" scheme="http://www.kekefund.com/tags/gnome/"/>
    
  </entry>
  
  <entry>
    <title>github创建分支</title>
    <link href="http://www.kekefund.com/2017/03/23/git-branch-create/"/>
    <id>http://www.kekefund.com/2017/03/23/git-branch-create/</id>
    <published>2017-03-23T08:02:32.000Z</published>
    <updated>2017-04-19T03:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>理论部分参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="external">创建与合并分支</a></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>软件一个阶段开发完成，需要建立一个分支来保存当前的稳定版本。</p>
<ul>
<li><p>采用SourceTree 创建分支：</p>
<a id="more"></a>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git1.png" alt=""></p>
</li>
<li><p>创建完成后再SourceTree左侧树型菜单会出现分支名称：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git2.png" alt=""></p>
</li>
<li><p>点击推送，将分支同步到服务器<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git3.png" alt=""></p>
</li>
</ul>
<ul>
<li>github上就能看到分支了：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git4.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;理论部分参考：&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000&quot;&gt;创建与合并分支&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;实践&quot;&gt;&lt;a href=&quot;#实践&quot; class=&quot;headerlink&quot; title=&quot;实践&quot;&gt;&lt;/a&gt;实践&lt;/h1&gt;&lt;p&gt;软件一个阶段开发完成，需要建立一个分支来保存当前的稳定版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;采用SourceTree 创建分支：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.kekefund.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://www.kekefund.com/tags/git/"/>
    
      <category term="branch" scheme="http://www.kekefund.com/tags/branch/"/>
    
      <category term="SourceTree" scheme="http://www.kekefund.com/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title>docker版FTP服务器</title>
    <link href="http://www.kekefund.com/2017/03/20/docker-ftp/"/>
    <id>http://www.kekefund.com/2017/03/20/docker-ftp/</id>
    <published>2017-03-20T13:52:43.000Z</published>
    <updated>2017-04-19T03:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker版ftp服务器，适用于部署离线局域网服务器</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>来源：<a href="https://hub.docker.com/r/bogem/ftp/" target="_blank" rel="external">https://hub.docker.com/r/bogem/ftp/</a><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos mydata]<span class="comment"># docker pull bogem/ftp</span></div><div class="line"></div><div class="line">[root@VM_25_5_centos mydata]<span class="comment"># docker images</span></div><div class="line">REPOSITORY            <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</div><div class="line">docker.io/bogem/ftp   latest              a40e9c43c530        <span class="number">4</span> weeks ago         <span class="number">174.7</span> MB</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run -d -v /mydata:/home/vsftpd -p 20:20 -p 21:21 </div><div class="line">-<span class="ruby">p <span class="number">47400</span>-<span class="number">47470</span><span class="symbol">:</span><span class="number">47400</span>-<span class="number">47470</span> \</span></div><div class="line">-<span class="ruby">e FTP_USER=test </span></div><div class="line">-<span class="ruby">e FTP_PASS=test </span></div><div class="line">-<span class="ruby">e PASV_ADDRESS=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> </span></div><div class="line">-<span class="ruby">-name ftp1 \</span></div><div class="line">-<span class="ruby">-restart=always bogem/ftp</span></div></pre></td></tr></table></figure>
<p>注：PASV_ADDRESS如果设置成127.0.0.1，则只能本地访问；设置成0.0.0.0 则可以外网访问。<br>详细参数参考:<a href="https://hub.docker.com/r/fauria/vsftpd/" target="_blank" rel="external">https://hub.docker.com/r/fauria/vsftpd/</a> 中的环境变量部分。</p>
<h1 id="FileZilla客户端连接"><a href="#FileZilla客户端连接" class="headerlink" title="FileZilla客户端连接"></a>FileZilla客户端连接</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-20/dockerftp.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker版ftp服务器，适用于部署离线局域网服务器&lt;/p&gt;
&lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;来源：&lt;a href=&quot;https://hub.docker.com/r/bogem/ftp/&quot;&gt;https://hub.docker.com/r/bogem/ftp/&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@VM_25_5_centos mydata]&lt;span class=&quot;comment&quot;&gt;# docker pull bogem/ftp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@VM_25_5_centos mydata]&lt;span class=&quot;comment&quot;&gt;# docker images&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;REPOSITORY            &lt;span class=&quot;keyword&quot;&gt;TAG&lt;/span&gt;                 &lt;span class=&quot;title&quot;&gt;IMAGE&lt;/span&gt; ID            CREATED             SIZE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io/bogem/ftp   latest              a40e9c43c530        &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; weeks ago         &lt;span class=&quot;number&quot;&gt;174.7&lt;/span&gt; MB&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="ftp" scheme="http://www.kekefund.com/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>docker部署mysql</title>
    <link href="http://www.kekefund.com/2017/03/19/docker-mysql/"/>
    <id>http://www.kekefund.com/2017/03/19/docker-mysql/</id>
    <published>2017-03-19T15:54:44.000Z</published>
    <updated>2017-04-19T03:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql在linux服务器上运行一直比较稳定，但是服务器迁移时mysql在新服务器上的配置是个比较头疼的问题，搞不好数据迁移过来了但是mysql启动不起来，坑比较多。特别是当新的服务器是离线时，安装mysql和数据同步软件更是困难重重。<br>用docker来运行mysql服务是一个比较好的解决方案，mysql的运行环境在容器内已经封装好了，而数据可以直接挂载在宿主主机上。</p>
<h1 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h1><a id="more"></a>
<p>官网地址：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">https://hub.docker.com/_/mysql/</a></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker pull mysql</span></div></pre></td></tr></table></figure>
<p>查看镜像<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</div><div class="line">docker.io/mysql     latest              <span class="number">22</span>be5748ecbe        <span class="number">13</span> days ago         <span class="number">405.6</span> MB</div></pre></td></tr></table></figure></p>
<h1 id="二、启动容器"><a href="#二、启动容器" class="headerlink" title="二、启动容器"></a>二、启动容器</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> --name cbb-mysql1 -p 3307:3306 -v /home/mysql_data:/var/lib/mysql --restart=always <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 <span class="_">-d</span> &lt;IMAGE-ID&gt;</span></div><div class="line">b344e219ff03a92d65f75f74ab5b227838cce8619cbe695ccd1b6889f9a3d174</div></pre></td></tr></table></figure>
<ul>
<li>-p：容器的3306映射到主机的3307端口</li>
<li>-v：容器的/var/lib/mysql目录挂载在主机的/home/mysql_data目录</li>
<li>-e 设置默认参数，支持参数：    <ul>
<li>MYSQL_ROOT_PASSWORD</li>
<li>MYSQL_DATABASE</li>
<li>MYSQL_USER, MYSQL_PASSWORD</li>
<li>MYSQL_ALLOW_EMPTY_PASSWORD</li>
<li>MYSQL_RANDOM_ROOT_PASSWORD</li>
<li>MYSQL_ONETIME_PASSWORD</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">https://hub.docker.com/_/mysql/</a> 的环境参数部分（Environment Variables)</p>
</blockquote>
<p>返回一长串字符，则说明创建成功。<br>注：<image-id>也可以是REPOSITORY+TAG，如docker.io/mysql: latest</image-id></p>
<h1 id="三、进入容器"><a href="#三、进入容器" class="headerlink" title="三、进入容器"></a>三、进入容器</h1><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos mysql-docker]<span class="comment"># docker exec -it cbb-mysql1 mysql -uroot -p</span></div><div class="line">Enter password:</div><div class="line">Welcome to the MySQ<span class="class">L monitor.  Commands end with ;</span><span class="built_in"> or </span>\g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.7.17 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle<span class="built_in"> and/or </span>its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation<span class="built_in"> and/or </span>its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type 'help;'<span class="built_in"> or </span>'\h' for help. Type '\c' to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<h1 id="四、实践"><a href="#四、实践" class="headerlink" title="四、实践"></a>四、实践</h1><p>离线数据库mysql目录下所有文件拷贝到离线服务器上<br>放到指定目录：/home/mysql_data<br>执行命令，建立mysql容器<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[localhost mysql]# docker run --<span class="keyword">name</span> cbb-mysql1 -v /home/mysql_data:/<span class="keyword">var</span>/lib/mysql -p <span class="number">3307</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -d mysql:<span class="number">5.6</span></div><div class="line"><span class="number">629</span>a150d4a9cb87080df3d89a6b91e3d56ddd8699e2f6a2d3a908f39d6f87e4c</div></pre></td></tr></table></figure></p>
<h2 id="1-进入容器，新建账户"><a href="#1-进入容器，新建账户" class="headerlink" title="1, 进入容器，新建账户"></a>1, 进入容器，新建账户</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; <span class="keyword">create</span> USER <span class="string">'ts01'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><p>username：你将创建的用户名</p>
</li>
<li><p>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</p>
</li>
<li><p>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</p>
</li>
</ul>
<h2 id="2-授权"><a href="#2-授权" class="headerlink" title="2, 授权:"></a>2, 授权:</h2><p>命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span></div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li><p>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</p>
</li>
<li><p>databasename：数据库名</p>
</li>
<li><p>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</p>
</li>
</ul>
<p><strong>例子:</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</div><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</div></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</div></pre></td></tr></table></figure>
<h2 id="3，容器间连接"><a href="#3，容器间连接" class="headerlink" title="3，容器间连接"></a>3，容器间连接</h2><p>其它容器想访问mysql容器，可以使用link来连接。例如运行：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">run</span> -d -p <span class="number">80</span>:<span class="number">8096</span> -v /<span class="built_in">home</span>/gtdata:/gtdata --restart=always --name web01 --link=cbb-mysql1:mydb java_web:<span class="number">1.0</span> /root/<span class="built_in">run</span>.sh</div></pre></td></tr></table></figure></p>
<p>注：</p>
<ul>
<li>-p 端口映射</li>
<li>-v 宿主机目录挂载</li>
<li>–name 容器名</li>
<li>–link 连接的容器，另一个容器cbb-mysql在本容器中的名称为mydb，可以直接在本容器中使用mydb</li>
</ul>
<p>java_web:1.0容器里运行的是tomcat。<br>进入jdbc.properties<br>修改<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mydb是mysql容器在web01容器中的别名，mydb等价于192.168.11.121:3306</span></div><div class="line">jdbc.url=<span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/mydb:3306/guotai</span>?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span></div></pre></td></tr></table></figure></p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><blockquote>
<p>1, [宿主服务器上安装VNC] (<a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">http://www.krizna.com/centos/install-vnc-server-centos-7/</a>)<br>2, <a href="https://dev.mysql.com/downloads/file/?id=468286" target="_blank" rel="external">centos版workbench</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql在linux服务器上运行一直比较稳定，但是服务器迁移时mysql在新服务器上的配置是个比较头疼的问题，搞不好数据迁移过来了但是mysql启动不起来，坑比较多。特别是当新的服务器是离线时，安装mysql和数据同步软件更是困难重重。&lt;br&gt;用docker来运行mysql服务是一个比较好的解决方案，mysql的运行环境在容器内已经封装好了，而数据可以直接挂载在宿主主机上。&lt;/p&gt;
&lt;h1 id=&quot;一、下载镜像&quot;&gt;&lt;a href=&quot;#一、下载镜像&quot; class=&quot;headerlink&quot; title=&quot;一、下载镜像&quot;&gt;&lt;/a&gt;一、下载镜像&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="mysql" scheme="http://www.kekefund.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mac下安装docker</title>
    <link href="http://www.kekefund.com/2017/03/17/docker-on-mac/"/>
    <id>http://www.kekefund.com/2017/03/17/docker-on-mac/</id>
    <published>2017-03-17T07:01:10.000Z</published>
    <updated>2017-04-19T03:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>系统要求：OS X EI Captian 10.11以上</p>
<p>docker默认是在linux下运行，要在mac下运行，需要安装linux的虚拟环境。好在docker官网提供了mac版的docker安装包。<br>在<a href="https://www.docker.com/docker-mac" target="_blank" rel="external">https://www.docker.com/docker-mac</a> 下载Docker.img。<br>安装完成后，顶栏会出现<br><a id="more"></a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm1.png" alt=""></p>
<p>双击安装后，到终端查看：<br>docker version<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">[cbb@~]$</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">17.03</span><span class="number">.0</span><span class="bullet">-ce</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.26</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.7.5</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">60</span><span class="string">ccb22</span></div><div class="line"><span class="attr"> Built:</span>        <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">23</span> <span class="number">10</span><span class="string">:40:59</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">darwin/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">17.03</span><span class="number">.0</span><span class="bullet">-ce</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.26</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.7.5</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">3</span><span class="string">a232c8</span></div><div class="line"><span class="attr"> Built:</span>        <span class="string">Tue</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">07</span><span class="string">:52:04</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></div><div class="line"><span class="attr"> Experimental:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>出现版本号即安装成功！</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>可以设置开机启动<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm2.png" alt=""></p>
<p>设置与宿主机的文件共享<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm3.png" alt=""></p>
<p>设置CPU和内存大小，与VirtualBox一样。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;系统要求：OS X EI Captian 10.11以上&lt;/p&gt;
&lt;p&gt;docker默认是在linux下运行，要在mac下运行，需要安装linux的虚拟环境。好在docker官网提供了mac版的docker安装包。&lt;br&gt;在&lt;a href=&quot;https://www.docker.com/docker-mac&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt; 下载Docker.img。&lt;br&gt;安装完成后，顶栏会出现&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="mac" scheme="http://www.kekefund.com/tags/mac/"/>
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker 自动构建，基于Dockerfile文件</title>
    <link href="http://www.kekefund.com/2017/03/06/docker-dockerfile-generated/"/>
    <id>http://www.kekefund.com/2017/03/06/docker-dockerfile-generated/</id>
    <published>2017-03-06T04:48:22.000Z</published>
    <updated>2017-04-19T03:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，Dockerfile的编写"><a href="#1，Dockerfile的编写" class="headerlink" title="1，Dockerfile的编写"></a>1，Dockerfile的编写</h1><p>在centos中创建一个目录:/mydata/data/dockertest/，新建Dockerfile文件<br>vim Dockerfile<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Verison 0.6:</span></div><div class="line"></div><div class="line"><span class="comment"># 基础镜像</span></div><div class="line"><span class="keyword">FROM</span> chenbb/fofeasy:<span class="number">0.6</span></div><div class="line"></div><div class="line"><span class="comment"># 维护者信息</span></div><div class="line"><span class="keyword">MAINTAINER</span> cbbing@<span class="number">163</span>.com</div><div class="line"></div><div class="line"><span class="comment"># 镜像操作命令</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /opt/tomcat/webapps/fofeasy</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /opt/tomcat/webapps/fofeasy.war</span></div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash"> fofeasy.war /opt/tomcat/webapps/fofeasy.war</span></div><div class="line"></div><div class="line"><span class="comment"># 容器启动命令</span></div><div class="line"><span class="comment">#CMD ["/opt/tomcat/bin/catalina.sh", "run"]</span></div></pre></td></tr></table></figure></p>
<p>编写完成后:wq保存。<br><a id="more"></a></p>
<h1 id="2，构建"><a href="#2，构建" class="headerlink" title="2，构建"></a>2，构建</h1><p>基于Dockerfile构建镜像，在Dockerfile文件所在目录下执行<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos dockertest]# docker build -t chenbb/fofeasy:0.7 .</div><div class="line">Sending build context to Docker daemon 65.78 MB</div><div class="line">Step 1 : FROM chenbb/fofeasy:0.6</div><div class="line"> -<span class="ruby">--&gt; c441af7f5405</span></div><div class="line">Step 2 : MAINTAINER cbbing@163.com</div><div class="line"> -<span class="ruby">--&gt; Running <span class="keyword">in</span> f7cbd5cd3199</span></div><div class="line"> -<span class="ruby">--&gt; cef4cee90997</span></div><div class="line">Removing intermediate container f7cbd5cd3199</div><div class="line">Step 3 : RUN rm -rf /opt/tomcat/webapps/fofeasy</div><div class="line"> -<span class="ruby">--&gt; Running <span class="keyword">in</span> <span class="number">79505</span>ed64d7f</span></div><div class="line"> -<span class="ruby">--&gt; <span class="number">4</span>f85be099a2<span class="number">0</span></span></div><div class="line">Removing intermediate container 79505ed64d7f</div><div class="line">Step 4 : RUN rm -rf /opt/tomcat/webapps/fofeasy.war</div><div class="line"> -<span class="ruby">--&gt; Running <span class="keyword">in</span> be162f93530b</span></div><div class="line"> -<span class="ruby">--&gt; c5cc2ba60023</span></div><div class="line">Removing intermediate container be162f93530b</div><div class="line">Step 5 : ADD fofeasy.war /opt/tomcat/webapps/fofeasy.war</div><div class="line"> -<span class="ruby">--&gt; <span class="number">8</span>ede3a4f83e5</span></div><div class="line">Removing intermediate container b9b557e26828</div><div class="line">Successfully built 8ede3a4f83e5</div><div class="line">[root@VM_200_249_centos dockertest]#</div></pre></td></tr></table></figure></p>
<p>注：</p>
<blockquote>
<p>chenbb/fofeasy:0.7为新镜像的名字<br>fofeasy.war文件放到同一目录</p>
</blockquote>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos dockertest]<span class="comment"># ll -lh</span></div><div class="line">总用量 63M</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 322 </span>3月  <span class="number"> 3 </span>17:00 Dockerfile</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root root 63M 3月  <span class="number"> 3 </span>16:46 fofeasy.war</div></pre></td></tr></table></figure>
<h1 id="3，启动"><a href="#3，启动" class="headerlink" title="3，启动"></a>3，启动</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 58080:8080 --name javaweb chenbb/javaweb:0.7 /root/run.sh</span></div></pre></td></tr></table></figure>
<h1 id="3，一些问题"><a href="#3，一些问题" class="headerlink" title="3，一些问题"></a>3，一些问题</h1><ul>
<li>容器启动不起来<br>考虑是容器里的命令执行报错引起的，重新从镜像创建容器，排除问题，或者通过<br>“docker logs &lt;容器ID&gt;” 查看错误日志</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://www.jianshu.com/p/690844302df5" target="_blank" rel="external">http://www.jianshu.com/p/690844302df5</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，Dockerfile的编写&quot;&gt;&lt;a href=&quot;#1，Dockerfile的编写&quot; class=&quot;headerlink&quot; title=&quot;1，Dockerfile的编写&quot;&gt;&lt;/a&gt;1，Dockerfile的编写&lt;/h1&gt;&lt;p&gt;在centos中创建一个目录:/mydata/data/dockertest/，新建Dockerfile文件&lt;br&gt;vim Dockerfile&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Verison 0.6:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 基础镜像&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; chenbb/fofeasy:&lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 维护者信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;MAINTAINER&lt;/span&gt; cbbing@&lt;span class=&quot;number&quot;&gt;163&lt;/span&gt;.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 镜像操作命令&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rm -rf /opt/tomcat/webapps/fofeasy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rm -rf /opt/tomcat/webapps/fofeasy.war&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; fofeasy.war /opt/tomcat/webapps/fofeasy.war&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 容器启动命令&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#CMD [&quot;/opt/tomcat/bin/catalina.sh&quot;, &quot;run&quot;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编写完成后:wq保存。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="dockerfile" scheme="http://www.kekefund.com/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>centos + docker部署web java项目</title>
    <link href="http://www.kekefund.com/2017/03/01/centos-docker-deploy/"/>
    <id>http://www.kekefund.com/2017/03/01/centos-docker-deploy/</id>
    <published>2017-02-28T16:01:59.000Z</published>
    <updated>2017-04-19T03:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，系统准备"><a href="#1，系统准备" class="headerlink" title="1，系统准备"></a>1，系统准备</h1><p>CentOS 具体要求如下：</p>
<ul>
<li>必须是 64 位操作系统</li>
<li>建议内核在 3.8 以上</li>
</ul>
<p>通过以下命令查看您的 CentOS 内核：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@VM_200_249_centos ~]</span># <span class="selector-tag">uname</span> <span class="selector-tag">-r</span></div><div class="line">3<span class="selector-class">.10</span><span class="selector-class">.0-327</span><span class="selector-class">.36</span><span class="selector-class">.3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></div></pre></td></tr></table></figure></p>
<p>对于 CentOS 6.5 而言，内核版本默认是 2.6。首先，可通过以下命令安装最新内核：<br><a id="more"></a><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rpm --<span class="keyword">import</span> <span class="string">https:</span><span class="comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></div><div class="line">rpm -ivh <span class="string">http:</span><span class="comment">//www.elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm</span></div><div class="line">yum -y --enablerepo=elrepo-kernel install kernel-lt</div></pre></td></tr></table></figure></p>
<p>随后，编辑以下配置文件：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vi</span> /etc/grub.<span class="keyword">conf</span></div></pre></td></tr></table></figure></p>
<p>将default=1修改为default=0。<br>最后，通过reboot或shutdown now命令重启操作系统。<br>重启后如果不出意外的话，再次查看内核，您的 CentOS 内核将会显示为 3.10。</p>
<h1 id="2，安装Docker"><a href="#2，安装Docker" class="headerlink" title="2，安装Docker"></a>2，安装Docker</h1><p>只需通过以下命令即可安装 Docker 软件：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">yum -y install docker-io</div></pre></td></tr></table></figure></p>
<p>可通过以下命令启动 Docker 服务：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">chkconfig docker <span class="keyword">on</span> <span class="comment"># 设置开机启动</span></div></pre></td></tr></table></figure>
<p>可使用以下命令，查看 Docker 是否安装成功：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_200_249_centos</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">1.12</span><span class="number">.3</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.24</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.6.3</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">6</span><span class="string">b644ec</span></div><div class="line"><span class="attr"> Built:</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">1.12</span><span class="number">.3</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.24</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.6.3</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">6</span><span class="string">b644ec</span></div><div class="line"><span class="attr"> Built:</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></div></pre></td></tr></table></figure></p>
<p>若输出了 Docker 的版本号，则说明安装成功，我们下面就可以开始使用 Docker 了。</p>
<h1 id="3，-安装镜像"><a href="#3，-安装镜像" class="headerlink" title="3， 安装镜像"></a>3， 安装镜像</h1><p><a href="https://www.docker.com/" target="_blank" rel="external">Docker 官网</a> 提供了所有的镜像<a href="https://registry.hub.docker.com/search?q=library" target="_blank" rel="external">下载地址</a>。（需要VPN翻墙）<br>直接pull下来(<a href="https://hub.docker.com/r/nimmis/java-centos/" target="_blank" rel="external">https://hub.docker.com/r/nimmis/java-centos/</a>)<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker</span> pull nimmis/java-centos</div></pre></td></tr></table></figure></p>
<p>可以通过对应的标签选择不同的jdk版本，例如”docker pull nimmis/java-centos:openjdk-7-jdk”</p>
<ul>
<li>latest - currently Oracle Java version 8 JRE</li>
<li>openjdk-7-jdk - OpenJDK Java version 7 JDK</li>
<li>openjdk-7-jre - OpenJDK Java version 7 JRE</li>
<li>openjdk-7-jre-headless - OpenJDK Java version 7 JRE headless</li>
<li>openjdk-8-jdk - OpenJDK Java version 8 JDK</li>
<li>openjdk-8-jre - OpenJDK Java version 8 JRE</li>
<li>openjdk-8-jre-headless - OpenJDK Java version 8 JRE headless</li>
<li>oracle-7-jre - Oracle Java version 7 JRE</li>
<li>oracle-7-jdk - Oracle Java version 7 JDK</li>
<li>oracle-8-jre - Oracle Java version 8 JRE</li>
<li>oracle-8-jdk - Oracle Java version 8 JDK</li>
</ul>
<h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>docker官网的镜像下载非常慢，国内提供了Docker镜像的下载点，如阿里、网易和DaoCloud。以阿里云为例：<br>需要先注册阿里云账号，进到<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">https</span>://<span class="literal">cr</span>.console.aliyun.com/<span class="comment">#/accelerator</span></div></pre></td></tr></table></figure></p>
<p>选择左侧“加速器”，找到你的专属加速器地址<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-01/dockermirror.png" alt=""><br>在centos下修改/etc/docker/daemon.json文件，添加：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://yxz1pr3x.mirror.aliyuncs.com"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置后能获得每秒1兆的下载速度。</p>
<p>最后，使用以下命令查看本地所有的镜像：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos ~]# docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">dockerxman/docker-centos     latest              <span class="number">4</span>c89ecb22b17        <span class="number">2</span> minutes ago       <span class="number">395.6</span> MB</div><div class="line">daocloud.io/library/centos   latest              <span class="number">67591570</span>dd29        <span class="number">10</span> weeks ago        <span class="number">191.8</span> MB</div></pre></td></tr></table></figure></p>
<p>可以看到，系统中有2个docker镜像，“dockerxman/docker-centos”，也可以<br>称其为仓库（Repository），镜像的标签（Tag）为lastest，此外还有镜像ID（IMAGE ID），大小有395兆。</p>
<h1 id="4，启动容器"><a href="#4，启动容器" class="headerlink" title="4，启动容器"></a>4，启动容器</h1><p>容器在镜像的基础上运行，一旦容器启动了，我们就可以登录到容器中，安装自己所需的软件或应用程序。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -i -t -v <span class="regexp">/mydata/</span><span class="string">data:</span><span class="regexp">/mnt/</span>software --restart=always <span class="number">67591570</span>dd29 <span class="regexp">/bin/</span>bash</div></pre></td></tr></table></figure></p>
<h2 id="命令解释："><a href="#命令解释：" class="headerlink" title="命令解释："></a>命令解释：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="tag">&lt;<span class="name">相关参数</span>&gt;</span> <span class="tag">&lt;<span class="name">镜像</span> <span class="attr">ID</span>&gt;</span> <span class="tag">&lt;<span class="name">初始命令</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，相关参数包括：</p>
<ul>
<li>-i：表示以“交互模式”运行容器</li>
<li>-t：表示容器启动后会进入其命令行</li>
<li>-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</li>
</ul>
<p>初始命令表示一旦容器启动，需要运行的命令，此时使用“/bin/bash”，表示什么也不做，只需进入命令行即可。<br>需要说明的是，不一定要使用“镜像 ID”，也可以使用“仓库名:标签名”，例如：dockerxman/docker-centos:latest。</p>
<h2 id="查看所有创建的容器"><a href="#查看所有创建的容器" class="headerlink" title="查看所有创建的容器"></a>查看所有创建的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div></pre></td></tr></table></figure>
<h2 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@VM_200_249_centos</span> ~]<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS                     NAMES</div><div class="line">a197e23e0ddb        <span class="symbol">asy:</span><span class="number">0</span>.<span class="number">1</span>   <span class="string">"/root/run.sh"</span>      <span class="number">24</span> hours ago        Up <span class="number">24</span> hours         <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">58080</span>-&gt;<span class="number">8080</span>/tcp   javaweb</div></pre></td></tr></table></figure>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">start</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">stop</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="重新进入已创建的容器"><a href="#重新进入已创建的容器" class="headerlink" title="重新进入已创建的容器"></a>重新进入已创建的容器</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">attach</span> &lt;CONTAINER ID&gt;</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it <span class="params">&lt;CONTAINER ID&gt;</span> <span class="meta-keyword">/bin/</span>bash</div></pre></td></tr></table></figure></p>
<blockquote>
<p><a href="http://blog.csdn.net/u010397369/article/details/41045251" target="_blank" rel="external">http://blog.csdn.net/u010397369/article/details/41045251</a></p>
</blockquote>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm <span class="tag">&lt;<span class="name">CONTAINER</span> <span class="attr">ID</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi <span class="tag">&lt;<span class="name">IMAGE</span> <span class="attr">ID</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注：需要先把镜像生成的容器全部删除才能删掉镜像。</p>
<h1 id="5，安装软件"><a href="#5，安装软件" class="headerlink" title="5，安装软件"></a>5，安装软件</h1><p>由于我们选择的镜像是包含JDK的，所以我们只需要安装tomcat。<br>tomcat我放在服务器上，用wget下载到容器中。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="regexp">//</span>kekefund.com<span class="regexp">/soft/</span>apache-tomcat-<span class="number">7.0</span>.<span class="number">63</span>.tar.gz</div></pre></td></tr></table></figure></p>
<p>将tomcat放到/opt目录下，先移到到/opt目录，然后解压<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">tar -zxf /mnt/software/apache-tomcat-<span class="number">7.0</span>.<span class="number">63</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C .</div></pre></td></tr></table></figure></p>
<p>重命名<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv apache-tomcat<span class="number">-7.0</span><span class="number">.63</span>/ tomcat/</div></pre></td></tr></table></figure></p>
<h1 id="6，运行脚本"><a href="#6，运行脚本" class="headerlink" title="6，运行脚本"></a>6，运行脚本</h1><p>创建运行脚本：vi /root/run.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div><div class="line">sh /opt/tomcat/bin/catalina.sh run</div></pre></td></tr></table></figure></p>
<p>为运行脚本添加执行权限<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x /root/<span class="keyword">run</span>.<span class="bash">sh</span></div></pre></td></tr></table></figure></p>
<h1 id="7-创建-Java-Web-镜像"><a href="#7-创建-Java-Web-镜像" class="headerlink" title="7, 创建 Java Web 镜像"></a>7, 创建 Java Web 镜像</h1><p>使用以下命令，根据某个“容器 ID”来创建一个新的“镜像”：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit d<span class="number">50f5048e212</span> chenbb/javaweb:<span class="number">0</span>.<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>该容器的 ID 是“ d50f5048e212”，所创建的镜像名是“ chenbb/javaweb:0.1”，随后可使用镜像来启动 Java Web 容器。</p>
<h1 id="8-启动-Java-Web-容器"><a href="#8-启动-Java-Web-容器" class="headerlink" title="8, 启动 Java Web 容器"></a>8, 启动 Java Web 容器</h1><p>通过docker images查看所有镜像<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos ~]# docker images</div><div class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">chenbb/javaweb               <span class="number">0.1</span>                 <span class="number">99e35759</span>d5ed        <span class="number">24</span> hours ago        <span class="number">700</span> MB</div><div class="line">dockerxman/docker-centos     latest              <span class="number">4</span>c89ecb22b17        <span class="number">26</span> hours ago        <span class="number">395.6</span> MB</div><div class="line">daocloud.io/library/centos   latest              <span class="number">67591570</span>dd29        <span class="number">10</span> weeks ago        <span class="number">191.8</span> MB</div></pre></td></tr></table></figure></p>
<p>可见，此时已经看到了最新创建的镜像“ chenbb/javaweb:0.1”，其镜像 ID 是“ 99e35759d5ed”。正如上面所描述的那样，我们可以通过“镜像名”或“镜像 ID”来启动容器，与上次启动容器不同的是，我们现在不再进入容器的命令行，而是直接启动容器内部的 Tomcat 服务。此时，需要使用以下命令：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 58080:8080 --name javaweb --restart=always chenbb/javaweb:0.1 /root/run.sh</span></div></pre></td></tr></table></figure></p>
<p>参数介绍：</p>
<ul>
<li>-d：表示以“守护模式”执行/root/run.sh脚本，此时 Tomcat 控制台不会出现在输出终端上。</li>
<li>-p：表示宿主机与容器的端口映射，此时将容器内部的 8080 端口映射为宿主机的 58080 端口，这样就向外界暴露了 58080 端口，可通过 Docker 网桥来访问容器内部的 8080 端口了。</li>
<li>–name：表示容器名称，用一个有意义的名称命名即可。</li>
</ul>
<h1 id="9，浏览器查看"><a href="#9，浏览器查看" class="headerlink" title="9，浏览器查看"></a>9，浏览器查看</h1><p>在浏览器中，输入以下地址，即可访问 Tomcat 首页：<br><a href="http://192.168.1.124:58080/" target="_blank" rel="external">http://192.168.1.124:58080/</a></p>
<h1 id="10，镜像打包"><a href="#10，镜像打包" class="headerlink" title="10，镜像打包"></a>10，镜像打包</h1><p>打包后就可以移植到其他主机上运行了。<br>打包：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save chenbb<span class="regexp">/fofeasy:0.1 &gt; /my</span>data<span class="regexp">/data/</span>fofeasy0.<span class="number">1</span>.tar</div></pre></td></tr></table></figure></p>
<h1 id="11，在另外的主机上导入镜像"><a href="#11，在另外的主机上导入镜像" class="headerlink" title="11，在另外的主机上导入镜像"></a>11，在另外的主机上导入镜像</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">load</span> &lt; fofeasy0<span class="number">.1</span>.tar   <span class="meta">#导入镜像</span></div><div class="line">docker images   <span class="meta">#查看存在的镜像</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>1，<a href="http://www.jianshu.com/p/26f15063de7d" target="_blank" rel="external">迈出使用Docker的第一步，学习第一个Docker容器</a><br> 2，<a href="https://my.oschina.net/huangyong/blog/372491" target="_blank" rel="external">使用 Docker 搭建 Java Web 运行环境</a><br>3，<a href="http://docs.daocloud.io/java-docker/docker-tomcat-war-java" target="_blank" rel="external">使用 Docker 运行 Tomcat ＋ WAR 包 Java 应用</a><br>4，<a href="http://bbs.csdn.net/topics/390844669" target="_blank" rel="external">docker的安装以及jdk和tomcat的环境配置</a><br>5，<a href="http://yangrong.blog.51cto.com/6945369/1551327" target="_blank" rel="external">运维人员的解放—-Docker快速部署</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，系统准备&quot;&gt;&lt;a href=&quot;#1，系统准备&quot; class=&quot;headerlink&quot; title=&quot;1，系统准备&quot;&gt;&lt;/a&gt;1，系统准备&lt;/h1&gt;&lt;p&gt;CentOS 具体要求如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须是 64 位操作系统&lt;/li&gt;
&lt;li&gt;建议内核在 3.8 以上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以下命令查看您的 CentOS 内核：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[root@VM_200_249_centos ~]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-r&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;span class=&quot;selector-class&quot;&gt;.10&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0-327&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.36&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.el7&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.x86_64&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于 CentOS 6.5 而言，内核版本默认是 2.6。首先，可通过以下命令安装最新内核：&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="centos" scheme="http://www.kekefund.com/tags/centos/"/>
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="tomcat" scheme="http://www.kekefund.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>iReport一键生成PDF报告指南</title>
    <link href="http://www.kekefund.com/2017/02/15/ireport-gen-pdf/"/>
    <id>http://www.kekefund.com/2017/02/15/ireport-gen-pdf/</id>
    <published>2017-02-15T02:10:06.000Z</published>
    <updated>2017-04-19T03:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要生成PDF和Word文件的报告，文件中包含图片和表格。基于Java的解决方案有Freemarker模板引擎，是通过XML文件将填入的内容放上\${}占位符。这种方式对于简单的文本是没问题，但如果占位符中有字符跟\${}冲突，就比较难处理了。</p>
<p>iReport是一款可视化报表设计工具，看软件界面跟Qt的风格有几分相似，内置丰富的图表，能够创建复杂的报表。相比XML模板的方式，更加灵活和稳定。</p>
<ul>
<li>主界面<a id="more"></a>
<img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport1.png" alt=""></li>
</ul>
<hr>
<p>本文以一个实际的导出PDF报告案例来讲解。</p>
<h1 id="一、ireport可视化布局"><a href="#一、ireport可视化布局" class="headerlink" title="一、ireport可视化布局"></a>一、ireport可视化布局</h1><h2 id="1，插入图片"><a href="#1，插入图片" class="headerlink" title="1，插入图片"></a>1，插入图片</h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport2.png" alt=""></p>
<p>从组件面板拖动Image到中间的页面Designer区域。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport3.png" alt=""></p>
<p>在右下角的Image属性列表中，设置Image Expression为$F{netImage}。</p>
<p>不过，首先得在Fields定义好变量：netImage，netImage可以在Java工程中传值传过来，也可以是静态图片或url。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport4.png" alt=""></p>
<p><strong>Image Expression支持的三种方式：</strong></p>
<ol>
<li>$F{netImage};</li>
<li>“D://net.png”</li>
<li>“<a href="https://dn-abc.qbox.me/logo.png" target="_blank" rel="external">https://dn-abc.qbox.me/logo.png</a>“</li>
</ol>
<p>生成的pdf效果：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport5.png" alt=""></p>
<h2 id="2，插入表格"><a href="#2，插入表格" class="headerlink" title="2，插入表格"></a>2，插入表格</h2><p>为了便于扩展，表格放到Subreport中；在组件面板中新建一个Subreport，进入subreport设计表格；<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport6.png" alt=""><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport7.png" alt=""></p>
<p>这里有几个要点：</p>
<h3 id="a-中文字符的显示："><a href="#a-中文字符的显示：" class="headerlink" title="a, 中文字符的显示："></a>a, 中文字符的显示：</h3><p>需要在属性中设置<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pdf <span class="string">Font:</span> STSong-Light</div><div class="line">Pdf <span class="string">Embedded:</span> 勾选</div><div class="line">Pdf <span class="string">Encoding:</span> UniGB-UCS2-H(Chinese Simplified)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport8.png" alt=""></p>
<h3 id="b-数字的格式化"><a href="#b-数字的格式化" class="headerlink" title="b, 数字的格式化"></a>b, 数字的格式化</h3><p>由于Java传过来的值在ireport中默认都是String，在Expression Class中设置为java.lang.Double也没有用。<br>需要在Text Field Expression中将字符串转成Double，然后在格式化，Pattern中设置“###0.0000”，表示保留4为小数。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport9.png" alt=""></p>
<h3 id="c-数字百分比的显示"><a href="#c-数字百分比的显示" class="headerlink" title="c, 数字百分比的显示"></a>c, 数字百分比的显示</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Text</span> Field <span class="keyword">Expression</span>: ($F&#123;val&#125;.equals(<span class="string">""</span>) ? <span class="string">"--"</span> : new Double($F&#123;val&#125;))</div><div class="line"><span class="keyword">Pattern</span>：#,##<span class="number">0.00</span>%</div></pre></td></tr></table></figure>
<p>如果val为空，则用显示–。按百分比格式化，保留2位小数。<br>效果如下：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport10.png" alt=""><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport11.png" alt=""></p>
<h2 id="3，生成编译文件"><a href="#3，生成编译文件" class="headerlink" title="3，生成编译文件"></a>3，生成编译文件</h2><p>ireport源文件是jrxml格式，点击下图中的锤子，编译后生成jasper文件。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport12.png" alt=""></p>
<h1 id="二、Java项目配置"><a href="#二、Java项目配置" class="headerlink" title="二、Java项目配置"></a>二、Java项目配置</h1><p>将生成的jasper文件导入到java工程<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-15/ireport13.png" alt=""></p>
<h2 id="1，生成图片"><a href="#1，生成图片" class="headerlink" title="1，生成图片"></a>1，生成图片</h2><p>项目中的方案是从echarts中截图，将截图保存到本地文件夹<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 调用js</div><div class="line">* 产生图片</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genPic</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">"pic="</span>+<span class="built_in">encodeURIComponent</span>(mainChart.getDataURL(</div><div class="line">    &#123;</div><div class="line">       <span class="attr">type</span>:<span class="string">"png"</span>,</div><div class="line">       <span class="attr">pixelRatio</span>:<span class="number">1</span>, </div><div class="line">       <span class="attr">excludeComponents</span>:[<span class="string">'toolbox'</span>, <span class="string">'dataZoom'</span>]</div><div class="line">    &#125;));  </div><div class="line">            </div><div class="line">    <span class="keyword">var</span> xmlhttp;          </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; <span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari  </span></div><div class="line">        xmlhttp = <span class="keyword">new</span> XMLHttpRequest();  </div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// code for IE6, IE5  </span></div><div class="line">        xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </div><div class="line">    &#125;  </div><div class="line">            </div><div class="line">    xmlhttp.open(<span class="string">"POST"</span>,ctx+<span class="string">"/productReport/genNetPic?fundId="</span>+$(<span class="string">'#netfundId'</span>).val(),<span class="literal">true</span>);  </div><div class="line">    xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);  </div><div class="line">    xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;  </div><div class="line">            <span class="comment">// 回调生成结果</span></div><div class="line">            callback(<span class="literal">true</span>);  </div><div class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (xmlhttp.status!=<span class="number">200</span>)&#123;</div><div class="line">            callback(<span class="literal">false</span>); </div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    xmlhttp.send(data); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Controller中的函数：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = <span class="string">"genNetPic"</span>, method = RequestMethod.POST)</div><div class="line">@ResponseBody</div><div class="line"><span class="keyword">public</span> BaseResponse genNetPic(HttpServletRequest request)&#123;</div><div class="line">    logger.info(<span class="string">"开始生成图片"</span>);</div><div class="line">    <span class="keyword">String</span> pic = request.getParameter(<span class="string">"pic"</span>); </div><div class="line">    <span class="keyword">String</span> fundId = request.getParameter(<span class="string">"fundId"</span>); </div><div class="line">    BaseResponse baseResponse = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">String</span>[] url = pic.split(<span class="string">","</span>);</div><div class="line">        <span class="keyword">String</span> u = url[<span class="number">1</span>];  </div><div class="line">        byte[] b = <span class="keyword">new</span> <span class="type">BASE64Decoder</span>().decodeBuffer(u);  </div><div class="line">        <span class="comment">// 创建图片生成的路径:日期+产品id</span></div><div class="line">        Date curDate = <span class="keyword">new</span> <span class="type">Date</span>();</div><div class="line">        StringBuilder filePath = <span class="keyword">new</span> <span class="type">StringBuilder</span>(<span class="string">""</span>);</div><div class="line">        filePath.append(upload_path).append(DateUtil.formatDate(curDate, <span class="string">"yyyy-MM-dd"</span>)).append(<span class="string">"/"</span>).append(fundId);</div><div class="line">        FileUtil.createDictionary(filePath.toString());</div><div class="line">        <span class="comment">// 创建图片文件</span></div><div class="line">        OutputStream out = <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="keyword">new</span> <span class="type">File</span>(filePath.toString()+<span class="string">"/net.png"</span>));  </div><div class="line">                    out.write(b);  </div><div class="line">                    out.flush();  </div><div class="line">                    out.close();</div><div class="line">                    baseResponse = <span class="keyword">new</span> <span class="type">BaseResponse</span>(<span class="literal">true</span>);</div><div class="line">                    logger.info(<span class="string">"完成生成图片"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        logger.error(<span class="string">"生成图片失败，失败原因:&#123;&#125;"</span>,e.getMessage());</div><div class="line">        baseResponse = <span class="keyword">new</span> <span class="type">BaseResponse</span>(<span class="literal">false</span>, <span class="string">"图片生成失败"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> baseResponse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2，构建报告参数"><a href="#2，构建报告参数" class="headerlink" title="2，构建报告参数"></a>2，构建报告参数</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 构建报表的参数</div><div class="line">* @return</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> FundReportDto getReportParams(<span class="keyword">String</span> fundId, <span class="keyword">String</span> fundName, Date curDate)&#123;</div><div class="line">    <span class="keyword">String</span> dateStr = DateUtil.formatDate(curDate, <span class="string">"yyyy-MM-dd"</span>);</div><div class="line">    <span class="comment">//</span></div><div class="line">    FundReportDto fundReportDto = <span class="keyword">new</span> FundReportDto();</div><div class="line">    <span class="comment">// 得到图片路径</span></div><div class="line">    StringBuilder netImage = <span class="keyword">new</span> StringBuilder(jasper_chart_path);</div><div class="line">    netImage.<span class="built_in">append</span>(dateStr).<span class="built_in">append</span>(<span class="string">"/"</span>).<span class="built_in">append</span>(fundId).<span class="built_in">append</span>(<span class="string">"/"</span>).<span class="built_in">append</span>(<span class="string">"net.png"</span>);</div><div class="line">    fundReportDto.setNetImage(netImage.toString());</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fundReportDto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回参数用对象FundReportDto封装，FundReportDto是可序列化的对象：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.Serializable;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.ArrayList;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FundReportDto</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> long serialVersionUID = <span class="number">-3023588547102105811</span>L;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 统计日期</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String statisticDate;</div><div class="line">        <span class="comment">/*</span></div><div class="line">	 * 图片</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> String netImage;</div><div class="line">       </div><div class="line">       ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="3，生成报告"><a href="#3，生成报告" class="headerlink" title="3，生成报告"></a>3，生成报告</h2><p>报告支持pdf和word两种格式，生成步骤是先将报告保存在本地文件夹，然后调用浏览器下载。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 一建生成报告</div><div class="line">*/</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRExporterParameter;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperExportManager;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperFillManager;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperPrint;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperReport;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.export.JRRtfExporter;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.util.JRLoader;</div><div class="line"></div><div class="line">@RequestMapping(value = <span class="string">"exportReport"</span>, method = RequestMethod.GET)</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> exportReport(<span class="keyword">String</span> fundId, <span class="keyword">String</span> fundName, <span class="keyword">String</span> fileFormat, HttpServletResponse response)&#123;</div><div class="line">   Date curDate = <span class="keyword">new</span> Date();</div><div class="line">   <span class="keyword">String</span> dateStr = DateUtil.formatDate(curDate, <span class="string">"yyyy-MM-dd"</span>);</div><div class="line">   <span class="comment">// 文件路径 </span></div><div class="line">   StringBuilder filePath = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">   filePath.<span class="built_in">append</span>(upload_path).<span class="built_in">append</span>(dateStr).<span class="built_in">append</span>(<span class="string">"/"</span>).<span class="built_in">append</span>(fundId);</div><div class="line">   FileUtil.createDictionary(filePath.toString());</div><div class="line">   <span class="comment">// 文件名 </span></div><div class="line">   StringBuilder fileName = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">   fileName.<span class="built_in">append</span>(fundName).<span class="built_in">append</span>(<span class="string">"评价报告_"</span>).<span class="built_in">append</span>(dateStr).<span class="built_in">append</span>(<span class="string">"."</span>).<span class="built_in">append</span>(fileFormat);</div><div class="line">   <span class="comment">// 文件全路径</span></div><div class="line">   StringBuilder fullName = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">   fullName.<span class="built_in">append</span>(filePath).<span class="built_in">append</span>(<span class="string">"/"</span>).<span class="built_in">append</span>(fileName);</div><div class="line">   <span class="comment">// 加载报表对象</span></div><div class="line">   InputStream is = <span class="keyword">null</span>;</div><div class="line">   JasperReport jasperReport = <span class="keyword">null</span>;</div><div class="line">   JasperPrint jasperPrint = <span class="keyword">null</span>;</div><div class="line">   is = ProductDetailController.class.getClassLoader().getResourceAsStream(analysis_jasper_path);</div><div class="line">   <span class="keyword">try</span>&#123;</div><div class="line">        <span class="comment">// 响应头部信息设置</span></div><div class="line">        response.setContentType(<span class="string">"text/plain"</span>);</div><div class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+FileUtil.getAttachName(fileName.toString()));</div><div class="line">        <span class="comment">//</span></div><div class="line">        jasperReport = (JasperReport) JRLoader.loadObject(is);</div><div class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; params = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">        params.put(<span class="string">"SUBREPORT_DIR"</span>, getClassPath(subreport_dir));</div><div class="line">        params.put(<span class="string">"fundName"</span>, fundName);</div><div class="line">        params.put(<span class="string">"reportTitle"</span>, fundName+<span class="string">"报告"</span>);</div><div class="line">          </div><div class="line">        <span class="comment">// </span></div><div class="line">        List&lt;FundReportDto&gt; fundReportDtos = <span class="keyword">new</span> ArrayList&lt;FundReportDto&gt;();</div><div class="line">        FundReportDto fundReportDto = getReportParams(fundId, fundName,curDate);</div><div class="line">        fundReportDtos.<span class="built_in">add</span>(fundReportDto);</div><div class="line">        params.put(<span class="string">"statisticDate"</span>, fundReportDto.getStatisticDate());</div><div class="line">        <span class="comment">// </span></div><div class="line">        jasperPrint = JasperFillManager.fillReport(jasperReport, params, <span class="keyword">new</span> JRBeanCollectionDataSource(fundReportDtos));</div><div class="line">        <span class="keyword">if</span> (fileFormat.equals(<span class="string">"pdf"</span>)) &#123;</div><div class="line">            JasperExportManager.exportReportToPdfFile(jasperPrint, fullName.toString());</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            JRRtfExporter docReport = <span class="keyword">new</span> JRRtfExporter();</div><div class="line">            docReport.setParameter(JRExporterParameter.OUTPUT_FILE_NAME,fullName.toString());</div><div class="line">            docReport.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);</div><div class="line">            docReport.exportReport();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        FileUtil.download(fullName.toString(), response.getOutputStream());</div><div class="line">                </div><div class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        logger.error(<span class="string">"生成报告失败，失败原因:&#123;&#125;"</span>,e.getMessage());</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (is!=<span class="keyword">null</span>) is.close();</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            logger.error(<span class="string">"关闭文件输入流异常:&#123;&#125;"</span>,e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中analysis_jasper_path为jasper文件的路径。<br>这样，一份完整的pdf或word报告就制作出来了。</p>
<ul>
<li><p>相关资料</p>
<ul>
<li><a href="http://kekefund.com/soft/iReport-5.6.0.zip" target="_blank" rel="external">ireport5.6 windows安装包</a></li>
<li><a href="http://kekefund.com/soft/ireport-ultimate-guide.pdf" target="_blank" rel="external">ireport用户手册</a></li>
</ul>
</li>
<li><p>参考:</p>
<blockquote>
<p><a href="http://blog.csdn.net/jackfrued/article/details/39449021" target="_blank" rel="external">http://blog.csdn.net/jackfrued/article/details/39449021</a><br><a href="http://blog.csdn.net/wlwlwlwl015/article/details/51312853" target="_blank" rel="external">http://blog.csdn.net/wlwlwlwl015/article/details/51312853</a><br><a href="http://zxs19861202.iteye.com/blog/1171118" target="_blank" rel="external">http://zxs19861202.iteye.com/blog/1171118</a></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中需要生成PDF和Word文件的报告，文件中包含图片和表格。基于Java的解决方案有Freemarker模板引擎，是通过XML文件将填入的内容放上\${}占位符。这种方式对于简单的文本是没问题，但如果占位符中有字符跟\${}冲突，就比较难处理了。&lt;/p&gt;
&lt;p&gt;iReport是一款可视化报表设计工具，看软件界面跟Qt的风格有几分相似，内置丰富的图表，能够创建复杂的报表。相比XML模板的方式，更加灵活和稳定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主界面
    
    </summary>
    
      <category term="Java" scheme="http://www.kekefund.com/categories/Java/"/>
    
    
      <category term="ireport" scheme="http://www.kekefund.com/tags/ireport/"/>
    
      <category term="pdf" scheme="http://www.kekefund.com/tags/pdf/"/>
    
      <category term="报告" scheme="http://www.kekefund.com/tags/%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>自己动手，升级iMac——USB3.0 SSD固态硬盘解决方案</title>
    <link href="http://www.kekefund.com/2017/02/13/imac-ssd-outer-solution/"/>
    <id>http://www.kekefund.com/2017/02/13/imac-ssd-outer-solution/</id>
    <published>2017-02-13T15:23:59.000Z</published>
    <updated>2017-04-19T03:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>家里的iMac是2013年买的，曾记得当年是自己开发的一款android程序在中国移动APP大赛上取得前十，这台imac就是用这笔奖金买的。小小的回忆下，虽然这款app已经没有接着开发了，想当初也是投入了满腔的热血加入移动开发的大营^_^。</p>
<p>如今iMac升级了好几代，但硬盘居然还是传统的机械硬盘，当然也有FusionDrive和SSD，但需要加钱。<br>最新的imac除了显示器升级到视网膜屏外，其它的外观基本没什么变化，自家的老款imac仍然可以来装装*，除了运行速度越来越慢~~~<br><a id="more"></a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac1.png" alt=""></p>
<p>开机启动要个3-5分钟，打开chrome，docker上的chrome图标要跳个30s左右才能完全把chrome打开，体验速度已经到了无法忍受的地步了！<br>用DiskSpeedTest测试硬盘的读写速度：</p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac2.png" alt=""></p>
<p>5400转的SATA理论读写速度是90M/s，由于已经使用了3年多，实际读写只有理论的一半了。<br>在网上看过不少将内置机械硬盘更换为SSD硬盘的帖子，感觉难度挺大，而且容易毁掉屏幕，还可能导致风扇异常，不愿冒这个险。<br>参考帖子:</p>
<blockquote>
<p><a href="http://blog.devtang.com/2014/01/26/add-ssd-to-old-imac/" target="_blank" rel="external">http://blog.devtang.com/2014/01/26/add-ssd-to-old-imac/</a></p>
</blockquote>
<p>于是寻找外置硬盘的解决方案：<br>apple的雷电接口速度比较快，可惜市面上很少有雷电口的SSD硬盘，幸好imac的USB接口是3.0的，USB3.0的最大传输带宽高达5.0Gbps（500MB/s），与SSD硬盘相比慢了一点，但速度比机械硬盘那快了不止一点半点。</p>
<p>参考<a href="https://luolei.org/imac-5k-external-usb-ssd-update/" target="_blank" rel="external">iMac 2015 5K 版外接 USB3.0 硬盘盒+SSD 系统加速体验</a>，从马云家采购来硬盘盒和SSD硬盘:</p>
<ul>
<li>Toshiba/东芝 OCZ饥饿鲨TR150 240G SSD固态硬盘</li>
<li>世特力裸族CSS25U3BK6G移动硬盘盒SSD固态硬盘盒 USB3.0 SATA3 6G</li>
</ul>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac3.png" alt=""></p>
<p>519+135，654块搞定！</p>
<p>移动硬盘+硬盘盒接到iMac后面是这个样子的：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac4.png" alt=""></p>
<p>用DiskSpeedTest测试，读写速度分别能达到264M/s和128M/s，比iMac机械硬盘的速度提升了5倍！<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac5.png" alt=""></p>
<p>当然，还是不能跟内置的SSD硬盘相比，下面是macbook pro的硬盘测试结果：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-13/imac6.png" alt=""></p>
<p>因为imac的速度太慢，在家闲置了好久，换了这个SSD外置硬盘，速度又飞起来了，现在又可以启用了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;家里的iMac是2013年买的，曾记得当年是自己开发的一款android程序在中国移动APP大赛上取得前十，这台imac就是用这笔奖金买的。小小的回忆下，虽然这款app已经没有接着开发了，想当初也是投入了满腔的热血加入移动开发的大营^_^。&lt;/p&gt;
&lt;p&gt;如今iMac升级了好几代，但硬盘居然还是传统的机械硬盘，当然也有FusionDrive和SSD，但需要加钱。&lt;br&gt;最新的imac除了显示器升级到视网膜屏外，其它的外观基本没什么变化，自家的老款imac仍然可以来装装*，除了运行速度越来越慢~~~&lt;br&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="iMac" scheme="http://www.kekefund.com/tags/iMac/"/>
    
      <category term="SSD" scheme="http://www.kekefund.com/tags/SSD/"/>
    
      <category term="USB3.0" scheme="http://www.kekefund.com/tags/USB3-0/"/>
    
      <category term="移动硬盘盒" scheme="http://www.kekefund.com/tags/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>ireport在centos7下生成pdf缺失字体问题解决</title>
    <link href="http://www.kekefund.com/2017/02/06/ireport-centos-deploy-bug/"/>
    <id>http://www.kekefund.com/2017/02/06/ireport-centos-deploy-bug/</id>
    <published>2017-02-06T07:55:11.000Z</published>
    <updated>2017-04-19T03:37:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>在mac和window测试环境下调试均无问题，但部署到centos下生成报告时报如下错误：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">11</span>:<span class="number">07</span>:<span class="number">19.093</span> ERROR c<span class="selector-class">.d</span><span class="selector-class">.f</span><span class="selector-class">.report</span><span class="selector-class">.controller</span><span class="selector-class">.ProductDetailController</span> - 生成报告失败，</div><div class="line">失败原因:Font <span class="string">'STZhongsong'</span> is not available to the JVM. See the Javadoc <span class="keyword">for</span> more <span class="selector-tag">details</span>.</div></pre></td></tr></table></figure></p>
<p>按照错误提示，把STZHONGS.ttf字体复制到centos的fonts中，按照<a href="http://www.cnblogs.com/xiaodiejinghong/p/4013454.html" target="_blank" rel="external">如何给CentOS安装字体库</a>中的方法，<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkfontscale</div><div class="line"></div><div class="line">mkfontdir</div><div class="line"></div><div class="line"><span class="built_in">fc</span>-cache -fv</div></pre></td></tr></table></figure></p>
<p>执行完成后，还是不行。</p>
<p>通过fc-list命令查看，发现</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="regexp">/usr/</span>share<span class="regexp">/fonts/</span>TTF/STZHONGS.<span class="string">ttf:</span> 华文中宋,<span class="string">STZhongsong:</span>style=Regular</div><div class="line">...</div></pre></td></tr></table></figure>
<p>系统中安装的是Regular样式的字体，而pdf用到的是STSong-Light字体。</p>
<hr>
<p>来个暴力的方式，看看能不能解决。将window的fonts文件夹下的所有字体拷贝到centos的fonts下。<br>再执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkfontscale</div><div class="line"></div><div class="line">mkfontdir</div><div class="line"></div><div class="line"><span class="built_in">fc</span>-cache -fv</div></pre></td></tr></table></figure></p>
<p>重启tomcat，一键生成报告，pdf正常了！<br>pdf截图：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-02-06/ireport-pdf.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在mac和window测试环境下调试均无问题，但部署到centos下生成报告时报如下错误：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19.093&lt;/span&gt; ERROR c&lt;span class=&quot;selector-class&quot;&gt;.d&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.f&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.report&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.controller&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ProductDetailController&lt;/span&gt; - 生成报告失败，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;失败原因:Font &lt;span class=&quot;string&quot;&gt;&#39;STZhongsong&#39;&lt;/span&gt; is not available to the JVM. See the Javadoc &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more &lt;span class=&quot;selector-tag&quot;&gt;details&lt;/span&gt;.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按照错误提示，把STZHONGS.ttf字体复制到centos的fonts中，按照&lt;a href=&quot;http://www.cnblogs.com/xiaodiejinghong/p/4013454.html&quot;&gt;如何给CentOS安装字体库&lt;/a&gt;中的方法，&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.kekefund.com/categories/Java/"/>
    
    
      <category term="ireport" scheme="http://www.kekefund.com/tags/ireport/"/>
    
      <category term="centos7" scheme="http://www.kekefund.com/tags/centos7/"/>
    
      <category term="字体" scheme="http://www.kekefund.com/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>mac版 eclipse 只能run不能debug的解决方案</title>
    <link href="http://www.kekefund.com/2017/01/10/mac-eclipse-debug/"/>
    <id>http://www.kekefund.com/2017/01/10/mac-eclipse-debug/</id>
    <published>2017-01-10T03:07:36.000Z</published>
    <updated>2017-04-19T03:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac版-eclipse-只能run不能debug的解决方案"><a href="#mac版-eclipse-只能run不能debug的解决方案" class="headerlink" title="mac版 eclipse 只能run不能debug的解决方案"></a>mac版 eclipse 只能run不能debug的解决方案</h1><p>mac：macOS Sierra 10.12.2<br>eclipse：Version: Neon.1a Release (4.6.1)</p>
<p>debug时进度一直停在93%，然后超时报错：<br><a id="more"></a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/20170110/17011001.png" alt=""></p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ERROR: </span>transport error 202: gethostbyname: unknown host</div><div class="line"><span class="keyword">ERROR: </span>JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510)</div><div class="line">JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [debugInit.c:750]</div><div class="line">FATAL ERROR in native method: JDWP No transports initialized, jvmtiError=AGENT_ERROR_TRANSPORT_INIT(197)</div></pre></td></tr></table></figure>
<p>分析错误提示，是找不到主机host，google一下，在stackoverflow找到了解决方案，在hosts中加入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>	<span class="selector-tag">localhost</span></div></pre></td></tr></table></figure></p>
<p>-hosts修改方法：<br>hosts不能直接在/etc中修改；<br>在Finder中，点击shift+command+G，输入/etc，将hosts文件拷贝到桌面，修改后再拷贝回去（需要输入密码）。</p>
<p>再次debug，正常！<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/20170110/17011002.png" alt=""></p>
<ul>
<li>参考:</li>
</ul>
<blockquote>
<p><a href="http://stackoverflow.com/questions/29188789/eclipse-mac-os-x-debug-error-fatal-error-in-native-method-jdwp-no-transports" target="_blank" rel="external">http://stackoverflow.com/questions/29188789/eclipse-mac-os-x-debug-error-fatal-error-in-native-method-jdwp-no-transports</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mac版-eclipse-只能run不能debug的解决方案&quot;&gt;&lt;a href=&quot;#mac版-eclipse-只能run不能debug的解决方案&quot; class=&quot;headerlink&quot; title=&quot;mac版 eclipse 只能run不能debug的解决方案&quot;&gt;&lt;/a&gt;mac版 eclipse 只能run不能debug的解决方案&lt;/h1&gt;&lt;p&gt;mac：macOS Sierra 10.12.2&lt;br&gt;eclipse：Version: Neon.1a Release (4.6.1)&lt;/p&gt;
&lt;p&gt;debug时进度一直停在93%，然后超时报错：&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.kekefund.com/categories/Java/"/>
    
    
      <category term="mac" scheme="http://www.kekefund.com/tags/mac/"/>
    
      <category term="eclipse" scheme="http://www.kekefund.com/tags/eclipse/"/>
    
      <category term="debug" scheme="http://www.kekefund.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>python制作分布图</title>
    <link href="http://www.kekefund.com/2016/11/02/distribution-map/"/>
    <id>http://www.kekefund.com/2016/11/02/distribution-map/</id>
    <published>2016-11-02T07:44:43.000Z</published>
    <updated>2017-04-19T03:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>制作分布图类似密度图，在python中利用pandas来提取分布数据是比较方便的。主要用到pandas的cut和groupby等函数。</p>
<h1 id="第一步，从数据库中提取数据"><a href="#第一步，从数据库中提取数据" class="headerlink" title="第一步，从数据库中提取数据"></a>第一步，从数据库中提取数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line">host_mysql_test = <span class="string">'127.0.0.1'</span></div><div class="line">port_mysql_test = <span class="number">3306</span></div><div class="line">user_mysql_test = <span class="string">'admin'</span></div><div class="line">pwd_mysql_test = <span class="string">'1234'</span></div><div class="line">db_name_mysql_test = <span class="string">'mydb'</span></div><div class="line">engine_hq = create_engine(<span class="string">'mysql+mysqldb://%s:%s@%s:%d/%s'</span> % (user_mysql_test,</div><div class="line">                                                              pwd_mysql_test,</div><div class="line">                                                              host_mysql_test,</div><div class="line">                                                              port_mysql_test,</div><div class="line">                                                              <span class="string">'hq_db'</span>), connect_args=&#123;<span class="string">'charset'</span>: <span class="string">'utf8'</span>&#125;)</div><div class="line"></div><div class="line">sql = <span class="string">"SELECT * FROM fund_data where quarter&gt;=8 order by yanzhi desc"</span></div><div class="line">df = pd.read_sql(sql, engine)</div><div class="line"><span class="comment">#将yanzhi数据转换为百分比</span></div><div class="line">df[<span class="string">'yanzhi'</span>] = df[<span class="string">'yanzhi'</span>].apply(<span class="keyword">lambda</span> x: x * <span class="number">100</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="第二步，面元划分"><a href="#第二步，面元划分" class="headerlink" title="第二步，面元划分"></a>第二步，面元划分</h1><ul>
<li>cut函数：<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pandas.cut(x, bins, <span class="attr">right=True,</span> <span class="attr">labels=None,</span> <span class="attr">retbins=False,</span> <span class="attr">precision=3,</span> <span class="attr">include_lowest=False)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html" target="_blank" rel="external">官方文档链接</a></p>
<p>主要参数为x和bins。<br>x为数据源，数组格式的都支持，list，numpy.narray, pandas.Series。<br>bins可以为int，也可以为序列。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bins = [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</div><div class="line">cats = pd.cut(df['yanzhi'], bins)</div></pre></td></tr></table></figure></p>
<p>我们定义bins为一个序列，默认的为左开右闭的区间：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span><span class="selector-attr">[]</span><span class="selector-pseudo">:print</span> <span class="selector-tag">cats</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[]</span>:</div><div class="line"><span class="selector-tag">0</span>      (<span class="number">90</span>, <span class="number">100</span>]</div><div class="line"><span class="number">1</span>      (<span class="number">90</span>, <span class="number">100</span>]</div><div class="line"><span class="number">2</span>      (<span class="number">90</span>, <span class="number">100</span>]</div><div class="line"><span class="number">3</span>       (<span class="number">80</span>, <span class="number">90</span>]</div><div class="line"><span class="number">4</span>       (<span class="number">80</span>, <span class="number">90</span>]</div><div class="line">         ...    </div><div class="line"><span class="number">970</span>     (<span class="number">10</span>, <span class="number">20</span>]</div><div class="line"><span class="number">971</span>     (<span class="number">10</span>, <span class="number">20</span>]</div><div class="line"><span class="number">972</span>     (<span class="number">10</span>, <span class="number">20</span>]</div><div class="line"><span class="number">973</span>     (<span class="number">10</span>, <span class="number">20</span>]</div><div class="line"><span class="number">974</span>     (<span class="number">10</span>, <span class="number">20</span>]</div><div class="line"><span class="attribute">Name</span>: yanzhi, <span class="attribute">dtype</span>: category</div><div class="line">Categories (<span class="number">10</span>, object): [(<span class="number">0</span>, <span class="number">10</span>], (<span class="number">10</span>, <span class="number">20</span>], (<span class="number">20</span>, <span class="number">30</span>], (<span class="number">30</span>, <span class="number">40</span>], ..., (<span class="number">60</span>, <span class="number">70</span>], (<span class="number">70</span>, <span class="number">80</span>], (<span class="number">80</span>, <span class="number">90</span>]</div><div class="line">                         , (<span class="number">90</span>, <span class="number">100</span>]]</div></pre></td></tr></table></figure></p>
<h1 id="第三步，groupby"><a href="#第三步，groupby" class="headerlink" title="第三步，groupby"></a>第三步，groupby</h1><p>对言值列按cats做groupby，然后调用get_stats统计函数，再用unstack函数将层次化的行索引“展开”为列。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> get_stats(<span class="keyword">group</span>):</div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'count'</span>: <span class="keyword">group</span>.<span class="keyword">count</span>()&#125;</div><div class="line"></div><div class="line">grouped = df[<span class="string">'yanzhi'</span>].groupby(cats)</div><div class="line">bin_counts = grouped.apply(get_stats).unstack()</div><div class="line"></div><div class="line"><span class="keyword">print</span> bin_counts</div><div class="line"></div><div class="line">           <span class="keyword">count</span></div><div class="line">yanzhi          </div><div class="line">(<span class="number">0</span>, <span class="number">10</span>]        <span class="number">0</span></div><div class="line">(<span class="number">10</span>, <span class="number">20</span>]       <span class="number">5</span></div><div class="line">(<span class="number">20</span>, <span class="number">30</span>]      <span class="number">22</span></div><div class="line">(<span class="number">30</span>, <span class="number">40</span>]      <span class="number">92</span></div><div class="line">(<span class="number">40</span>, <span class="number">50</span>]     <span class="number">258</span></div><div class="line">(<span class="number">50</span>, <span class="number">60</span>]     <span class="number">357</span></div><div class="line">(<span class="number">60</span>, <span class="number">70</span>]     <span class="number">178</span></div><div class="line">(<span class="number">70</span>, <span class="number">80</span>]      <span class="number">51</span></div><div class="line">(<span class="number">80</span>, <span class="number">90</span>]       <span class="number">9</span></div><div class="line">(<span class="number">90</span>, <span class="number">100</span>]      <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h1 id="第四步，重命名索引，pandas绘图"><a href="#第四步，重命名索引，pandas绘图" class="headerlink" title="第四步，重命名索引，pandas绘图"></a>第四步，重命名索引，pandas绘图</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin_counts.index = ['<span class="number">0</span>~<span class="number">10</span>', '<span class="number">10</span>~<span class="number">20</span>', '<span class="number">20</span>~<span class="number">30</span>', '<span class="number">30</span>~<span class="number">40</span>', '<span class="number">40</span>~<span class="number">50</span>', '<span class="number">50</span>~<span class="number">60</span>', '<span class="number">60</span>~<span class="number">70</span>',</div><div class="line">                    '<span class="number">70</span>~<span class="number">80</span>', '<span class="number">80</span>~<span class="number">90</span>', '<span class="number">90</span>~<span class="number">100</span>']</div><div class="line">bin_counts.index.name = 'yanzhi'</div><div class="line">bin_counts.plot(kind='bar', alpha=<span class="number">0.5</span>, rot=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-11-02/dist1.png" alt=""></p>
<h1 id="扩展：其它工具绘制"><a href="#扩展：其它工具绘制" class="headerlink" title="扩展：其它工具绘制"></a>扩展：其它工具绘制</h1><h2 id="一，用G2绘制"><a href="#一，用G2绘制" class="headerlink" title="一，用G2绘制"></a>一，用G2绘制</h2><p>G2在之前的文章中有介绍，文章<a href="http://kekefund.com/2016/08/05/pandas-and-g2/" target="_blank" rel="external">《python结合G2绘制精美图形》</a>。</p>
<h3 id="1，生成json数据"><a href="#1，生成json数据" class="headerlink" title="1，生成json数据"></a>1，生成json数据</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">datas = []</div><div class="line"><span class="keyword">for</span> ix, row <span class="keyword">in</span> bin_counts.iterrows():</div><div class="line">    # <span class="keyword">if</span> row[<span class="string">'机构数量'</span>] &gt; <span class="number">0</span>:</div><div class="line">    sss = &#123;<span class="string">'name'</span>: ix, <span class="string">'count'</span>: row[<span class="string">'count'</span>]&#125;</div><div class="line">    datas.append(sss)</div><div class="line">encodejson = json.dumps(datas, ensure_ascii=False)</div><div class="line">f = <span class="built_in">open</span>(<span class="string">'yanzhi.json'</span>, <span class="string">'w'</span>)</div><div class="line">f.<span class="built_in">write</span>(encodejson)</div><div class="line">f.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
<h3 id="2，配置html文件"><a href="#2，配置html文件" class="headerlink" title="2，配置html文件"></a>2，配置html文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分布图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://as.alipayobjects.com/g/datavis/g2-static/0.0.8/doc.css"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--如果不需要jquery ajax 则可以不引入--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://a.alipayobjects.com/jquery/jquery/1.11.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://a.alipayobjects.com/alipay-request/3.0.3/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入 G2 脚本 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://as.alipayobjects.com/g/datavis/g2/1.2.2/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- G2 code start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $.getJSON(<span class="string">'yanzhi.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> Frame = G2.Frame;</div><div class="line">      <span class="keyword">var</span> frame = <span class="keyword">new</span> Frame(data);</div><div class="line">      frame = Frame.combinColumns(frame, [<span class="string">'count'</span>],<span class="string">'count'</span>,<span class="string">'type'</span>,[<span class="string">'name'</span>, <span class="string">'count'</span>]);</div><div class="line">      <span class="keyword">var</span> chart = <span class="keyword">new</span> G2.Chart(&#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">'c1'</span>,</div><div class="line">        <span class="attr">width</span>: <span class="number">600</span>,</div><div class="line">        <span class="attr">height</span>: <span class="number">400</span></div><div class="line">      &#125;);</div><div class="line">      chart.source(frame, &#123;</div><div class="line">        <span class="string">'count'</span>: &#123;<span class="attr">alias</span>: <span class="string">'数量'</span>, <span class="attr">min</span>: <span class="number">0</span>&#125;,</div><div class="line">        <span class="string">'name'</span>: &#123;<span class="attr">alias</span>: <span class="string">'言值分布'</span>, <span class="attr">min</span>: <span class="number">0</span>&#125; </div><div class="line">      &#125;);</div><div class="line">      <span class="comment">// 去除 X 轴标题</span></div><div class="line"><span class="comment">//      chart.axis('name', &#123;</span></div><div class="line"><span class="comment">//        title: null</span></div><div class="line"><span class="comment">//      &#125;);</span></div><div class="line">      chart.legend(<span class="literal">false</span>);<span class="comment">// 不显示图例</span></div><div class="line">      chart.intervalStack().position(<span class="string">'name*count'</span>).color(<span class="string">'type'</span>, [<span class="string">'#348cd1'</span>, <span class="string">'#43b5d8'</span>]); <span class="comment">// 绘制层叠柱状图</span></div><div class="line">      chart.line().position(<span class="string">'name*count'</span>).color(<span class="string">'#5ed470'</span>).size(<span class="number">2</span>).shape(<span class="string">'smooth'</span>); <span class="comment">// 绘制曲线图</span></div><div class="line">      chart.point().position(<span class="string">'name*count'</span>).color(<span class="string">'#5ed470'</span>); <span class="comment">// 绘制点图</span></div><div class="line">      chart.render();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- G2 code end --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3，显示结果"><a href="#3，显示结果" class="headerlink" title="3，显示结果"></a>3，显示结果</h3><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-11-02/dist2.png" alt=""></p>
<h2 id="二、DataFrame密度图"><a href="#二、DataFrame密度图" class="headerlink" title="二、DataFrame密度图"></a>二、DataFrame密度图</h2><p>一句话绘制出来，但具体的区间段难以区分出来。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">"yanzhi"</span>].hist(bins=<span class="number">20</span>, alpha=<span class="number">0.5</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-11-02/dist3.png" alt=""></p>
<h2 id="三、bokeh绘图"><a href="#三、bokeh绘图" class="headerlink" title="三、bokeh绘图"></a>三、bokeh绘图</h2><p>bokeh是python的一个优秀的绘图工具包，与pandas结合的比较好。<a href="http://bokeh.pydata.org/en/latest/docs/gallery/histograms_chart.html" target="_blank" rel="external">bokeh文档</a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from bokeh<span class="selector-class">.charts</span> import Histogram, output_file,show</div><div class="line"></div><div class="line">hist=Histogram(df, values=<span class="string">'yanzhi'</span>,bins=<span class="number">30</span>, title=<span class="string">'分布图'</span>, legend=<span class="string">'top_right'</span>)</div><div class="line"><span class="function"><span class="title">output_file</span><span class="params">(<span class="string">'hist.html'</span>, title=<span class="string">'hist example'</span>)</span></span></div><div class="line"><span class="function"><span class="title">show</span><span class="params">(hist)</span></span></div></pre></td></tr></table></figure>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-11-02/dist4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制作分布图类似密度图，在python中利用pandas来提取分布数据是比较方便的。主要用到pandas的cut和groupby等函数。&lt;/p&gt;
&lt;h1 id=&quot;第一步，从数据库中提取数据&quot;&gt;&lt;a href=&quot;#第一步，从数据库中提取数据&quot; class=&quot;headerlink&quot; title=&quot;第一步，从数据库中提取数据&quot;&gt;&lt;/a&gt;第一步，从数据库中提取数据&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; create_engine&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;host_mysql_test = &lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;port_mysql_test = &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user_mysql_test = &lt;span class=&quot;string&quot;&gt;&#39;admin&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pwd_mysql_test = &lt;span class=&quot;string&quot;&gt;&#39;1234&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;db_name_mysql_test = &lt;span class=&quot;string&quot;&gt;&#39;mydb&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;engine_hq = create_engine(&lt;span class=&quot;string&quot;&gt;&#39;mysql+mysqldb://%s:%s@%s:%d/%s&#39;&lt;/span&gt; % (user_mysql_test,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                              pwd_mysql_test,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                              host_mysql_test,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                              port_mysql_test,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                              &lt;span class=&quot;string&quot;&gt;&#39;hq_db&#39;&lt;/span&gt;), connect_args=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;charset&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sql = &lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM fund_data where quarter&amp;gt;=8 order by yanzhi desc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df = pd.read_sql(sql, engine)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将yanzhi数据转换为百分比&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df[&lt;span class=&quot;string&quot;&gt;&#39;yanzhi&#39;&lt;/span&gt;] = df[&lt;span class=&quot;string&quot;&gt;&#39;yanzhi&#39;&lt;/span&gt;].apply(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.kekefund.com/tags/Python/"/>
    
      <category term="pandas" scheme="http://www.kekefund.com/tags/pandas/"/>
    
      <category term="groupby" scheme="http://www.kekefund.com/tags/groupby/"/>
    
      <category term="g2" scheme="http://www.kekefund.com/tags/g2/"/>
    
      <category term="bokeh" scheme="http://www.kekefund.com/tags/bokeh/"/>
    
      <category term="绘图" scheme="http://www.kekefund.com/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Scrapyd部署</title>
    <link href="http://www.kekefund.com/2016/10/10/scrapyd-deploy/"/>
    <id>http://www.kekefund.com/2016/10/10/scrapyd-deploy/</id>
    <published>2016-10-10T03:10:30.000Z</published>
    <updated>2017-04-19T03:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>scrapy爬虫写好后，需要用命令行运行，如果能在网页上操作就比较方便。scrapyd部署就是为了解决这个问题，能够在网页端查看正在执行的任务，也能新建爬虫任务，和终止爬虫任务，功能比较强大。</p>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1，安装scrapyd"><a href="#1，安装scrapyd" class="headerlink" title="1，安装scrapyd"></a>1，安装scrapyd</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> scrapyd</div></pre></td></tr></table></figure>
<h2 id="2，-安装-scrapyd-deploy"><a href="#2，-安装-scrapyd-deploy" class="headerlink" title="2， 安装 scrapyd-deploy"></a>2， 安装 scrapyd-deploy</h2><a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> scrapyd-<span class="keyword">client</span></div></pre></td></tr></table></figure>
<p>windows系统，在c:\python27\Scripts下生成的是<strong>scrapyd-deploy</strong>，无法直接在命令行里运行scrapd-deploy。<br><strong>解决办法：</strong><br>在c:\python27\Scripts下新建一个scrapyd-deploy.bat，文件内容如下：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">C:<span class="symbol">\P</span>ython27<span class="symbol">\p</span>ython C:<span class="symbol">\P</span>ython27<span class="symbol">\S</span>cripts<span class="symbol">\s</span>crapyd-deploy <span class="variable">%*</span></div></pre></td></tr></table></figure></p>
<p>添加环境变量：C:\Python27\Scripts;</p>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="1，运行scrapyd"><a href="#1，运行scrapyd" class="headerlink" title="1，运行scrapyd"></a>1，运行scrapyd</h2><p>首先切换命令行路径到Scrapy项目的根目录下，<br>要执行以下的命令，需要先在命令行里执行scrapyd，将scrapyd运行起来</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MacBook-Pro:~ usera$ scrapyd</div><div class="line"></div><div class="line">/usr/local/bin/scrapyd:5: UserWarning: Module _markerlib was already imported from /Library/Python/2.7/site-packages/distribute<span class="string">-0</span>.6.49-py2.7.egg/_markerlib/__init__.pyc, but /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python is being added to sys.path</div><div class="line">  from pkg_resources import load_entry_point</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [-] Log opened.</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [-] twistd 15.5.0 (/usr/bin/python 2.7.10) starting up.</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [-] reactor class: twisted.internet.selectreactor.SelectReactor.</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [-] Site starting on 6800</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [-] Starting factory &lt;twisted.web.server.Site instance at 0x102a21518&gt;</div><div class="line">2016<span class="string">-09</span><span class="string">-24</span> 16:00:21<span class="string">+0800</span> [Launcher] Scrapyd 1.1.0 started: max_proc=16, runner='scrapyd.runner'</div></pre></td></tr></table></figure>
<h2 id="2，发布工程到scrapyd"><a href="#2，发布工程到scrapyd" class="headerlink" title="2，发布工程到scrapyd"></a>2，发布工程到scrapyd</h2><h3 id="a，配置scrapy-cfg"><a href="#a，配置scrapy-cfg" class="headerlink" title="a，配置scrapy.cfg"></a>a，配置scrapy.cfg</h3><p>在scrapy.cfg中，取消#url = <a href="http://localhost:6800/前面的“#”，具体如下：" target="_blank" rel="external">http://localhost:6800/前面的“#”，具体如下：</a>,<br>然后在命令行中切换命令至scrapy工程根目录，运行命令：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapyd-deploy <span class="tag">&lt;<span class="name">target</span>&gt;</span> -p <span class="tag">&lt;<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapd-deploy -<span class="selector-tag">p</span> MySpider</div></pre></td></tr></table></figure></p>
<ul>
<li>验证是否发布成功</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scrapyd-deploy -l</div><div class="line"><span class="symbol"></span></div><div class="line">output:</div><div class="line">TS                   http:<span class="comment">//localhost:6800/</span></div></pre></td></tr></table></figure>
<h1 id="一，开始使用"><a href="#一，开始使用" class="headerlink" title="一，开始使用"></a>一，开始使用</h1><h2 id="1，先启动-scrapyd，在命令行中执行："><a href="#1，先启动-scrapyd，在命令行中执行：" class="headerlink" title="1，先启动 scrapyd，在命令行中执行："></a>1，先启动 scrapyd，在命令行中执行：</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyMacBook-Pro:MySpiderProject <span class="keyword">user</span>$ scrapyd</div></pre></td></tr></table></figure>
<h2 id="2，创建爬虫任务"><a href="#2，创建爬虫任务" class="headerlink" title="2，创建爬虫任务"></a>2，创建爬虫任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://localhost:6800/schedule.json <span class="_">-d</span> project=myproject <span class="_">-d</span> spider=spider2</div></pre></td></tr></table></figure>
<ul>
<li>bug：<br>scrapyd deploy shows 0 spiders by scrapyd-client<br>scrapy中有的spider不出现，显示只有0个spiders。</li>
<li>解决<br>需要注释掉settings中的<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># LOG_LEVEL = <span class="string">"ERROR"</span></div><div class="line"># LOG_STDOUT = <span class="literal">True</span></div><div class="line"># LOG_FILE = <span class="string">"/tmp/spider.log"</span></div><div class="line"># LOG_FORMAT = <span class="string">"%(asctime)s [%(name)s] %(levelname)s: %(message)s"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>When setting LOG_STDOUT=True, scrapyd-deploy will return ‘spiders: 0’. Because the output will be redirected to the file when execute ‘scrapy list’, like this: INFO:stdout:spider-name. Soget_spider_list can not parse it correctly.</p>
<h2 id="3，查看爬虫任务"><a href="#3，查看爬虫任务" class="headerlink" title="3，查看爬虫任务"></a>3，查看爬虫任务</h2><p>在网页中输入：<a href="http://localhost:6800/" target="_blank" rel="external">http://localhost:6800/</a></p>
<p>下图为<a href="http://localhost:6800/jobs的内容：" target="_blank" rel="external">http://localhost:6800/jobs的内容：</a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-10-10/scrapyd.png" alt=""></p>
<h2 id="4，运行配置"><a href="#4，运行配置" class="headerlink" title="4，运行配置"></a>4，运行配置</h2><p>配置文件：C:\Python27\Lib\site-packages\scrapyd-1.1.0-py2.7.egg\scrapyd\default_scrapyd.conf</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[scrapyd]</div><div class="line">eggs_dir    = eggs</div><div class="line">logs_dir    = logs</div><div class="line">items_dir   = items</div><div class="line">jobs_to_keep = <span class="number">50</span></div><div class="line">dbs_dir     = dbs</div><div class="line">max_proc    = <span class="number">0</span></div><div class="line">max_proc_per_cpu = <span class="number">4</span></div><div class="line">finished_to_keep = <span class="number">100</span></div><div class="line">poll_interval = <span class="number">5</span></div><div class="line">http_port   = <span class="number">6800</span></div><div class="line">debug       = off</div><div class="line">runner      = scrapyd<span class="selector-class">.runner</span></div><div class="line">application = scrapyd<span class="selector-class">.app</span><span class="selector-class">.application</span></div><div class="line">launcher    = scrapyd<span class="selector-class">.launcher</span><span class="selector-class">.Launcher</span></div><div class="line"></div><div class="line">[services]</div><div class="line">schedule<span class="selector-class">.json</span>     = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.Schedule</span></div><div class="line">cancel<span class="selector-class">.json</span>       = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.Cancel</span></div><div class="line">addversion<span class="selector-class">.json</span>   = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.AddVersion</span></div><div class="line">listprojects<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListProjects</span></div><div class="line">listversions<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListVersions</span></div><div class="line">listspiders<span class="selector-class">.json</span>  = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListSpiders</span></div><div class="line">delproject<span class="selector-class">.json</span>   = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.DeleteProject</span></div><div class="line">delversion<span class="selector-class">.json</span>   = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.DeleteVersion</span></div><div class="line">listjobs<span class="selector-class">.json</span>     = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListJobs</span></div></pre></td></tr></table></figure>
<p>参考</p>
<blockquote>
<p><a href="http://www.cnblogs.com/jinhaolin/p/5033733.html" target="_blank" rel="external">http://www.cnblogs.com/jinhaolin/p/5033733.html</a><br><a href="https://scrapyd.readthedocs.io/en/latest/api.html#cancel-json" target="_blank" rel="external">https://scrapyd.readthedocs.io/en/latest/api.html#cancel-json</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scrapy爬虫写好后，需要用命令行运行，如果能在网页上操作就比较方便。scrapyd部署就是为了解决这个问题，能够在网页端查看正在执行的任务，也能新建爬虫任务，和终止爬虫任务，功能比较强大。&lt;/p&gt;
&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;h2 id=&quot;1，安装scrapyd&quot;&gt;&lt;a href=&quot;#1，安装scrapyd&quot; class=&quot;headerlink&quot; title=&quot;1，安装scrapyd&quot;&gt;&lt;/a&gt;1，安装scrapyd&lt;/h2&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; scrapyd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2，-安装-scrapyd-deploy&quot;&gt;&lt;a href=&quot;#2，-安装-scrapyd-deploy&quot; class=&quot;headerlink&quot; title=&quot;2， 安装 scrapyd-deploy&quot;&gt;&lt;/a&gt;2， 安装 scrapyd-deploy&lt;/h2&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="scrapy" scheme="http://www.kekefund.com/tags/scrapy/"/>
    
      <category term="scrapyd" scheme="http://www.kekefund.com/tags/scrapyd/"/>
    
      <category term="部署" scheme="http://www.kekefund.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Django创建表单上传图片</title>
    <link href="http://www.kekefund.com/2016/08/31/django-forms-update/"/>
    <id>http://www.kekefund.com/2016/08/31/django-forms-update/</id>
    <published>2016-08-31T01:38:40.000Z</published>
    <updated>2017-04-19T03:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>IOS开发中需要为创建的数据保存到网络后台长久存储，刚开始想到的是直接连接mysql，但要在ios中安装mysql的控件，实在是麻烦。于是定义一个restful接口，通过http请求的方式来上传和获取数据，是一种比较方便的方式。<br>本文是基于Django框架，实现以下几个功能：</p>
<ul>
<li>Model和ModelForm创建表单</li>
<li><p>POST上传图片</p>
<a id="more"></a>
<hr>
</li>
</ul>
<h1 id="一、建立Model与mysql连接"><a href="#一、建立Model与mysql连接" class="headerlink" title="一、建立Model与mysql连接"></a>一、建立Model与mysql连接</h1><h2 id="1，定义model"><a href="#1，定义model" class="headerlink" title="1，定义model"></a>1，定义model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># models.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> now</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CureData</span><span class="params">(models.Model)</span>:</span></div><div class="line">    STATUS_SIZES = (</div><div class="line">        (<span class="number">0</span>, <span class="string">'进行中'</span>),</div><div class="line">        (<span class="number">1</span>, <span class="string">'已完成'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    name = models.CharField(<span class="string">'名称'</span>, max_length=<span class="number">50</span>)</div><div class="line">    cureDuration = models.IntegerField(<span class="string">'时长'</span>)</div><div class="line">    create_at = models.DateTimeField(<span class="string">"日期"</span>, default=now())</div><div class="line">    note = models.CharField(<span class="string">'备注'</span>, max_length=<span class="number">200</span>, blank=<span class="keyword">True</span>)</div><div class="line">    image = models.ImageField(<span class="string">'图片'</span>, upload_to=<span class="string">'photos'</span>, blank=<span class="keyword">True</span>)</div><div class="line">    operator = models.CharField(<span class="string">'操作者'</span>, max_length=<span class="number">50</span>, blank=<span class="keyword">True</span>)</div><div class="line">    status = models.IntegerField(<span class="string">'状态'</span>, default=<span class="number">0</span>, choices=STATUS_SIZES) <span class="comment"># 0,进行中; 1,已完成</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = [<span class="string">'create_at'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div></pre></td></tr></table></figure>
<h2 id="2，配置数据库"><a href="#2，配置数据库" class="headerlink" title="2，配置数据库:"></a>2，配置数据库:</h2><p>在工程的settings.py中设置database</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># settings.py</span></div><div class="line"><span class="meta"># Database</span></div><div class="line"><span class="meta"># https://docs.djangoproject.com/en/1.9/ref/settings/#databases</span></div><div class="line"></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'mysite'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'user'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'yourpassword'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3，models-py同步到数据库"><a href="#3，models-py同步到数据库" class="headerlink" title="3，models.py同步到数据库"></a>3，models.py同步到数据库</h2><p>在shell中移到路径到当前工程根目录,执行命令:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> makemigrations mysite</div><div class="line">python manage<span class="selector-class">.py</span> migrate</div></pre></td></tr></table></figure>
<h1 id="二、建立表单"><a href="#二、建立表单" class="headerlink" title="二、建立表单"></a>二、建立表单</h1><h2 id="1-forms-py"><a href="#1-forms-py" class="headerlink" title="1, forms.py"></a>1, forms.py</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> CureData</div><div class="line"></div><div class="line"><span class="keyword">class</span> CureDataImageForm(forms.ModelForm):</div><div class="line"></div><div class="line">    <span class="keyword">class</span> Meta:</div><div class="line">        model = CureData</div><div class="line">        fields = <span class="string">'__all__'</span>  # [<span class="string">'name'</span>, <span class="string">'create_at'</span>,  ...]</div></pre></td></tr></table></figure>
<p>表单中有ImageField，需要在项目的settings.py中添加MEDIA_ROOT路径：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">MEDIA_ROOT</span> = <span class="string">'./Data/media/'</span></div></pre></td></tr></table></figure>
<p>model中定义的image的参数upload_to=’photos’，上传的图片将保存至./Data/meida/photos/目录下。</p>
<h2 id="2-views-py"><a href="#2-views-py" class="headerlink" title="2, views.py"></a>2, views.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mysite.forms <span class="keyword">import</span> CureDataImageForm</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_data</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line"></div><div class="line">        form = CureDataImageForm(request.POST <span class="keyword">or</span> <span class="keyword">None</span>, request.FILES <span class="keyword">or</span> <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> form.is_valid():</div><div class="line">            image = form.save()</div><div class="line">            <span class="keyword">print</span> image.image.url</div><div class="line">  </div><div class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/mysite/success/'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        form = CureDataImageForm()</div><div class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'mysite/data_form.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</div></pre></td></tr></table></figure>
<h2 id="3-urls-py"><a href="#3-urls-py" class="headerlink" title="3, urls.py"></a>3, urls.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysite/urls.py</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, static</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line"></div><div class="line">    url(<span class="string">r'^update_data/$'</span>, views.update_data),</div><div class="line">    url(<span class="string">r'^success/$'</span>, views.success),</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="4-html文件"><a href="#4-html文件" class="headerlink" title="4, html文件"></a>4, html文件</h2><p>views.py中需要的两个html文件放在mysite/templates/mysite/目录下。<br>Form要支持上传图片，需要在form中设置 <strong>enctype=”multipart/form-data”</strong>，不设置的话文件不支持上传。</p>
<p><strong>data_form.html</strong></p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- data_form.html --&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>data update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>data update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.errors %&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span></div><div class="line">            Please correct the error<span class="template-variable">&#123;&#123; form.errors|<span class="name">pluralize</span> &#125;&#125;</span><span class="xml"> below.</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>, <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">            <span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>success.html</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- success.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="三、另一种表单创建方式"><a href="#三、另一种表单创建方式" class="headerlink" title="三、另一种表单创建方式"></a>三、另一种表单创建方式</h1><p>上面创建表单是一种比较简洁的方式，如果不想所有字段保存到数据库，可以用另一种方式：</p>
<h2 id="1，forms-py"><a href="#1，forms-py" class="headerlink" title="1，forms.py"></a>1，forms.py</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django import forms</div><div class="line"><span class="keyword">from</span> django.utils.timezone import now</div><div class="line"></div><div class="line">class CureDataForm(forms.Form):</div><div class="line">    name = forms.CharField(<span class="keyword">label</span><span class="bash">=<span class="string">"名称"</span>)</span></div><div class="line">    cureDuration = forms.IntegerField(<span class="keyword">label</span><span class="bash">=<span class="string">"时长"</span>)</span></div><div class="line">    create_at = forms.DateTimeField(<span class="keyword">label</span><span class="bash">=<span class="string">"创建时间"</span>, initial=now())</span></div><div class="line">    note = forms.CharField(<span class="keyword">label</span><span class="bash">=<span class="string">"备注"</span>, required=False)</span></div><div class="line">    image = forms.FileField(<span class="keyword">label</span><span class="bash">=<span class="string">"图片"</span>, required=False)</span></div><div class="line">    operator = forms.CharField(<span class="keyword">label</span><span class="bash">=<span class="string">"操作者"</span>)</span></div><div class="line">    status = forms.IntegerField(<span class="keyword">label</span><span class="bash">=<span class="string">"状态"</span>)</span></div></pre></td></tr></table></figure>
<h2 id="2-views-py-1"><a href="#2-views-py-1" class="headerlink" title="2, views.py"></a>2, views.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mysite.forms <span class="keyword">import</span> CureDataForm</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_data</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line"></div><div class="line">        form = CureDataForm(request.POST <span class="keyword">or</span> <span class="keyword">None</span>, request.FILES <span class="keyword">or</span> <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> form.is_valid():</div><div class="line">            cd = form.cleaned_data</div><div class="line">            <span class="keyword">print</span> cd</div><div class="line">            <span class="comment"># img_url = form['image']</span></div><div class="line">            <span class="comment"># print img_url</span></div><div class="line">            <span class="comment"># 根据用户提交的注册信息在用户信息表中建立一个新的用户对象</span></div><div class="line">            cureData = CureData.objects.create(</div><div class="line">                name = form.cleaned_data[<span class="string">'name'</span>],</div><div class="line">                cureDuration = form.cleaned_data[<span class="string">'cureDuration'</span>],</div><div class="line">                create_at = form.cleaned_data[<span class="string">'create_at'</span>],</div><div class="line">                note=form.cleaned_data[<span class="string">'note'</span>],</div><div class="line">                image=form.cleaned_data[<span class="string">'image'</span>],</div><div class="line">                operator=form.cleaned_data[<span class="string">'operator'</span>],</div><div class="line">                status=form.cleaned_data[<span class="string">'status'</span>],</div><div class="line">            )</div><div class="line">            cureData.save()</div><div class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/bbcure/success/'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        form = CureDataForm()</div><div class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'bbcure/data_form.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</div></pre></td></tr></table></figure>
<h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p>shell中执行:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8000</span></div></pre></td></tr></table></figure></p>
<p>然后在浏览器中打开<a href="http://0.0.0.0:8000/mysite/update_data/" target="_blank" rel="external">http://0.0.0.0:8000/mysite/update_data/</a></p>
<p>注：mysite为项目名称<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-31/dj1.png" alt=""></p>
<p>提交后，数据库中如下：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-31/dj2.png" alt=""></p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>用Django创建站点很方便，只需很少的代码就能架构出一个功能很复杂的网页。本文只是冰山一角，从表单这一小块阐述Django的快速实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IOS开发中需要为创建的数据保存到网络后台长久存储，刚开始想到的是直接连接mysql，但要在ios中安装mysql的控件，实在是麻烦。于是定义一个restful接口，通过http请求的方式来上传和获取数据，是一种比较方便的方式。&lt;br&gt;本文是基于Django框架，实现以下几个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model和ModelForm创建表单&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST上传图片&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="表单" scheme="http://www.kekefund.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="图片上传" scheme="http://www.kekefund.com/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy结合Redis实现增量爬取</title>
    <link href="http://www.kekefund.com/2016/08/24/scrapy-redis-increment/"/>
    <id>http://www.kekefund.com/2016/08/24/scrapy-redis-increment/</id>
    <published>2016-08-24T07:55:31.000Z</published>
    <updated>2017-04-19T03:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scrapy适合做全量爬取，但是，我们不是一次抓取完就完事了。很多情况，我们需要持续的跟进抓取的站点，增量抓取是最需要的。<br>Scrapy与Redis配合，在写入数据库之前，做唯一性过滤，实现增量爬取。</p>
<hr>
<h1 id="一、官方的去重Pipeline"><a href="#一、官方的去重Pipeline" class="headerlink" title="一、官方的去重Pipeline"></a>一、官方的去重Pipeline</h1><p>官方文档中有一个去重的过滤器:<br><a id="more"></a></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from scrapy.exceptions import DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuplicatesPipeline</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.ids_seen = set()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span>:</div><div class="line">        <span class="keyword">if</span> item[<span class="string">'id'</span>] <span class="keyword">in</span> <span class="keyword">self</span>.<span class="symbol">ids_seen:</span></div><div class="line">            raise DropItem(<span class="string">"Duplicate item found: %s"</span> % item)</div><div class="line">        <span class="symbol">else:</span></div><div class="line">            <span class="keyword">self</span>.ids_seen.add(item[<span class="string">'id'</span>])</div><div class="line">            <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>官方的这个过滤器的缺陷是只能确保单次抓取不间断的情况下去重，因为其数据是保存在内存中的，当一个爬虫任务跑完后程序结束，内存就清理掉了。再次运行时就失效了。</p>
<h1 id="二、基于Redis的去重Pipeline"><a href="#二、基于Redis的去重Pipeline" class="headerlink" title="二、基于Redis的去重Pipeline"></a>二、基于Redis的去重Pipeline</h1><p>为了能够多次爬取时去重，我们考虑用Redis，其快速的键值存取，对管道处理数据不会产生多少延时。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pipelines.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> redis</div><div class="line">redis_db = redis.Redis(host=settings.REDIS_HOST, port=<span class="number">6379</span>, db=<span class="number">4</span>, password=settings.REDIS_PWD)</div><div class="line">redis_data_dict = <span class="string">"f_uuids"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuplicatePipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    去重(redis)</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> redis_db.hlen(redis_data_dict) == <span class="number">0</span>:</div><div class="line">            sql = <span class="string">"SELECT uuid FROM f_data"</span></div><div class="line">            df = pd.read_sql(sql, engine)</div><div class="line">            <span class="keyword">for</span> uuid <span class="keyword">in</span> df[<span class="string">'uuid'</span>].get_values():</div><div class="line">                redis_db.hset(redis_data_dict, uuid, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> redis_db.hexists(redis_data_dict, item[<span class="string">'uuid'</span>]):</div><div class="line">             <span class="keyword">raise</span> DropItem(<span class="string">"Duplicate item found:%s"</span> % item)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<ol>
<li>首先，我们定义一个redis实例: redis_db和redis key：redis_data_dict。</li>
<li>在DuplicatePipeline的初始化函数<strong>init</strong>()中，对redis的key值做了初始化。当然，这步不是必须的，你可以不用实现。</li>
<li>在process_item函数中，判断redis的hash表中存在该值uuid，则为重复item。<br>至于redis中为什么没有用list而用hash？ 主要是因为速度，hash判断uuid是否存在比list快好几个数据级。<br>特别是uuid的数据达到100w+时，hash的hexists函数速度优势更明显。</li>
</ol>
<p>最后别忘了在settings.py中加上：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Configure item pipelines</div><div class="line"># See http:<span class="comment">//scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></div><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="string">'fund_spider.pipelines.DuplicatePipeline'</span>: <span class="number">200</span>,</div><div class="line">     #<span class="string">'fund_spider.pipelines.MySQLStorePipeline'</span>: <span class="number">300</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>本文不是真正意义上的增量爬取，而只是在数据存储环节，对数据唯一性作了处理，当然，这样已经满足了大部分的需求。<br>后续我会实现不需要遍历所有的网页，判断抓取到所有最新的item，就停止抓取。敬请关注！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scrapy适合做全量爬取，但是，我们不是一次抓取完就完事了。很多情况，我们需要持续的跟进抓取的站点，增量抓取是最需要的。&lt;br&gt;Scrapy与Redis配合，在写入数据库之前，做唯一性过滤，实现增量爬取。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一、官方的去重Pipeline&quot;&gt;&lt;a href=&quot;#一、官方的去重Pipeline&quot; class=&quot;headerlink&quot; title=&quot;一、官方的去重Pipeline&quot;&gt;&lt;/a&gt;一、官方的去重Pipeline&lt;/h1&gt;&lt;p&gt;官方文档中有一个去重的过滤器:&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Scrapy" scheme="http://www.kekefund.com/tags/Scrapy/"/>
    
      <category term="Redis" scheme="http://www.kekefund.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>【IOS开发】WKWebView封装APP</title>
    <link href="http://www.kekefund.com/2016/08/09/ios-wkwebview/"/>
    <id>http://www.kekefund.com/2016/08/09/ios-wkwebview/</id>
    <published>2016-08-09T03:11:54.000Z</published>
    <updated>2017-04-07T06:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>一年多没接触xcode了，这一年主要用python做开发，刹一接触xcode代码，还是有点陌生的感觉。在网上闲逛了一通，发现网上的ios教程用swift编写的比oc的多多了。看来苹果的swift推广的比较好。我偶尔写写简单的app，objective-c用过一段时间，这次还是用oc，swift等有时间了好好研究一下。<br>前段时间有朋友让做一个ipad程序，用webview封装一个网站，实现一个独立的app应用。<br>功能虽然简单，实现起来发现ios开发的好些功能都有涉及，丢了一年的ios开发中的概念捡起来不易，于是记录下来，以免后面重复造轮子时又忘了。</p>
<p><strong>主要功能介绍：</strong></p>
<ul>
<li>自适应iphone和ipad</li>
<li>屏幕翻转自适应拉伸</li>
<li>自定义导航栏返回按钮</li>
<li>网页加载进度条显示</li>
<li>主屏幕左滑后退</li>
</ul>
<a id="more"></a>
<p>以创建app的流程来编写。</p>
<h1 id="一、新建工程"><a href="#一、新建工程" class="headerlink" title="一、新建工程"></a>一、新建工程</h1><h2 id="1，新建一个Single-View-Application。"><a href="#1，新建一个Single-View-Application。" class="headerlink" title="1，新建一个Single View Application。"></a>1，新建一个Single View Application。</h2><p>依次点击 File -&gt; New -&gt; Project，选择IOS-&gt;Application-&gt;Single View Application。<br> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios1.png" alt=""></p>
<p>点击Next，设置程序名称和组织名称和标识，选择开发语言为Objective-C，支持设备为Universal（iphone和ipad都支持），其它默认。<br> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios2.png" alt=""><br>点击Next，Create项目。</p>
<h2 id="2，程序目录结构"><a href="#2，程序目录结构" class="headerlink" title="2，程序目录结构"></a>2，程序目录结构</h2><h3 id="a-默认生成的目录结构如下："><a href="#a-默认生成的目录结构如下：" class="headerlink" title="a, 默认生成的目录结构如下："></a>a, 默认生成的目录结构如下：</h3><p> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios3.png" alt=""></p>
<h3 id="b，storyboard"><a href="#b，storyboard" class="headerlink" title="b，storyboard"></a>b，storyboard</h3><p>程序默认创建的Main.storyboard中有一个ViewController，本程序需要导航栏，先拖一个Navigation Controller到storyboard中<br> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios4.png" alt=""></p>
<p>删除默认的TableViewController，将Navigation Controller和View Controller关联，拖动首启动箭头从View Controller到Navigation Controller。<br> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios5.png" alt=""></p>
<h1 id="二，代码实现"><a href="#二，代码实现" class="headerlink" title="二，代码实现"></a>二，代码实现</h1><p>浏览器用WKWebView。ViewController头文件如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ViewController.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="keyword">@import</span> WebKit;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span>&lt;<span class="title">WKUIDelegate</span>, <span class="title">WKNavigationDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="built_in">WKWebView</span> *webView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h2 id="1，WKUIDelegate委托"><a href="#1，WKUIDelegate委托" class="headerlink" title="1，WKUIDelegate委托"></a>1，WKUIDelegate委托</h2><p>WKWebView默认只能访问https开头的网站，为了能够支持http开头的普通网站，实现下面的委托方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - WKUIDelegate</span></div><div class="line"><span class="comment">//系统阻止了不安全的连接</span></div><div class="line">- (<span class="built_in">WKWebView</span> *)webView:(<span class="built_in">WKWebView</span> *)webView createWebViewWithConfiguration:(<span class="built_in">WKWebViewConfiguration</span> *)configuration forNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction windowFeatures:(<span class="built_in">WKWindowFeatures</span> *)windowFeatures</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!navigationAction.targetFrame.isMainFrame) &#123;</div><div class="line">        </div><div class="line">        [webView loadRequest:navigationAction.request];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2，WKNavigationDelegate委托"><a href="#2，WKNavigationDelegate委托" class="headerlink" title="2，WKNavigationDelegate委托"></a>2，WKNavigationDelegate委托</h2><p>didFinishNavigation方法主要作用用来更新导航栏的显示。updateNavigationItems在后续讲解导航栏时介绍。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - WKNavigationDelegate</span></div><div class="line"><span class="comment">//页面已全部加载</span></div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation &#123;</div><div class="line">    [<span class="keyword">self</span> updateNavigationItems];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3，自定义导航栏"><a href="#3，自定义导航栏" class="headerlink" title="3，自定义导航栏"></a>3，自定义导航栏</h2><p>定义变量<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIBarButtonItem</span> *navigationBackBarButtonItem;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIBarButtonItem</span> *navigationRefresheBarButtonItem;</div></pre></td></tr></table></figure></p>
<p>创建函数如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 导航按钮</span></div><div class="line"></div><div class="line"><span class="comment">//自定义返回按钮</span></div><div class="line">- (<span class="built_in">UIBarButtonItem</span> *)navigationBackBarButtonItem &#123;</div><div class="line">    <span class="keyword">if</span> (_navigationBackBarButtonItem) <span class="keyword">return</span> _navigationBackBarButtonItem;</div><div class="line">    <span class="built_in">UIImage</span>* backItemImage = [[[<span class="built_in">UINavigationBar</span> appearance] backIndicatorImage] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysTemplate</span>]?:[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"backItemImage"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysTemplate</span>];</div><div class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(backItemImage.size, <span class="literal">NO</span>, backItemImage.scale);</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, backItemImage.size.height);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">    <span class="built_in">CGContextSetBlendMode</span>(context, kCGBlendModeNormal);</div><div class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, backItemImage.size.width, backItemImage.size.height);</div><div class="line">    <span class="built_in">CGContextClipToMask</span>(context, rect, backItemImage.CGImage);</div><div class="line">    [[<span class="keyword">self</span>.navigationController.navigationBar.tintColor colorWithAlphaComponent:<span class="number">0.5</span>] setFill];</div><div class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);</div><div class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line">    <span class="built_in">UIImage</span>* backItemHlImage = newImage?:[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"backItemImage-hl"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysTemplate</span>];</div><div class="line">    <span class="built_in">UIButton</span>* backButton = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> *attr = [[<span class="built_in">UIBarButtonItem</span> appearance] titleTextAttributesForState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line"></div><div class="line">     </div><div class="line">   [backButton setAttributedTitle:[[<span class="built_in">NSAttributedString</span> alloc] initWithString:<span class="string">@"返回"</span> attributes:attr] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    <span class="built_in">UIOffset</span> offset = [[<span class="built_in">UIBarButtonItem</span> appearance] backButtonTitlePositionAdjustmentForBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div><div class="line">    backButton.titleEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(offset.vertical, offset.horizontal, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    backButton.imageEdgeInsets = <span class="built_in">UIEdgeInsetsMake</span>(offset.vertical, offset.horizontal, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">   </div><div class="line">    [backButton setImage:backItemImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [backButton setImage:backItemHlImage forState:<span class="built_in">UIControlStateHighlighted</span>];</div><div class="line">    [backButton sizeToFit];</div><div class="line">    </div><div class="line">    [backButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(toBack) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    _navigationBackBarButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:backButton];</div><div class="line">    <span class="keyword">return</span> _navigationBackBarButtonItem;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//刷新按钮</span></div><div class="line">- (<span class="built_in">UIBarButtonItem</span> *)navigationRefreshBarButtonItem &#123;</div><div class="line">    <span class="keyword">if</span> (_navigationCloseBarButtonItem) <span class="keyword">return</span> _navigationCloseBarButtonItem;</div><div class="line">      </div><div class="line">   _navigationCloseBarButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="string">@"刷新"</span> style:<span class="number">0</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(navigationIemHandleRefresh:)];</div><div class="line">    <span class="keyword">return</span> _navigationCloseBarButtonItem;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按钮点击响应函数<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)toBack&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.webView canGoBack])&#123;</div><div class="line">        [<span class="keyword">self</span>.webView goBack];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)navigationIemHandleRefresh:(<span class="built_in">UIBarButtonItem</span> *)sender &#123;</div><div class="line"><span class="comment">//    [self.navigationController popViewControllerAnimated:YES];</span></div><div class="line"><span class="comment">//    [self dismissViewControllerAnimated:YES completion:NULL];</span></div><div class="line">    [<span class="keyword">self</span>.webView reload];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调度函数，由WKNavigationDelegate调起<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)updateNavigationItems &#123;</div><div class="line">    [<span class="keyword">self</span>.navigationItem setLeftBarButtonItems:<span class="literal">nil</span> animated:<span class="literal">NO</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.webView.canGoBack) &#123;<span class="comment">// Web view can go back means a lot requests exist.</span></div><div class="line">        <span class="built_in">UIBarButtonItem</span> *spaceButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:<span class="built_in">UIBarButtonSystemItemFixedSpace</span> target:<span class="literal">nil</span> action:<span class="literal">nil</span>];</div><div class="line">        spaceButtonItem.width = <span class="number">-6.5</span>;</div><div class="line">        <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count == <span class="number">1</span>) &#123;</div><div class="line">            [<span class="keyword">self</span>.navigationItem setLeftBarButtonItems:@[spaceButtonItem, <span class="keyword">self</span>.navigationBackBarButtonItem, <span class="keyword">self</span>. navigationRefreshBarButtonItem] animated:<span class="literal">NO</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span>.navigationItem setLeftBarButtonItems:@[<span class="keyword">self</span>. navigationRefreshBarButtonItem] animated:<span class="literal">NO</span>];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.enabled = <span class="literal">YES</span>;</div><div class="line">        [<span class="keyword">self</span>.navigationItem setLeftBarButtonItems:<span class="literal">nil</span> animated:<span class="literal">NO</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="4，进度条"><a href="#4，进度条" class="headerlink" title="4，进度条"></a>4，进度条</h2><p>定义变量<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="built_in">UIProgressView</span> *progressView;</div><div class="line"></div><div class="line">- (<span class="built_in">UIProgressView</span> *)progressView &#123;</div><div class="line">    <span class="keyword">if</span> (_progressView) <span class="keyword">return</span> _progressView;</div><div class="line">    <span class="built_in">CGFloat</span> progressBarHeight = <span class="number">2.0</span>f;</div><div class="line">    <span class="built_in">CGRect</span> navigationBarBounds = <span class="keyword">self</span>.navigationController.navigationBar.bounds;</div><div class="line">    <span class="built_in">CGRect</span> barFrame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, navigationBarBounds.size.height - progressBarHeight, navigationBarBounds.size.width, progressBarHeight);</div><div class="line">    _progressView = [[<span class="built_in">UIProgressView</span> alloc] initWithFrame:barFrame];</div><div class="line">    _progressView.trackTintColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    _progressView.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleWidth</span> | <span class="built_in">UIViewAutoresizingFlexibleTopMargin</span>;</div><div class="line">    <span class="keyword">return</span> _progressView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加到View<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>viewWillAppear:<span class="params">(BOOL)</span>animated&#123;</div><div class="line">    ...</div><div class="line">    [self.navigationController.navigationBar addSubview:self.progressView];</div><div class="line">     ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5，键值观察（Key-value-observing-KVO）"><a href="#5，键值观察（Key-value-observing-KVO）" class="headerlink" title="5，键值观察（Key-value observing,  KVO）"></a>5，键值观察（Key-value observing,  KVO）</h2><p>KVO允许一个对象观察另一个对象的属性。该属性值改变时，会通知观察对象。与NSNotificationCenter通知相似，多个KVO观察者可以观察单一属性。此外，KVO更动态，因为它允许对象观察任意属性，而不需任何新的API。</p>
<p>在viewDidLoad函数中添加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.webView <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"estimatedProgress"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</div><div class="line">[self.webView <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"title"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</div></pre></td></tr></table></figure></p>
<p>定义键值变化的响应代码<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">observeValueForKeyPath:</span>(NSString *)keyPath <span class="string">ofObject:</span>(id)object <span class="string">change:</span>(NSDictionary&lt;NSString *,id&gt; *)change <span class="string">context:</span>(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath <span class="string">isEqualToString:</span>@<span class="string">"estimatedProgress"</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (object == self.webView)&#123;</div><div class="line">            [self.progressView <span class="string">setAlpha:</span><span class="number">1.0</span>f];</div><div class="line">            [self.progressView <span class="string">setProgress:</span>self.webView.estimatedProgress];</div><div class="line">            <span class="keyword">if</span> (self.webView.estimatedProgress &gt;= <span class="number">1.0</span>f)&#123;</div><div class="line">                [UIView <span class="string">animateWithDuration:</span><span class="number">0.3</span> <span class="string">delay:</span><span class="number">0.3</span> <span class="string">options:</span>UIViewAnimationOptionCurveEaseIn <span class="string">animations:</span>^&#123;</div><div class="line">                    [self.progressView <span class="string">setAlpha:</span><span class="number">0.0</span>f];</div><div class="line">                &#125;<span class="string">completion:</span>^(BOOL finished)&#123;</div><div class="line">                    [self.progressView <span class="string">setProgress:</span><span class="number">0.0</span>f];</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            [<span class="keyword">super</span> <span class="string">observeValueForKeyPath:</span>keyPath <span class="string">ofObject:</span>object <span class="string">change:</span>change <span class="string">context:</span>context];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([keyPath <span class="string">isEqualToString:</span>@<span class="string">"title"</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (object == self.webView)&#123;</div><div class="line">            self.title = self.webView.title;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            [<span class="keyword">super</span> <span class="string">observeValueForKeyPath:</span>keyPath <span class="string">ofObject:</span>object <span class="string">change:</span>change <span class="string">context:</span>context];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>别忘了在程序退出时注销键值观察<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">viewWillDisappear:</span>(BOOL)animated&#123;</div><div class="line">    [self.webView <span class="string">removeObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"estimatedProgress"</span>];</div><div class="line">    [self.webView <span class="string">removeObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"title"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="三，总结"><a href="#三，总结" class="headerlink" title="三，总结"></a>三，总结</h1><p>程序运行效果如下：<br> <img src="http://7xo67b.com1.z0.glb.clouddn.com/2016-08-09/ios6.png" alt=""></p>
<p>IOS开发的流程比较清晰明了，实现界面现在都可以在storyboard中拖拽实现，真正需要代码实现的是一些界面之外的逻辑流程，都可以按模块来各自实现。理解透了，开发起来是比较顺手的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年多没接触xcode了，这一年主要用python做开发，刹一接触xcode代码，还是有点陌生的感觉。在网上闲逛了一通，发现网上的ios教程用swift编写的比oc的多多了。看来苹果的swift推广的比较好。我偶尔写写简单的app，objective-c用过一段时间，这次还是用oc，swift等有时间了好好研究一下。&lt;br&gt;前段时间有朋友让做一个ipad程序，用webview封装一个网站，实现一个独立的app应用。&lt;br&gt;功能虽然简单，实现起来发现ios开发的好些功能都有涉及，丢了一年的ios开发中的概念捡起来不易，于是记录下来，以免后面重复造轮子时又忘了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要功能介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自适应iphone和ipad&lt;/li&gt;
&lt;li&gt;屏幕翻转自适应拉伸&lt;/li&gt;
&lt;li&gt;自定义导航栏返回按钮&lt;/li&gt;
&lt;li&gt;网页加载进度条显示&lt;/li&gt;
&lt;li&gt;主屏幕左滑后退&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://www.kekefund.com/categories/IOS/"/>
    
    
      <category term="IOS开发" scheme="http://www.kekefund.com/tags/IOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Objective-C" scheme="http://www.kekefund.com/tags/Objective-C/"/>
    
      <category term="WKWebView" scheme="http://www.kekefund.com/tags/WKWebView/"/>
    
      <category term="XCode" scheme="http://www.kekefund.com/tags/XCode/"/>
    
  </entry>
  
</feed>
