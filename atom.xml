<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KeKeFund</title>
  <subtitle>金融 · Python · 技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kekefund.com/"/>
  <updated>2019-09-01T09:28:39.875Z</updated>
  <id>http://www.kekefund.com/</id>
  
  <author>
    <name>Binger Chen</name>
    <email>cbbing@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jenkins 更换主目录</title>
    <link href="http://www.kekefund.com/2019/09/01/jenkins-change-pwd/"/>
    <id>http://www.kekefund.com/2019/09/01/jenkins-change-pwd/</id>
    <published>2019-09-01T09:26:59.000Z</published>
    <updated>2019-09-01T09:28:39.875Z</updated>
    
    <content type="html"><![CDATA[<p>步骤如下：</p>
<h1 id="1，停止jinkens"><a href="#1，停止jinkens" class="headerlink" title="1，停止jinkens"></a>1，停止jinkens</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service jenkins <span class="built_in">stop</span></div></pre></td></tr></table></figure>
<h1 id="2-修改jenkins配置文件"><a href="#2-修改jenkins配置文件" class="headerlink" title="2, 修改jenkins配置文件"></a>2, 修改jenkins配置文件</h1><p>vim /etc/sysconfig/jenkins，修改JENKINS_HOME</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">## Description: Jenkins Automation Server</span></div><div class="line"><span class="meta">## Type: string</span></div><div class="line"><span class="meta">## Default: "/var/lib/jenkins"</span></div><div class="line"><span class="meta">## ServiceRestart: jenkins</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Directory where Jenkins store its configuration and working</span></div><div class="line"><span class="meta"># files (checkouts, build reports, artifacts, ...).</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#JENKINS_HOME="/var/lib/jenkins"</span></div><div class="line">JENKINS_HOME=<span class="string">"/mydata/jenkins/jenkins"</span></div><div class="line"> </div><div class="line"><span class="meta">## Type: string</span></div><div class="line"><span class="meta">## Default: ""</span></div><div class="line"><span class="meta">## ServiceRestart: jenkins</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Java executable to run Jenkins</span></div><div class="line"><span class="meta"># When left empty, we'll try to find the suitable Java.</span></div><div class="line"><span class="meta">#</span></div><div class="line">JENKINS_JAVA_CMD=<span class="string">""</span></div><div class="line"> </div><div class="line"><span class="meta">## Type: string</span></div><div class="line"><span class="meta">## Default: "jenkins"</span></div><div class="line"><span class="meta">## ServiceRestart: jenkins</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Unix user account that runs the Jenkins daemon</span></div><div class="line"><span class="meta"># Be careful when you change this, as you need to update</span></div><div class="line"><span class="meta"># permissions of $JENKINS_HOME and /var/log/jenkins.</span></div><div class="line"><span class="meta">#</span></div><div class="line">JENKINS_USER=<span class="string">"jenkins"</span></div></pre></td></tr></table></figure>
<h1 id="3，拷贝-var-lib-jenkins到新目录"><a href="#3，拷贝-var-lib-jenkins到新目录" class="headerlink" title="3，拷贝/var/lib/jenkins到新目录"></a>3，拷贝/var/lib/jenkins到新目录</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -af /var/<span class="class"><span class="keyword">lib</span>/<span class="title">jenkins</span>/* /<span class="title">mydata</span>/<span class="title">jenkins</span>/<span class="title">dataspace</span></span></div></pre></td></tr></table></figure>
<p>保持jenkins的用户权限</p>
<h1 id="4，重启jenkins"><a href="#4，重启jenkins" class="headerlink" title="4，重启jenkins"></a>4，重启jenkins</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service jenkins <span class="literal">start</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://blog.csdn.net/u013066244/article/details/70884952" target="_blank" rel="external">https://blog.csdn.net/u013066244/article/details/70884952</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;步骤如下：&lt;/p&gt;
&lt;h1 id=&quot;1，停止jinkens&quot;&gt;&lt;a href=&quot;#1，停止jinkens&quot; class=&quot;headerlink&quot; title=&quot;1，停止jinkens&quot;&gt;&lt;/a&gt;1，停止jinkens&lt;/h1&gt;&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Jenkins" scheme="http://www.kekefund.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>【DevOps】第3步:中控平台jenkins</title>
    <link href="http://www.kekefund.com/2019/09/01/devops-step3-controller/"/>
    <id>http://www.kekefund.com/2019/09/01/devops-step3-controller/</id>
    <published>2019-09-01T08:23:32.000Z</published>
    <updated>2019-09-01T09:23:18.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一，安装"><a href="#一，安装" class="headerlink" title="一，安装"></a>一，安装</h1><h2 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h2><p>以centos7为例</p>
<h3 id="1-安装-添加yum-repos，然后安装"><a href="#1-安装-添加yum-repos，然后安装" class="headerlink" title="1, 安装 添加yum repos，然后安装"></a>1, 安装 添加yum repos，然后安装</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo wget -O /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/jenkins<span class="selector-class">.repo</span> http:<span class="comment">//pkg.jenkins-ci.org/redhat/jenkins.repo</span></div><div class="line">sudo rpm --import https:<span class="comment">//jenkins-ci.org/redhat/jenkins-ci.org.key</span></div><div class="line">sudo yum install jenkins</div></pre></td></tr></table></figure>
<h3 id="2-如果没有java的话要安装java"><a href="#2-如果没有java的话要安装java" class="headerlink" title="2, 如果没有java的话要安装java"></a>2, 如果没有java的话要安装java</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum <span class="keyword">install</span> <span class="keyword">java</span></div></pre></td></tr></table></figure>
<h3 id="3-启动和停止"><a href="#3-启动和停止" class="headerlink" title="3. 启动和停止"></a>3. 启动和停止</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service jenkins <span class="built_in">start</span>/<span class="built_in">stop</span>/restart</div><div class="line">sudo chkconfig jenkins <span class="keyword">on</span>  #开机自启动</div></pre></td></tr></table></figure>
<h3 id="4-更换主目录"><a href="#4-更换主目录" class="headerlink" title="4. 更换主目录"></a>4. 更换主目录</h3><p>参考：jenkins 更换主目录.md</p>
<h2 id="容器安装"><a href="#容器安装" class="headerlink" title="容器安装"></a>容器安装</h2><p>jenkins官方镜像:<a href="https://hub.docker.com/_/jenkins，选择合适的tag。" target="_blank" rel="external">https://hub.docker.com/_/jenkins，选择合适的tag。</a></p>
<p>创建docker-compose.yml文件：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">version</span>: <span class="string">'2'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">jenkins</span>:</div><div class="line">    <span class="attribute">image</span>: jenkins/<span class="attribute">jenkins</span>:<span class="number">2.168</span>-alpine</div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">        - ./<span class="attribute">jenkins_data</span>:/var/jenkins_home</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"8080:8080"</span></div><div class="line">    <span class="attribute">restart</span>: always</div></pre></td></tr></table></figure>
<p>volumes: 配置是将jenkins文件夹挂载在宿主机，做持久化处理。<br>ports: 将jenkins容器的8080端口映射至主机的8080端口<br>restart: 自动重启<br>注意：宿主机jenkins_data目录需要给读写权限</p>
<h1 id="二、访问"><a href="#二、访问" class="headerlink" title="二、访问"></a>二、访问</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//localhost:8080/</span></div></pre></td></tr></table></figure>
<p>第一次访问：<br><img src="http://pic.cbbing.com/jenkins01.png" alt=""></p>
<p>在服务器上的/var/lib/jenkins/secrets/initialAdminPassword 处拷贝初始密码，继续。</p>
<p>安装插件：<br><img src="http://pic.cbbing.com/jenkins02.png" alt=""><br>完成<br><img src="http://pic.cbbing.com/jenkins03.png" alt=""></p>
<h1 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h1><h2 id="1，配置凭据"><a href="#1，配置凭据" class="headerlink" title="1，配置凭据"></a>1，配置凭据</h2><p>配置访问远程服务器的账号密码<br><img src="http://pic.cbbing.com/jenkins04.png" alt=""></p>
<h2 id="2，配置远程服务器"><a href="#2，配置远程服务器" class="headerlink" title="2，配置远程服务器"></a>2，配置远程服务器</h2><p>Jenkins-&gt; 配置-&gt;系统配置<br><img src="http://pic.cbbing.com/jenkins05.png" alt=""></p>
<blockquote>
<p>注：需安装SSH Plugin插件，才会有SSH remote hosts这一项。</p>
</blockquote>
<h2 id="3，配置Job信息"><a href="#3，配置Job信息" class="headerlink" title="3，配置Job信息"></a>3，配置Job信息</h2><p>参考<a href="http://kekefund.com/2018/08/29/jenkins-jobs/" target="_blank" rel="external">批量创建Job</a></p>
<h2 id="4，授权子用户"><a href="#4，授权子用户" class="headerlink" title="4，授权子用户"></a>4，授权子用户</h2><p>安装插件：<a href="https://wiki.jenkins.io/display/JENKINS/Role+Strategy+Plugin" target="_blank" rel="external">Role-based Authorization Strategy</a></p>
<p>jenkins-&gt;全局安全设置：<br><img src="http://pic.cbbing.com/jenkins06.png" alt=""></p>
<p>改为Role-Based Stategy<br>系统管理中会出现【Manage and Assign Roles】选项，点击进入<br><img src="http://pic.cbbing.com/jenkins07.png" alt=""></p>
<blockquote>
<p>参考：<a href="http://blog.51cto.com/zengestudy/1782494" target="_blank" rel="external">http://blog.51cto.com/zengestudy/1782494</a></p>
</blockquote>
<h1 id="四、Job任务创建示例"><a href="#四、Job任务创建示例" class="headerlink" title="四、Job任务创建示例"></a>四、Job任务创建示例</h1><h2 id="1，新建项目"><a href="#1，新建项目" class="headerlink" title="1，新建项目"></a>1，新建项目</h2><p><img src="http://pic.cbbing.com/jenkins08.png" alt=""></p>
<h2 id="2，配置"><a href="#2，配置" class="headerlink" title="2，配置"></a>2，配置</h2><ul>
<li>源码管理</li>
</ul>
<p><img src="http://pic.cbbing.com/jenkins09.png" alt=""></p>
<ul>
<li>构建触发器<br><img src="http://pic.cbbing.com/jenkins10.png" alt=""></li>
</ul>
<p>Poll SCM 配置为每半小时扫描一次源码变动。</p>
<ul>
<li>构建<br><img src="http://pic.cbbing.com/jenkins11.png" alt=""></li>
</ul>
<h1 id="五、主从节点设置"><a href="#五、主从节点设置" class="headerlink" title="五、主从节点设置"></a>五、主从节点设置</h1><p>系统管理-&gt;管理节点-&gt; 新建节点<br><img src="http://pic.cbbing.com/jenkins12.png" alt=""></p>
<p>创建好的节点列表如下：<br><img src="http://pic.cbbing.com/jenkins13.png" alt=""></p>
<h1 id="六、job配置备份"><a href="#六、job配置备份" class="headerlink" title="六、job配置备份"></a>六、job配置备份</h1><p>安装插件：<a href="https://wiki.jenkins.io/display/JENKINS/thinBackup" target="_blank" rel="external">ThinBackup</a><br>安装完成后在系统管理列表下方会出现ThinBackup的图标。点击进入后有3个选项：</p>
<ul>
<li>Backup Now<ul>
<li>Restore</li>
<li>Settings</li>
</ul>
</li>
</ul>
<p>要做到自动备份，就在Settings中修改：<br><img src="http://pic.cbbing.com/jenkins14.png" alt=""></p>
<h1 id="七、问题解决"><a href="#七、问题解决" class="headerlink" title="七、问题解决"></a>七、问题解决</h1><h2 id="1-出现报错"><a href="#1-出现报错" class="headerlink" title="1,出现报错"></a>1,出现报错</h2><ul>
<li>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post </li>
</ul>
<p>权限问题，执行如下命令：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">1183</span>  <span class="selector-tag">2018-03-20</span> <span class="selector-tag">00</span><span class="selector-pseudo">:32</span><span class="selector-pseudo">:26</span> <span class="selector-tag">sudo</span> <span class="selector-tag">usermod</span> <span class="selector-tag">-a</span> <span class="selector-tag">-G</span> <span class="selector-tag">root</span> <span class="selector-tag">jenkins</span></div><div class="line"> <span class="selector-tag">1184</span>  <span class="selector-tag">2018-03-20</span> <span class="selector-tag">00</span><span class="selector-pseudo">:32</span><span class="selector-pseudo">:33</span> <span class="selector-tag">sudo</span> <span class="selector-tag">service</span> <span class="selector-tag">jenkins</span> <span class="selector-tag">restart</span></div><div class="line"> <span class="selector-tag">1185</span>  <span class="selector-tag">2018-03-20</span> <span class="selector-tag">00</span><span class="selector-pseudo">:34</span><span class="selector-pseudo">:29</span> <span class="selector-tag">chmod</span> <span class="selector-tag">664</span> /<span class="selector-tag">var</span>/<span class="selector-tag">run</span>/<span class="selector-tag">docker</span><span class="selector-class">.sock</span></div><div class="line"> <span class="selector-tag">1186</span>  <span class="selector-tag">2018-03-20</span> <span class="selector-tag">00</span><span class="selector-pseudo">:34</span><span class="selector-pseudo">:56</span> <span class="selector-tag">chmod</span> <span class="selector-tag">777</span> /<span class="selector-tag">var</span>/<span class="selector-tag">run</span>/<span class="selector-tag">docker</span><span class="selector-class">.sock</span></div><div class="line"> <span class="selector-tag">1187</span>  <span class="selector-tag">2018-03-20</span> <span class="selector-tag">00</span><span class="selector-pseudo">:35</span><span class="selector-pseudo">:04</span> <span class="selector-tag">sudo</span> <span class="selector-tag">service</span> <span class="selector-tag">jenkins</span> <span class="selector-tag">restart</span></div></pre></td></tr></table></figure></p>
<p>或者</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_32_86_centos fof_api]<span class="comment"># usermod -a -G root jenkins</span></div><div class="line">[root@VM_32_86_centos fof_api]<span class="comment"># usermod -a -G docker jenkins</span></div><div class="line">[root@VM_32_86_centos fof_api]<span class="comment"># sudo service jenkins restart</span></div></pre></td></tr></table></figure>
<h2 id="2-jenkins-mvn-command-not-found"><a href="#2-jenkins-mvn-command-not-found" class="headerlink" title="2, jenkins mvn: command not found"></a>2, jenkins mvn: command not found</h2><p>Jenkins 通过shell脚本调用mvn 命令的时候，是从/usr/bin 文件夹中找命令的，这个时候需要做个软链接</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln –s <span class="regexp">/opt/m</span>aven<span class="regexp">/bin/m</span>vn <span class="regexp">/usr/</span>bin<span class="regexp">/mvn</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://testerhome.com/topics/10055" target="_blank" rel="external">https://testerhome.com/topics/10055</a></p>
<p><a href="http://www.cnblogs.com/reblue520/p/7130914.html" target="_blank" rel="external">http://www.cnblogs.com/reblue520/p/7130914.html</a></p>
<p><a href="https://my.oschina.net/ilikesss/blog/794567" target="_blank" rel="external">centos7安装jenkins</a></p>
<p><a href="https://segmentfault.com/a/1190000007837054" target="_blank" rel="external">https://segmentfault.com/a/1190000007837054</a></p>
<p><a href="https://www.jianshu.com/p/bcd3a2210177" target="_blank" rel="external">Centos 7安装 jdk 8</a></p>
<p><a href="https://blog.whsir.com/post-1785.html" target="_blank" rel="external">jenkins权限管理，不同用户显示不同项目</a></p>
<p><a href="http://www.xskh.club/2017/07/31/python/%E6%89%B9%E9%87%8F%E5%85%8B%E9%9A%86jenkins%E7%9A%84job/" target="_blank" rel="external">批量克隆jenkins的job</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一，安装&quot;&gt;&lt;a href=&quot;#一，安装&quot; class=&quot;headerlink&quot; title=&quot;一，安装&quot;&gt;&lt;/a&gt;一，安装&lt;/h1&gt;&lt;h2 id=&quot;服务器安装&quot;&gt;&lt;a href=&quot;#服务器安装&quot; class=&quot;headerlink&quot; title=&quot;服务器安装&quot;&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Jenkins" scheme="http://www.kekefund.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>【DevOps】第二步：Docker镜像打包上传至仓库</title>
    <link href="http://www.kekefund.com/2019/08/09/devops-step2-make-image/"/>
    <id>http://www.kekefund.com/2019/08/09/devops-step2-make-image/</id>
    <published>2019-08-08T23:38:46.000Z</published>
    <updated>2019-09-01T08:24:38.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><p>镜像仓库有好些地方可以存，大部分的公有云均提供免费的镜像仓库，常见如下：</p>
<ul>
<li><p>腾讯云：<a href="https://console.cloud.tencent.com/tke2/registry/user/self?rid=1（需登录）" target="_blank" rel="external">https://console.cloud.tencent.com/tke2/registry/user/self?rid=1（需登录）</a></p>
</li>
<li><p>阿里云: <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories（需登录）" target="_blank" rel="external">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories（需登录）</a></p>
</li>
<li><p>自建私有仓库，参考之前的一篇文章<a href="https://www.jianshu.com/p/9cf9d1c8b00c" target="_blank" rel="external">docker私有仓库搭建</a></p>
</li>
<li><p>Docker Hub：不涉及私密的或者你想公开的镜像可以上传到<a href="https://hub.docker.com/。" target="_blank" rel="external">https://hub.docker.com/。</a></p>
</li>
</ul>
<h1 id="打包上传shell脚本"><a href="#打包上传shell脚本" class="headerlink" title="打包上传shell脚本"></a>打包上传shell脚本</h1><p>统一打包流程，每个项目中添加make.sh脚本文件，一个典型的make文件如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"开始制作镜像..."</span></div><div class="line">image_tag=`date +%Y%m%d` <span class="comment">#_%H%M</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t ccr.ccs.xxx.com/abc/api:v<span class="variable">$&#123;image_tag&#125;</span> .</div><div class="line"><span class="built_in">echo</span> <span class="string">"制作镜像成功!"</span></div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"登录"</span></div><div class="line">docker login</div><div class="line"><span class="built_in">echo</span> <span class="string">"镜像版本提交"</span></div><div class="line">docker push ccr.ccs.xxx.com/abc/api:v<span class="variable">$&#123;image_tag&#125;</span></div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"镜像最新版本提交"</span></div><div class="line">docker tag ccr.ccs.xxx.com/abc/api:v<span class="variable">$&#123;image_tag&#125;</span> ccr.ccs.xxx.com/abc/api:latest</div><div class="line">docker push ccr.ccs.xxx.com/abc/api:latest</div></pre></td></tr></table></figure>
<blockquote>
<p>注：Dockerfile和make.sh在同一目录下。</p>
</blockquote>
<h2 id="docker-build-命令用法"><a href="#docker-build-命令用法" class="headerlink" title="docker build 命令用法"></a>docker build 命令用法</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build [OPTIONS] PATH |<span class="string"> URL </span>|<span class="string"> -</span></div></pre></td></tr></table></figure>
<ul>
<li>命令参数</li>
</ul>
<table>
<thead>
<tr>
<th>命令, 缩写</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>–add-host</td>
<td>增加自定义主机和IP映射(host:ip)</td>
</tr>
<tr>
<td>–build-arg</td>
<td>设置构建时的变量</td>
</tr>
<tr>
<td>–cache-from</td>
<td>用于缓存资源的镜像</td>
</tr>
<tr>
<td>–cgroup-parent</td>
<td>可选的容器上层cgroup</td>
</tr>
<tr>
<td>–compress</td>
<td>使用gzip 压缩构建context</td>
</tr>
<tr>
<td>–cpu-period</td>
<td>限制CPU CFS(完全公平调度程序）周期</td>
</tr>
<tr>
<td>–cpu-quota</td>
<td>限制CPU CFS(完全公平调度程序）配额</td>
</tr>
<tr>
<td>–cpu-shares , -c</td>
<td>CPU共享（相对权重）</td>
</tr>
<tr>
<td>–cpuset-cpus</td>
<td>允许执行的CPU (0-3, 0,1)</td>
</tr>
<tr>
<td>–cpuset-mems</td>
<td>允许使用的内存 (0-3, 0,1)</td>
</tr>
<tr>
<td>–disable-content-trust true</td>
<td>忽略镜像验证</td>
</tr>
<tr>
<td>–file , -f</td>
<td>Dockerfile名称 (默认 ‘PATH/Dockerfile’)</td>
</tr>
<tr>
<td>–force-rm</td>
<td>始终移除中间容器</td>
</tr>
<tr>
<td>–iidfile</td>
<td>镜像ID写入文件</td>
</tr>
<tr>
<td>–isolation</td>
<td>容器隔离技术</td>
</tr>
<tr>
<td>–label</td>
<td>设置镜像metadata信息</td>
</tr>
<tr>
<td>–memory , -m</td>
<td>内存限制</td>
</tr>
<tr>
<td>–memory-swap</td>
<td>交换限制等于内存加交换，“-1”：启用无限制交换 </td>
</tr>
<tr>
<td>–network</td>
<td>在生成期为RUN指令设置网络模式 （API 1.25+）</td>
</tr>
<tr>
<td>–no-cache</td>
<td>不使用缓存</td>
</tr>
<tr>
<td>–output , -o</td>
<td>输出（格式：type=local,dest=path）  （API 1.40+） </td>
</tr>
<tr>
<td>–platform</td>
<td>如果支持多平台，则设置  （experimental (daemon)API 1.32+）</td>
</tr>
<tr>
<td>–progress</td>
<td>默认auto，设置进度输出类型 (auto, plain, tty). </td>
</tr>
<tr>
<td>–pull</td>
<td>总是尝试拉取最新的镜像版本</td>
</tr>
<tr>
<td>–quiet , -q</td>
<td>不输出构建过程，成功时直接打印镜像ID</td>
</tr>
<tr>
<td>–rm</td>
<td>默认true，构建成功后删除中间容器</td>
</tr>
<tr>
<td>–secret</td>
<td>API 1.39+   Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret</td>
</tr>
<tr>
<td>–security-opt</td>
<td>Security options</td>
</tr>
<tr>
<td>–shm-size</td>
<td>Size of /dev/shm</td>
</tr>
<tr>
<td>–squash</td>
<td>experimental (daemon)API 1.25+  Squash newly built layers into a single new layer</td>
</tr>
<tr>
<td>–ssh</td>
<td>SSH agent socket or keys to expose to the build (only if BuildKit enabled) </td>
</tr>
<tr>
<td>–stream</td>
<td>（experimental (daemon)API 1.31+ ）  Stream attaches to server to negotiate build context</td>
</tr>
<tr>
<td>–tag , -t</td>
<td>镜像名和tag，格式为‘name:tag’</td>
</tr>
<tr>
<td>–target</td>
<td>Set the target build stage to build.</td>
</tr>
<tr>
<td>–ulimit</td>
<td>Ulimit 选项</td>
</tr>
</tbody>
</table>
<p>参考已有的范例，Dockerfile和shell脚本只需要简单熟悉一下即可编写。<br>这一步很关键，是自动打包的根本。make.sh脚本灵活，可执行配置文件的替换，多镜像版本的生成等自定义操作。相比自动化构建平台基于Dockerfile和git commit来构建更具灵活性。</p>
<h1 id="jenkins-job配置"><a href="#jenkins-job配置" class="headerlink" title="jenkins job配置"></a>jenkins job配置</h1><h2 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h2><p>jenkins会将git项目拷贝至job目录下。<br><img src="http://pic.cbbing.com/devops-step2-01.png" alt=""></p>
<h2 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h2><p>jenkins定时检测代码变动（这里是每分钟检测一次），如果发现有代码提交记录，则触发下一步的构建。<br><img src="http://pic.cbbing.com/devops-step2-02.png" alt=""></p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建包括2部分:</p>
<ul>
<li>SSH site: SSH的主机地址</li>
<li>Command: 在主机上执行的命令<br><img src="http://pic.cbbing.com/devops-step2-03.png" alt=""></li>
</ul>
<h2 id="构建日志"><a href="#构建日志" class="headerlink" title="构建日志"></a>构建日志</h2><p><img src="http://pic.cbbing.com/devops-step2-04.png" alt=""></p>
<h1 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h1><ol>
<li><p>提交代码</p>
</li>
<li><p>jenkins每分钟检测git仓库分支的代码变动</p>
</li>
<li><p>若有代码提交记录，触发下一步构建</p>
</li>
<li><p>构建过程调用项目的make.sh文件，执行镜像打包上传</p>
</li>
</ol>
<p><img src="http://pic.cbbing.com/devops-step2-05.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="external">https://docs.docker.com/engine/reference/commandline/build/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;镜像仓库&quot;&gt;&lt;a href=&quot;#镜像仓库&quot; class=&quot;headerlink&quot; title=&quot;镜像仓库&quot;&gt;&lt;/a&gt;镜像仓库&lt;/h1&gt;&lt;p&gt;镜像仓库有好些地方可以存，大部分的公有云均提供免费的镜像仓库，常见如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;腾讯云：&lt;a hr
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Image" scheme="http://www.kekefund.com/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>【DevOps】第一步：编写Dockerfile与项目实践</title>
    <link href="http://www.kekefund.com/2019/07/10/devops-step1-dockerfile/"/>
    <id>http://www.kekefund.com/2019/07/10/devops-step1-dockerfile/</id>
    <published>2019-07-09T22:22:53.000Z</published>
    <updated>2019-08-08T23:15:48.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile简介"><a href="#Dockerfile简介" class="headerlink" title="Dockerfile简介"></a>Dockerfile简介</h1><p>Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>Dockerfile分为四部分：</p>
<ul>
<li><p>FROM：基础镜像信息</p>
</li>
<li><p>MAINTAINER：维护者信息</p>
</li>
<li><p>RUN、COPY、ADD、EXPOSE等：镜像操作指令</p>
</li>
<li><p>CMD、ENTRYPOINT：容器启动时执行指令。</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></div><div class="line"> </div><div class="line"><span class="keyword">MAINTAINER</span> cbbing &lt;cbbing@<span class="number">163</span>.com&gt;</div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> pip.conf requirements.txt /root/.pip/</span></div><div class="line"> </div><div class="line"><span class="comment">#设置时区</span></div><div class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</div><div class="line"><span class="keyword">ENV</span> PYTHONPATH=/usr/src/app</div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app \</span></div><div class="line">    &amp;&amp; pip install -r /root/.pip/requirements.txt \</div><div class="line">    &amp;&amp; apt-get update \</div><div class="line">    &amp;&amp; apt-get install -y supervisor \</div><div class="line">    &amp;&amp; ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime \</div><div class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</div><div class="line"> </div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>]</span></div></pre></td></tr></table></figure>
<h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><p>指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等。</p>
<h3 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h3><p>格式为 <code>FROM &lt;image&gt;</code> 或 <code>FROM &lt;image&gt;:&lt;tag&gt;</code>。<br>第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。</p>
<h3 id="2-MAINTAINER"><a href="#2-MAINTAINER" class="headerlink" title="2. MAINTAINER"></a>2. MAINTAINER</h3><p>格式为 <code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p>
<h3 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. RUN</h3><p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。<br>前者将在 shell 终端中运行命令，即 /bin/sh -c；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。<br>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行。</p>
<h3 id="4-CMD"><a href="#4-CMD" class="headerlink" title="4. CMD"></a>4. CMD</h3><p>支持三种格式<br>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；<br>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；<br>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数；<br>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。<br>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p>
<h3 id="5-EXPOSE"><a href="#5-EXPOSE" class="headerlink" title="5.EXPOSE"></a>5.EXPOSE</h3><p>格式为 <code>EXPOSE &lt;port&gt; [\&lt;port&gt;...]</code>。<br>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>
<h3 id="6-ENV"><a href="#6-ENV" class="headerlink" title="6. ENV"></a>6. ENV</h3><p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。<br>例如</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> PG_MAJOR <span class="number">9.3</span></div><div class="line"><span class="keyword">ENV</span> PG_VERSION <span class="number">9.3</span>.<span class="number">4</span></div><div class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</div><div class="line"><span class="keyword">ENV</span> PYTHONPATH=/usr/src/app</div></pre></td></tr></table></figure>
<h3 id="7-ADD"><a href="#7-ADD" class="headerlink" title="7. ADD"></a>7. ADD</h3><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。<br>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>
<h3 id="8-COPY"><a href="#8-COPY" class="headerlink" title="8. COPY"></a>8. COPY</h3><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。<br>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。<br>当使用本地目录为源目录时，推荐使用 COPY。</p>
<h3 id="9-ENTRYPOINT"><a href="#9-ENTRYPOINT" class="headerlink" title="9. ENTRYPOINT"></a>9. ENTRYPOINT</h3><p>两种格式：<br>ENTRYPOINT [“executable”, “param1”, “param2”]<br>ENTRYPOINT command param1 param2（shell中执行）。<br>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。<br>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p>
<h3 id="10-VOLUME"><a href="#10-VOLUME" class="headerlink" title="10. VOLUME"></a>10. VOLUME</h3><p>格式为 VOLUME [“/data”]。<br>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
<h3 id="11-USER"><a href="#11-USER" class="headerlink" title="11. USER"></a>11. USER</h3><p>格式为 USER daemon。<br>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。<br>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：<code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code>。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。</p>
<h3 id="12-WORKDIR"><a href="#12-WORKDIR" class="headerlink" title="12. WORKDIR"></a>12. WORKDIR</h3><p>格式为 WORKDIR /path/to/workdir。<br>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。<br>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></div></pre></td></tr></table></figure></p>
<p>则最终路径为 /a/b/c。</p>
<h3 id="13-ONBUILD"><a href="#13-ONBUILD" class="headerlink" title="13. ONBUILD"></a>13. ONBUILD</h3><p>格式为 ONBUILD [INSTRUCTION]。<br>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。<br>ONBUILD指令,实际上就是相当于创建一个模板镜像，后续可以根据该模板镜像创建特定的子镜像<br>例如，Dockerfile 使用如下的内容创建了镜像 image-A。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[...]</div><div class="line"><span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="bash"> . /app/src</span></div><div class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> /usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</span></div><div class="line">[...]</div></pre></td></tr></table></figure></p>
<p>image-A的构建过程中不执行这两条命令，但在FROM image-A的子镜像中会执行这两条命令。</p>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t mynginx:v2019 .</div></pre></td></tr></table></figure>
<p><em>注意不要少了最后面的“.”</em></p>
<h1 id="Dockerfile编写建议"><a href="#Dockerfile编写建议" class="headerlink" title="Dockerfile编写建议"></a>Dockerfile编写建议</h1><ul>
<li>通过 Docker 多阶段构建将多个层压缩为一个<br>在构建 Docker 容器时，应该尽量想办法获得体积更小的镜像，因为传输和部署体积较小的镜像速度更快。<br>从 Docker 1.10 开始，COPY、ADD 和 RUN 语句会向镜像中添加新层。层会占用空间，你拥有的层越多，最终的镜像就越大。Git 存储库在这方面也是类似的，存储库的大小随着层数的增加而增加，因为 Git 必须保存提交之间的所有变更。</li>
<li>将不经常改动的命令，比如python的reqirements.txt 依赖包，单独拎出来放在项目代码的前面。因为依赖包不经常变动，每次生成镜像时，只需将后面的项目代码copy到镜像即可。<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方案一：</span></div><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">CMD</span><span class="bash"> python /usr/src/app/manage.py runserver 0.0.0.0:8000</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"># 方案二：</span></div><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /usr/src/app/</span></div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> python /usr/src/app/manage.py runserver 0.0.0.0:8000</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>方案二比方案一好，为什么？因为方案一中的requirements.txt实际项目中是很少变动，但是因为/usr/src/app的项目代码是经常变动，导致每次打包都得根据equirements.txt安装依赖包。而方案二先把requirements.txt 拷贝进来，如果requirements.txt 没改动，docker会用到之前缓存的，加快打包速度。<br>实际运行几次打包过程，会发现速度的差异是比较明显的。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>公司现在的所有项目均以容器封装，几十个容器运行在十来台主机中，现在正在将服务器整合到kubernetes集群中，可以说一切皆容器，一切皆Docker。</p>
<h2 id="1-Django项目的Dockerfile"><a href="#1-Django项目的Dockerfile" class="headerlink" title="1. Django项目的Dockerfile"></a>1. Django项目的Dockerfile</h2><p>Django项目打包成Docker镜像是比较简单，主要是安装python依赖包，然后就是manage.py启动服务。</p>
<p>Dockerfile 位于Django项目的根目录，目录结构如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── requirements<span class="selector-class">.txt</span></div><div class="line">├── Dockerfile</div><div class="line">├── api</div><div class="line">│ ├── __init__<span class="selector-class">.py</span></div><div class="line">│ ├── urls<span class="selector-class">.py</span></div><div class="line">│ ├── wsgi<span class="selector-class">.py</span></div><div class="line">│ └── settings.py</div></pre></td></tr></table></figure>
<p>Dockerfile文件：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /usr/src/app/</span></div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">CMD</span><span class="bash"> python /usr/src/app/manage.py runserver 0.0.0.0:8000</span></div></pre></td></tr></table></figure>
<h2 id="2-SpringMVC项目的Dockerfile"><a href="#2-SpringMVC项目的Dockerfile" class="headerlink" title="2. SpringMVC项目的Dockerfile"></a>2. SpringMVC项目的Dockerfile</h2><p>项目运行在tomcat中。</p>
<p>先生成war文件，转成tar.gz文件， 通过ADD命令解压到镜像中。接下来就是配置文件的替换，最后运行tomact服务。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Version 0.1</span></div><div class="line"><span class="comment"># 基础镜像</span></div><div class="line"><span class="keyword">FROM</span> cbbing/tomcat</div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf <span class="variable">$CATALINA_HOME</span>/webapps/ROOT</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> ROOT.tar.gz <span class="variable">$CATALINA_HOME</span>/webapps/</span></div><div class="line"> </div><div class="line"><span class="comment"># 配置文件替换</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> conf/server.xml <span class="variable">$CATALINA_HOME</span>/conf/</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> conf/tomcat-users.xml <span class="variable">$CATALINA_HOME</span>/conf/</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> conf/jdbc.properties <span class="variable">$CATALINA_HOME</span>/webapps/ROOT/WEB-INF/classes/properties/</span></div><div class="line"> </div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"catalina.sh"</span>, <span class="string">"run"</span>]</span></div></pre></td></tr></table></figure>
<p>mvn.sh: 生成ROOT.tar.gz的脚本如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">cd ../myweb</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"> </div><div class="line">cd ..</div><div class="line">mkdir ./ROOT</div><div class="line"> </div><div class="line">cp ./myweb/target/myweb<span class="selector-class">.war</span> ./ROOT</div><div class="line"> </div><div class="line">cd ROOT</div><div class="line">jar xvf myweb<span class="selector-class">.war</span></div><div class="line"> </div><div class="line">rm myweb<span class="selector-class">.war</span></div><div class="line"></div><div class="line">cd .. </div><div class="line">tar czf ROOT<span class="selector-class">.tar</span><span class="selector-class">.gz</span> ./ROOT</div><div class="line">rm -rf ROOT/</div></pre></td></tr></table></figure></p>
<h2 id="3-Vue-js项目的Dockerfile"><a href="#3-Vue-js项目的Dockerfile" class="headerlink" title="3. Vue.js项目的Dockerfile"></a>3. Vue.js项目的Dockerfile</h2><p>步骤如下：</p>
<ol>
<li><p>下载package.json中定义的依赖</p>
</li>
<li><p>npm build生成编译后的文件到dist</p>
</li>
<li><p>基础镜像为nginx，从nginx代理静态文件</p>
</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.15</span></div><div class="line"> </div><div class="line"><span class="keyword">MAINTAINER</span> cbbing &lt;cbbing@<span class="number">163</span>.com&gt;</div><div class="line"> </div><div class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></div><div class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/conf.d/default.conf</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> dist /usr/share/nginx/html</span></div></pre></td></tr></table></figure>
<p>make.sh：制作脚本如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"npm install"</span></div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">cnpm install</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"npm build"</span></div><div class="line">npm run build</div><div class="line"> </div><div class="line">image_tag=`date +%Y%m%d` <span class="comment">#_%H%M</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t cbbing/web_p:v<span class="variable">$&#123;image_tag&#125;</span> .</div></pre></td></tr></table></figure></p>
<h2 id="4-Scrapy项目的Dockerfile"><a href="#4-Scrapy项目的Dockerfile" class="headerlink" title="4. Scrapy项目的Dockerfile"></a>4. Scrapy项目的Dockerfile</h2><p>scrapy项目和Django项目的差别在于启动的方式不同，这里涉及到一些配置文件。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></div><div class="line"> </div><div class="line"><span class="comment">#设置时区</span></div><div class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</div><div class="line"><span class="keyword">ENV</span> PYTHONPATH=/usr/src/app</div><div class="line"> </div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app \</span></div><div class="line">    &amp;&amp; pip install -r /root/.pip/requirements.txt  -i https://mirrors.aliyun.com/pypi/simple/ \</div><div class="line">    &amp;&amp; apt-get update \</div><div class="line">    &amp;&amp; apt-get install -y supervisor \</div><div class="line">    &amp;&amp; ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime \</div><div class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</div><div class="line"> </div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> supervisord.conf /etc/supervisor/conf.d/supervisord.conf</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /var/<span class="built_in">log</span>/supervisor</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> scrapyd.conf /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/scrapyd/default_scrapyd.conf</span></div><div class="line"> </div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/supervisord"</span>]</span></div></pre></td></tr></table></figure>
<p>其中用到的配置文件：</p>
<ul>
<li>supervisord.conf</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[inet_http_server]</div><div class="line"><span class="attr">port=9020</span></div><div class="line"><span class="attr">username=admin</span></div><div class="line"><span class="attr">password=1234</span></div><div class="line"> </div><div class="line">[supervisord]</div><div class="line"><span class="attr">nodaemon=true</span></div><div class="line"><span class="attr">logfile=/var/log/supervisor/supervisord.log;</span></div><div class="line"><span class="attr">pidfile=/var/log/supervisord.pid;</span></div><div class="line"><span class="attr">childlogdir=/var/log/supervisor</span></div><div class="line"> </div><div class="line">[program:scrapyd]</div><div class="line"><span class="attr">command=scrapyd</span></div><div class="line"><span class="attr">loglevel=info</span></div><div class="line"><span class="attr">redirect_stderr=true</span></div><div class="line"><span class="attr">stdout_events_enabled=true</span></div><div class="line"> </div><div class="line">[program:scrapyd-deploy]</div><div class="line"><span class="attr">command=bash</span> supervisor-scrapyd-deploy.sh</div><div class="line"><span class="attr">startsecs</span> = <span class="number">35</span></div><div class="line"><span class="attr">loglevel=info</span></div><div class="line"> </div><div class="line">[program:simple_http]</div><div class="line"><span class="attr">command=/bin/bash</span> supervisor-http-egg.sh</div><div class="line"><span class="attr">autorestart=true</span></div><div class="line"><span class="attr">startsecs=10</span></div><div class="line"><span class="attr">loglevel=info</span></div><div class="line"> </div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.<span class="attr">rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</div></pre></td></tr></table></figure>
<ul>
<li>scrapyd.conf</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[scrapyd]</div><div class="line">eggs_dir = eggs</div><div class="line">logs_dir = logs</div><div class="line">items_dir =</div><div class="line">jobs_to_keep = <span class="number">20</span></div><div class="line">dbs_dir = dbs</div><div class="line">max_proc = <span class="number">0</span></div><div class="line">max_proc_per_cpu = <span class="number">4</span></div><div class="line">finished_to_keep = <span class="number">100</span></div><div class="line">poll_interval = <span class="number">5.0</span></div><div class="line">bind_address = <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">http_port = <span class="number">6800</span></div><div class="line">debug = off</div><div class="line">runner = scrapyd<span class="selector-class">.runner</span></div><div class="line">application = scrapyd<span class="selector-class">.app</span><span class="selector-class">.application</span></div><div class="line">launcher = scrapyd<span class="selector-class">.launcher</span><span class="selector-class">.Launcher</span></div><div class="line">webroot = scrapyd<span class="selector-class">.website</span><span class="selector-class">.Root</span></div><div class="line"> </div><div class="line">[services]</div><div class="line">schedule<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.Schedule</span></div><div class="line">cancel<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.Cancel</span></div><div class="line">addversion<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.AddVersion</span></div><div class="line">listprojects<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListProjects</span></div><div class="line">listversions<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListVersions</span></div><div class="line">listspiders<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListSpiders</span></div><div class="line">delproject<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.DeleteProject</span></div><div class="line">delversion<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.DeleteVersion</span></div><div class="line">listjobs<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.ListJobs</span></div><div class="line">daemonstatus<span class="selector-class">.json</span> = scrapyd<span class="selector-class">.webservice</span><span class="selector-class">.DaemonStatus</span></div></pre></td></tr></table></figure>
<h1 id="dockerignore文件"><a href="#dockerignore文件" class="headerlink" title=".dockerignore文件"></a>.dockerignore文件</h1><p>配置docker镜像的忽略列表，类似.gitignore文件。<br>参考：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">https://docs.docker.com/engine/reference/builder/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ol>
<li><p><a href="http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">Dockerfile介绍</a></p>
</li>
<li><p><a href="https://www.infoq.cn/article/3-simple-tricks-for-smaller-docker-images" target="_blank" rel="external">三个技巧，将 Docker 镜像体积减小 90%</a></p>
</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dockerfile简介&quot;&gt;&lt;a href=&quot;#Dockerfile简介&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile简介&quot;&gt;&lt;/a&gt;Dockerfile简介&lt;/h1&gt;&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 指
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Dockerfile" scheme="http://www.kekefund.com/tags/Dockerfile/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装Docker及docker-compose</title>
    <link href="http://www.kekefund.com/2019/06/10/docker-install/"/>
    <id>http://www.kekefund.com/2019/06/10/docker-install/</id>
    <published>2019-06-10T03:15:01.000Z</published>
    <updated>2019-06-10T05:42:51.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h1><h2 id="1-卸载旧版本（若未安装过Docker，可跳过）"><a href="#1-卸载旧版本（若未安装过Docker，可跳过）" class="headerlink" title="1. 卸载旧版本（若未安装过Docker，可跳过）"></a>1. 卸载旧版本（若未安装过Docker，可跳过）</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sudo yum remove docker <span class="string">\</span></div><div class="line">                  docker-client <span class="string">\</span></div><div class="line">                  docker-client-latest <span class="string">\</span></div><div class="line">                  docker-common <span class="string">\</span></div><div class="line">                  docker-latest <span class="string">\</span></div><div class="line">                  docker-latest-logrotate <span class="string">\</span></div><div class="line">                  docker-logrotate <span class="string">\</span></div><div class="line">                  docker-engine <span class="string">\</span></div><div class="line">                  docker-selinux  <span class="string">\</span></div><div class="line">                docker-engine-selinux <span class="string">\</span></div><div class="line">                container-selinux <span class="string">\</span></div><div class="line">                docker-ce <span class="string">\</span></div><div class="line">                docker-ce-cli</div></pre></td></tr></table></figure>
<h2 id="2-安装系统依赖及源"><a href="#2-安装系统依赖及源" class="headerlink" title="2. 安装系统依赖及源"></a>2. 安装系统依赖及源</h2><h3 id="a-安装依赖包"><a href="#a-安装依赖包" class="headerlink" title="a. 安装依赖包"></a>a. 安装依赖包</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y yum-utils \</div><div class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></div><div class="line">  lvm2</div></pre></td></tr></table></figure>
<h3 id="b-设置源"><a href="#b-设置源" class="headerlink" title="b. 设置源"></a>b. 设置源</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum-config-manager \</div><div class="line">    --<span class="built_in">add</span>-repo \</div><div class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</div></pre></td></tr></table></figure>
<h2 id="3-安装Docker-CE（社区版）"><a href="#3-安装Docker-CE（社区版）" class="headerlink" title="3. 安装Docker CE（社区版）"></a>3. 安装Docker CE（社区版）</h2><h3 id="a-安装最新版"><a href="#a-安装最新版" class="headerlink" title="a. 安装最新版"></a>a. 安装最新版</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</div></pre></td></tr></table></figure>
<h3 id="b-安装指定版本"><a href="#b-安装指定版本" class="headerlink" title="b. 安装指定版本"></a>b. 安装指定版本</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 查看所有可用的版本</div><div class="line">[root@VM_32_86_centos ~]# yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">6</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">5</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">4</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">3</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">2</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">1</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line">docker-<span class="keyword">ce</span>.x86_64 <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">0</span>-<span class="number">3</span>.el7 docker-<span class="keyword">ce</span>-stable</div><div class="line"> </div><div class="line">$ sudo yum install docker-<span class="keyword">ce</span>-<span class="number">18.09</span>.<span class="number">3</span> docker-<span class="keyword">ce</span>-cli-<span class="number">18.09</span>.<span class="number">3</span> containerd.io</div></pre></td></tr></table></figure>
<h3 id="c-启动Docker"><a href="#c-启动Docker" class="headerlink" title="c. 启动Docker"></a>c. 启动Docker</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="literal">start</span> docker</div></pre></td></tr></table></figure>
<h3 id="d-设置开机自动启动"><a href="#d-设置开机自动启动" class="headerlink" title="d. 设置开机自动启动"></a>d. 设置开机自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker</div></pre></td></tr></table></figure>
<h2 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_19_15_centos</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr"> Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:33:21</span> <span class="number">2019</span></div><div class="line"> <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr"> Experimental:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span> <span class="string">Docker</span> <span class="string">Engine</span> <span class="bullet">-</span> <span class="string">Community</span></div><div class="line"><span class="attr"> Engine:</span></div><div class="line"><span class="attr">  Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line">  <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></div><div class="line">  <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line">  <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr">  Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:02:24</span> <span class="number">2019</span></div><div class="line">  <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr">  Experimental:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="external">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</blockquote>
<h1 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h1><h2 id="1-运行一下命令，安装最新版本"><a href="#1-运行一下命令，安装最新版本" class="headerlink" title="1. 运行一下命令，安装最新版本"></a>1. 运行一下命令，安装最新版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</div></pre></td></tr></table></figure>
<blockquote>
<p>要安装指定版本， 替换1.23.2为你选择的版本</p>
</blockquote>
<h2 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</div></pre></td></tr></table></figure>
<h2 id="3-测试安装是否成功"><a href="#3-测试安装是否成功" class="headerlink" title="3. 测试安装是否成功"></a>3. 测试安装是否成功</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@VM_19_15_centos ~]</span># <span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span></div><div class="line"><span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span> 1<span class="selector-class">.23</span><span class="selector-class">.2</span>, <span class="selector-tag">build</span> 1110<span class="selector-tag">ad01</span></div><div class="line"><span class="selector-tag">docker-py</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">CPython</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">OpenSSL</span> <span class="selector-tag">version</span>: <span class="selector-tag">OpenSSL</span> 1<span class="selector-class">.1</span><span class="selector-class">.0f</span> 25 <span class="selector-tag">May</span> 2017</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装Docker&quot;&gt;&lt;a href=&quot;#一、安装Docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装Docker&quot;&gt;&lt;/a&gt;一、安装Docker&lt;/h1&gt;&lt;h2 id=&quot;1-卸载旧版本（若未安装过Docker，可跳过）&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="docker" scheme="http://www.kekefund.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://www.kekefund.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>【运维】Nginx网关与热部署</title>
    <link href="http://www.kekefund.com/2019/05/09/nginx-reload/"/>
    <id>http://www.kekefund.com/2019/05/09/nginx-reload/</id>
    <published>2019-05-09T09:28:57.000Z</published>
    <updated>2019-05-09T09:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h1><p>Nginx是一个轻量级的Http服务器，Nginx包含一个单一的master进程和多个worker进程。所有这些进程都是单线程，并且设计为同时处理成千上万个连接。Nginx使用操作系统事件机制来快速响应这些请求。<br>Nginx的master进程负责读取配置文件、处理套接字、派生worker进程、打开日志文件和编译嵌入式的Perl脚本。<br>Nginx的worker进程运行在一个忙碌的事件循环处理中，用于处理进入的连接。每一个Nginx模块被构筑在worker中，因此任何请求处理、过滤、处理代理的连接和更多的操作都在worker进程中完成。</p>
<p><img src="http://pic.cbbing.com/nginx-reload01.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker 中运行的nginx</span></div><div class="line">root<span class="number"> 3699 </span>3675<span class="number"> 0 </span>2018 ? 00:00:00 nginx: master process /opt/gitlab/embedded/sbin/nginx -p /var/opt/gitlab/nginx</div><div class="line">systemd+<span class="number"> 3770 </span>3699<span class="number"> 0 </span>2018 ? 00:16:35 nginx: worker process</div><div class="line">systemd+<span class="number"> 3771 </span>3699<span class="number"> 0 </span>2018 ? 00:17:19 nginx: worker process</div><div class="line">systemd+<span class="number"> 3772 </span>3699<span class="number"> 0 </span>2018 ? 00:15:19 nginx: worker process</div><div class="line">systemd+<span class="number"> 3773 </span>3699<span class="number"> 0 </span>2018 ? 00:24:05 nginx: worker process</div><div class="line">systemd+<span class="number"> 3774 </span>3699<span class="number"> 0 </span>2018 ? 00:01:45 nginx: cache manager process</div></pre></td></tr></table></figure>
<h1 id="Nginx-容器实例"><a href="#Nginx-容器实例" class="headerlink" title="Nginx 容器实例"></a>Nginx 容器实例</h1><p>为了方便扩展和迁移，公司的nginx都跑在Docker环境中。Docker版的nginx可以一键迁移，自动重启，相当于进程守护。<br><a href="https://hub.docker.com/_/nginx" target="_blank" rel="external">nginx官方镜像</a>不支持ssl，目前的浏览器都把非https的网站标识为不安全，因此支持https是非常必要的，本文在<a href="https://hub.docker.com/r/marvambass/nginx-ssl-secure" target="_blank" rel="external">marvambass/nginx-ssl-secure</a>镜像的基础上做了部分修改，以满足需要，镜像下载地址为：<a href="https://hub.docker.com/r/cbbing/nginx-ssl-secure" target="_blank" rel="external">https://hub.docker.com/r/cbbing/nginx-ssl-secure</a></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="docker-compose-yml文件"><a href="#docker-compose-yml文件" class="headerlink" title="docker-compose.yml文件"></a>docker-compose.yml文件</h2><p>下面为最常用的nginx运行的docker配置，对外开放80，443端口，即http和https。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2.1'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  nginx:</div><div class="line">    image: cbbing/nginx-ssl-secure</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./<span class="keyword">conf</span>/<span class="keyword">conf</span>.d/cer:/etc/nginx/external</div><div class="line">      - ./<span class="keyword">conf</span>/<span class="keyword">conf</span>.d:/etc/nginx/<span class="keyword">conf</span>.d</div><div class="line">      - /mydata/logs/nginx_log<span class="variable">s:</span>/var/<span class="built_in">log</span>/nginx</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure></p>
<p>说明：<br>读取conf配置，映射到宿主机的conf/conf.d文件夹<br>读取cer证书，映射到宿主机的conf/conf.d/cer文件夹<br>日志文件映射到宿主机的/mydata/logs/nginx_logs<br>restart设置为always，相当于进程守护，宕掉后自动重启。</p>
<h2 id="conf配置"><a href="#conf配置" class="headerlink" title="conf配置"></a>conf配置</h2><p>平时打交道最多的就是conf文件，热部署。<br>一个典型的conf文件如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> xxx_api&#123;</div><div class="line">    <span class="attribute">server</span> <span class="number">10.105.10.1:992</span> ;    <span class="comment">#api03</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://xxx_api;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/xxx_api_http.log  main;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_certificate</span> conf.d/cer/1_api.xxx.com_bundle.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> conf.d/cer/2_api.xxx.com.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;</div><div class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">500s</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://xxx_api;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/xxx_api_https.log  main;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一部分upstream，可以定义多个后端服务器，通过IPHash/最小连接/轮询/加权轮询/主备等策略实现负载均衡。<br>第二部分server，是域名访问的配置项，包括端口，具体域名，location中转设置项<br>第三部分log，是日志存储的路径。日志的格式在nginx.conf中定义的。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                  <span class="string">'<span class="variable">$status</span> [<span class="variable">$request_body</span>] <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                  <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div></pre></td></tr></table></figure></p>
<p>也可以只定义一个443端口，80端口通过如下方式重定义：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> api.xxx.com;</div><div class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> https://api.xxx.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h2><p>一套成熟的API网关包括如下几个方面：<br><img src="http://pic.cbbing.com/nginx-reload03.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<p>API管理包括：</p>
<ul>
<li>定义和发布</li>
<li>安全</li>
<li>流量控制</li>
<li>持续监控与维护</li>
<li>API分析</li>
</ul>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">upstream api&#123;</div><div class="line">    least_conn<span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">891</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">892</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">893</span> <span class="comment">;</span></div><div class="line">    server <span class="number">10.105</span><span class="meta">.19</span><span class="meta">.5</span>:<span class="number">894</span> <span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里运行了4个api服务，通过最小连接策略调用。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_196_57_centos ~]# docker ps</div><div class="line">2c8792e403bf <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">891</span>-&gt;<span class="number">8000</span>/tcp p891_api_1</div><div class="line">2c8792e403ba <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">892</span>-&gt;<span class="number">8000</span>/tcp p892_api_1</div><div class="line">2c8792e403bb <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">893</span>-&gt;<span class="number">8000</span>/tcp p893_api_1</div><div class="line">2c8792e403bc <span class="string">"/bin/sh -c 'gunic..."</span> <span class="number">3</span> days ago <span class="meta">Up</span> <span class="number">3</span> days <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">894</span>-&gt;<span class="number">8000</span>/tcp p894_api_1</div></pre></td></tr></table></figure></p>
<p><img src="http://pic.cbbing.com/nginx-reload02.png?imageView2/0/q/75|watermark/2/text/a2VrZWZ1bmQuY29tIEDoh6rnhLbmmZ8=/font/6buR5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p>
<h2 id="静态网页服务器"><a href="#静态网页服务器" class="headerlink" title="静态网页服务器"></a>静态网页服务器</h2><p>静态文件配置demo.conf<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> www.xxx.com;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>    /home/demo;</div><div class="line">        <span class="attribute">index</span>   login.html;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/demo_http.log  main;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> www.xxx.com;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_certificate</span> conf.d/cer/1_www.xxx.com_bundle.crt;</div><div class="line">    <span class="attribute">ssl_certificate_key</span> conf.d/cer/2_www.xxx.com.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>    /home/demo;</div><div class="line">        <span class="attribute">index</span>   login.html;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/demo_https.log  main;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个配置即以/home/demo目录为静态文件目录，不过/home/demo是容器内的路径，需要映射到宿主机目录/mydata/demo，实现动态更新。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">version:</span> <span class="string">'2.1'</span></div><div class="line"><span class="string">services:</span></div><div class="line"><span class="symbol">  nginx:</span></div><div class="line"><span class="symbol">    image:</span> cbbing/nginx-ssl-secure</div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - .<span class="regexp">/conf/</span>conf.d<span class="regexp">/cer:/</span>etc<span class="regexp">/nginx/</span>external</div><div class="line">      - .<span class="regexp">/conf/</span>conf.<span class="string">d:</span><span class="regexp">/etc/</span>nginx/conf.d</div><div class="line">      - <span class="regexp">/mydata/</span>logs<span class="regexp">/nginx_logs:/</span>var<span class="regexp">/log/</span>nginx</div><div class="line">      - <span class="regexp">/mydata/</span><span class="string">demo:</span><span class="regexp">/home/</span>demo</div><div class="line"><span class="symbol"></span></div><div class="line">    ports:</div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div></pre></td></tr></table></figure></p>
<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>更新了conf文件后，执行<code>nginx -t</code>，先排查语法错误，通过后执行<code>nginx -s reload</code>重新加载配置文件实现热部署。</p>
<blockquote>
<p>nginx热部署的方式时，等旧的worker执行完成后kill掉，以更新后的配置启动新的worker</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -t</div><div class="line">nginx: [emerg] duplicate upstream <span class="string">"myweb"</span> <span class="keyword">in</span> /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/power.xxx.<span class="keyword">conf</span>:3</div><div class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> failed</div><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -t</div><div class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok</div><div class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful</div><div class="line">[root@VM_231_16_centos ~]# docker exec -it nginxnew_nginx_1 nginx -s reload</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="external">https://www.jianshu.com/p/5eab0f83e3b4</a><br><a href="https://www.nginx.com/blog/what-is-api-management/" target="_blank" rel="external">What Is API Management?</a><br><a href="https://cloud.tencent.com/document/product/628/11755" target="_blank" rel="external">https://cloud.tencent.com/document/product/628/11755</a><br><a href="https://cloud.tencent.com/developer/article/1149103" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1149103</a><br><a href="https://zhuanlan.zhihu.com/p/34943332" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/34943332</a><br><a href="https://www.infoq.cn/article/comparing-api-gateway-performances" target="_blank" rel="external">https://www.infoq.cn/article/comparing-api-gateway-performances</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx简介&quot;&gt;&lt;a href=&quot;#Nginx简介&quot; class=&quot;headerlink&quot; title=&quot;Nginx简介&quot;&gt;&lt;/a&gt;Nginx简介&lt;/h1&gt;&lt;p&gt;Nginx是一个轻量级的Http服务器，Nginx包含一个单一的master进程和多个worker进
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="https" scheme="http://www.kekefund.com/tags/https/"/>
    
      <category term="API网关" scheme="http://www.kekefund.com/tags/API%E7%BD%91%E5%85%B3/"/>
    
      <category term="静态服务器" scheme="http://www.kekefund.com/tags/%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装Docker及docker-compose</title>
    <link href="http://www.kekefund.com/2019/03/18/docker-install/"/>
    <id>http://www.kekefund.com/2019/03/18/docker-install/</id>
    <published>2019-03-18T07:37:46.000Z</published>
    <updated>2019-03-18T07:40:00.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h1><h2 id="1-卸载旧版本（若未安装过Docker，可跳过）"><a href="#1-卸载旧版本（若未安装过Docker，可跳过）" class="headerlink" title="1. 卸载旧版本（若未安装过Docker，可跳过）"></a>1. 卸载旧版本（若未安装过Docker，可跳过）</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ sudo yum remove docker <span class="string">\</span></div><div class="line">                  docker-client <span class="string">\</span></div><div class="line">                  docker-client-latest <span class="string">\</span></div><div class="line">                  docker-common <span class="string">\</span></div><div class="line">                  docker-latest <span class="string">\</span></div><div class="line">                  docker-latest-logrotate <span class="string">\</span></div><div class="line">                  docker-logrotate <span class="string">\</span></div><div class="line">                  docker-engine</div></pre></td></tr></table></figure>
<h2 id="2-安装系统依赖及源"><a href="#2-安装系统依赖及源" class="headerlink" title="2. 安装系统依赖及源"></a>2. 安装系统依赖及源</h2><h3 id="a-安装依赖包"><a href="#a-安装依赖包" class="headerlink" title="a. 安装依赖包"></a>a. 安装依赖包</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y yum-utils \</div><div class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></div><div class="line">  lvm2</div></pre></td></tr></table></figure>
<h3 id="b-设置源"><a href="#b-设置源" class="headerlink" title="b. 设置源"></a>b. 设置源</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum-config-manager \</div><div class="line">    --<span class="built_in">add</span>-repo \</div><div class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</div></pre></td></tr></table></figure>
<h2 id="3-安装Docker-CE（社区版）"><a href="#3-安装Docker-CE（社区版）" class="headerlink" title="3. 安装Docker CE（社区版）"></a>3. 安装Docker CE（社区版）</h2><h3 id="a-安装最新版"><a href="#a-安装最新版" class="headerlink" title="a. 安装最新版"></a>a. 安装最新版</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</div></pre></td></tr></table></figure>
<h3 id="b-启动Docker"><a href="#b-启动Docker" class="headerlink" title="b. 启动Docker"></a>b. 启动Docker</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="literal">start</span> docker</div></pre></td></tr></table></figure>
<h3 id="c-设置开机自动启动"><a href="#c-设置开机自动启动" class="headerlink" title="c. 设置开机自动启动"></a>c. 设置开机自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker</div></pre></td></tr></table></figure>
<h2 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_19_15_centos</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr"> Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:33:21</span> <span class="number">2019</span></div><div class="line"> <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr"> Experimental:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span> <span class="string">Docker</span> <span class="string">Engine</span> <span class="bullet">-</span> <span class="string">Community</span></div><div class="line"><span class="attr"> Engine:</span></div><div class="line"><span class="attr">  Version:</span> <span class="number">18.09</span><span class="number">.3</span></div><div class="line">  <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.39</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></div><div class="line">  <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.10.8</span></div><div class="line">  <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">774</span><span class="string">a1f4</span></div><div class="line"><span class="attr">  Built:</span> <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">06</span><span class="string">:02:24</span> <span class="number">2019</span></div><div class="line">  <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></div><div class="line"><span class="attr">  Experimental:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="external">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</blockquote>
<h1 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h1><h2 id="1-运行一下命令，安装最新版本"><a href="#1-运行一下命令，安装最新版本" class="headerlink" title="1. 运行一下命令，安装最新版本"></a>1. 运行一下命令，安装最新版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</div></pre></td></tr></table></figure>
<blockquote>
<p>要安装指定版本， 替换1.23.2为你选择的版本</p>
</blockquote>
<h2 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</div></pre></td></tr></table></figure>
<h2 id="3-测试安装是否成功"><a href="#3-测试安装是否成功" class="headerlink" title="3. 测试安装是否成功"></a>3. 测试安装是否成功</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@VM_19_15_centos ~]</span># <span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span></div><div class="line"><span class="selector-tag">docker-compose</span> <span class="selector-tag">version</span> 1<span class="selector-class">.23</span><span class="selector-class">.2</span>, <span class="selector-tag">build</span> 1110<span class="selector-tag">ad01</span></div><div class="line"><span class="selector-tag">docker-py</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">CPython</span> <span class="selector-tag">version</span>: 3<span class="selector-class">.6</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">OpenSSL</span> <span class="selector-tag">version</span>: <span class="selector-tag">OpenSSL</span> 1<span class="selector-class">.1</span><span class="selector-class">.0f</span> 25 <span class="selector-tag">May</span> 2017</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装Docker&quot;&gt;&lt;a href=&quot;#一、安装Docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装Docker&quot;&gt;&lt;/a&gt;一、安装Docker&lt;/h1&gt;&lt;h2 id=&quot;1-卸载旧版本（若未安装过Docker，可跳过）&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="centos7" scheme="http://www.kekefund.com/tags/centos7/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="docker-compose" scheme="http://www.kekefund.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群搭建 - ZooKeeper</title>
    <link href="http://www.kekefund.com/2018/12/04/kafka-zookeeper/"/>
    <id>http://www.kekefund.com/2018/12/04/kafka-zookeeper/</id>
    <published>2018-12-04T08:21:03.000Z</published>
    <updated>2018-12-04T08:31:41.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是ZooKeeper？"><a href="#一、什么是ZooKeeper？" class="headerlink" title="一、什么是ZooKeeper？"></a>一、什么是ZooKeeper？</h1><p>ZooKeeper（动物园管理员），顾名思义，是用来管理Hadoop（大象）、Hive（蜜蜂）、Pig（小猪）的管理员，同时Apache HBase、Apache Solr、LinkedIn Sensei等众多项目中都采用了ZooKeeper。<br><a id="more"></a></p>
<p>ZooKeeper是一个集中式服务，用于维护配置信息、命名、提供分布式同步和提供组服务。所有这些类型的服务都以某种形式被分布式应用程序使用。每次它们被实现时，都有大量的工作用于修复不可避免的bug和竞选条件。由于实现这类服务的困难，应用程序最初通常跳过它们，这使得它们在存在更改时变得脆弱，并且难以管理。即使正确完成，这些服务的不同实现也会在部署应用程序时导致管理复杂性。</p>
<h1 id="二、Zookeeper集群"><a href="#二、Zookeeper集群" class="headerlink" title="二、Zookeeper集群"></a>二、Zookeeper集群</h1><p>Kafka使用Zookeeper来存储集群元数据以及消费者元数据。Zookeeper集群被称为群组。Zookeeper使用的是一致性协议，所以建议每个群组里应该包含奇数个节点（比如3个、5个等），因为只有当群组里的大多数节点（也就是法定人数）处于可用状态，Zookeeper才能处理外部的请求。也就是说，如果3个节点的集群，允许1个节点失效。如果5个节点的集群，允许2个节点失效。</p>
<h1 id="三、Docker方式配置ZooKeeper"><a href="#三、Docker方式配置ZooKeeper" class="headerlink" title="三、Docker方式配置ZooKeeper"></a>三、Docker方式配置ZooKeeper</h1><p>myid文件：标识要写到快照目录下面myid文件里</p>
<p>采用Docker镜像：wurstmeister/zookeeper，部署一个3节点的集群。</p>
<h2 id="节点一："><a href="#节点一：" class="headerlink" title="节点一："></a>节点一：</h2><ul>
<li>docker-compose.yml</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2181:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
<ul>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">10.150</span>.<span class="number">19.15</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">10.100</span>.<span class="number">124.217</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="节点二："><a href="#节点二：" class="headerlink" title="节点二："></a>节点二：</h2><ul>
<li><p>docker-compose.yml</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2180:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
</li>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">10.100</span>.<span class="number">158.245</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">10.100</span>.<span class="number">124.217</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="节点三："><a href="#节点三：" class="headerlink" title="节点三："></a>节点三：</h2><ul>
<li><p>docker-compose.yml</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">version</span>: <span class="string">'2'</span></div><div class="line">service<span class="variable">s:</span></div><div class="line">  zookeeper:</div><div class="line">    image: wurstmeister/zookeeper</div><div class="line">    volume<span class="variable">s:</span></div><div class="line">      - ./zoo.<span class="keyword">cf</span><span class="variable">g:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/<span class="keyword">conf</span>/zoo.cfg</div><div class="line">      - ./dat<span class="variable">a:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data</div><div class="line">      - ./<span class="built_in">log</span><span class="variable">s:</span>/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/logs</div><div class="line">      - ./myid:/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">9</span>/data/myid</div><div class="line">    port<span class="variable">s:</span></div><div class="line">      - <span class="string">"2179:2181"</span></div><div class="line">      - <span class="string">"2888:2888"</span></div><div class="line">      - <span class="string">"3888:3888"</span></div><div class="line">    restar<span class="variable">t:</span> always</div></pre></td></tr></table></figure>
</li>
<li><p>myid文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
</li>
<li><p>zoo.cfg文件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The number of milliseconds of each tick</span></div><div class="line"><span class="attr">tickTime=2000</span></div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line"><span class="attr">initLimit=10</span></div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line"><span class="attr">syncLimit=5</span></div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line"><span class="attr">dataDir=/opt/zookeeper-3.4.9/data</span></div><div class="line"><span class="attr">dataLogDir=/opt/zookeeper-3.4.9/logs</span></div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line"><span class="attr">clientPort=2181</span></div><div class="line"><span class="comment"># the maximum number of client connections.</span></div><div class="line"><span class="comment"># increase this if you need to handle more clients</span></div><div class="line"><span class="comment">#maxClientCnxns=60</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line">autopurge.<span class="attr">snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line">autopurge.<span class="attr">purgeInterval=1</span></div><div class="line"></div><div class="line"><span class="comment">#kafka01 (10.100.158.245)</span></div><div class="line">server.<span class="number">1</span>=<span class="number">10.100</span>.<span class="number">158.245</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka02 (10.100.19.15)</span></div><div class="line">server.<span class="number">2</span>=<span class="number">10.100</span>.<span class="number">19.15</span>:<span class="number">2888</span>:<span class="number">3888</span></div><div class="line"><span class="comment">#kafka03 (10.100.124.217)</span></div><div class="line">server.<span class="number">3</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2888</span>:<span class="number">3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、查看ZooKeeper状态"><a href="#四、查看ZooKeeper状态" class="headerlink" title="四、查看ZooKeeper状态"></a>四、查看ZooKeeper状态</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 服务器1</span></div><div class="line"></div><div class="line">[root@VM_158_24_centos ~]<span class="comment"># docker exec -it s1_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: leader</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器2</span></div><div class="line"> </div><div class="line">[root@VM_19_15_centos ~]<span class="comment"># docker exec -it s2_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器3</span></div><div class="line"> </div><div class="line">[root@VM_124_27_centos ~]<span class="comment"># docker exec -it s3_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<p>停掉leader，2个follower的状态有变化，如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 服务器<span class="number">1</span></div><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]# docker stop s1_zookeeper_1</div><div class="line">s1_zookeeper_1</div><div class="line"> </div><div class="line"> </div><div class="line"># 服务器<span class="number">2</span></div><div class="line"> </div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">555</span> [myid:<span class="number">2</span>] - WARN [WorkerSender[myid=<span class="number">2</span>]:QuorumCnxManager@<span class="number">400</span>] - Cannot open channel to <span class="number">1</span> <span class="meta">at</span> election address /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span>:<span class="number">3888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.java:<span class="number">381</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.java:<span class="number">354</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.java:<span class="number">452</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.java:<span class="number">433</span>)</div><div class="line"> <span class="meta">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">556</span> [myid:<span class="number">2</span>] - INFO [WorkerSender[myid=<span class="number">2</span>]:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span> to address: /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">556</span> [myid:<span class="number">2</span>] - INFO [WorkerReceiver[myid=<span class="number">2</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">2</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer@<span class="number">844</span>] - FOLLOWING</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:ZooKeeperServer@<span class="number">173</span>] - Created server with tickTime <span class="number">2000</span> minSessionTimeout <span class="number">4000</span> maxSessionTimeout <span class="number">40000</span> datadir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/logs/version-<span class="number">2</span> snapdir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">759</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Follower@<span class="number">61</span>] - FOLLOWING - LEADER ELECTION TOOK - <span class="number">215</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">760</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span> to address: /<span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">761</span> [myid:<span class="number">2</span>] - WARN [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Learner@<span class="number">236</span>] - Unexpected exception, tries=<span class="number">0</span>, connecting to /<span class="number">10.105</span><span class="meta">.124</span><span class="meta">.217</span>:<span class="number">2888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.Learner.connectToLeader(Learner.java:<span class="number">228</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.Follower.followLeader(Follower.java:<span class="number">69</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumPeer.run(QuorumPeer.java:<span class="number">846</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">794</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Learner@<span class="number">329</span>] - Getting a snapshot from leader</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">796</span> [myid:<span class="number">2</span>] - INFO [QuorumPeer[myid=<span class="number">2</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:FileTxnSnapLog@<span class="number">240</span>] - Snapshotting: <span class="number">0x500000000</span> to /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span>/snapshot<span class="meta">.500000000</span></div><div class="line"> </div><div class="line"> </div><div class="line"># 服务器<span class="number">3</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">567</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:FastLeaderElection@<span class="number">818</span>] - New election. My id = <span class="number">3</span>, proposed zxid=<span class="number">0x500000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">568</span> [myid:<span class="number">3</span>] - WARN [WorkerSender[myid=<span class="number">3</span>]:QuorumCnxManager@<span class="number">400</span>] - Cannot open channel to <span class="number">1</span> <span class="meta">at</span> election address /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span>:<span class="number">3888</span></div><div class="line"><span class="symbol">java.net.ConnectException:</span> Connection refused</div><div class="line"> <span class="meta">at</span> java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">339</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">200</span>)</div><div class="line"> <span class="meta">at</span> java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">182</span>)</div><div class="line"> <span class="meta">at</span> java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">392</span>)</div><div class="line"> <span class="meta">at</span> java.net.Socket.connect(Socket.java:<span class="number">579</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.java:<span class="number">381</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.java:<span class="number">354</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.java:<span class="number">452</span>)</div><div class="line"> <span class="meta">at</span> org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.java:<span class="number">433</span>)</div><div class="line"> <span class="meta">at</span> java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">569</span> [myid:<span class="number">3</span>] - INFO [WorkerSender[myid=<span class="number">3</span>]:QuorumPeer$QuorumServer@<span class="number">149</span>] - Resolved hostname: <span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span> to address: /<span class="number">10.154</span><span class="meta">.158</span><span class="meta">.245</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">569</span> [myid:<span class="number">3</span>] - INFO [WorkerReceiver[myid=<span class="number">3</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">3</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">575</span> [myid:<span class="number">3</span>] - INFO [WorkerReceiver[myid=<span class="number">3</span>]:FastLeaderElection@<span class="number">600</span>] - Notification: <span class="number">1</span> (message format version), <span class="number">3</span> (n.leader), <span class="number">0x500000000</span> (n.zxid), <span class="number">0xf4</span> (n.round), LOOKING (n.state), <span class="number">2</span> (n.sid), <span class="number">0x5</span> (n.peerEpoch) LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">776</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:QuorumPeer@<span class="number">856</span>] - LEADING</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">779</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">59</span>] - TCP NoDelay set to: true</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">780</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:ZooKeeperServer@<span class="number">173</span>] - Created server with tickTime <span class="number">2000</span> minSessionTimeout <span class="number">4000</span> maxSessionTimeout <span class="number">40000</span> datadir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/logs/version-<span class="number">2</span> snapdir /opt/zookeeper-<span class="number">3.4</span><span class="meta">.9</span>/data/version-<span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">44</span>,<span class="number">780</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">361</span>] - LEADING - LEADER ELECTION TOOK - <span class="number">219</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">782</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">329</span>] - Follower sid: <span class="number">2</span> : info : org.apache.zookeeper.server.quorum.QuorumPeer$QuorumServer@7f54169</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">808</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">384</span>] - Synchronizing with Follower sid: <span class="number">2</span> maxCommittedLog=<span class="number">0x0</span> minCommittedLog=<span class="number">0x0</span> peerLastZxid=<span class="number">0x300000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">809</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">458</span>] - Sending SNAP</div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">809</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">482</span>] - Sending snapshot last zxid of peer is <span class="number">0x300000000</span> zxid of leader is 0x600000000sent zxid of <span class="built_in">db</span> as <span class="number">0x500000000</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">820</span> [myid:<span class="number">3</span>] - INFO [LearnerHandler-/<span class="number">10.154</span><span class="meta">.19</span><span class="meta">.15</span>:<span class="number">42938</span>:LearnerHandler@<span class="number">518</span>] - Received NEWLEADER-ACK message from <span class="number">2</span></div><div class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">30</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">45</span>,<span class="number">820</span> [myid:<span class="number">3</span>] - INFO [QuorumPeer[myid=<span class="number">3</span>]/<span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">2181</span>:Leader@<span class="number">952</span>] - Have quorum of supporters, sids: [ <span class="number">2</span>,<span class="number">3</span> ]<span class="comment">; starting up and setting last processed zxid: 0x600000000</span></div></pre></td></tr></table></figure>
<p>再次查看status:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="comment">#服务器2</span></div><div class="line"> </div><div class="line">[root@VM_19_15_centos ~]<span class="comment"># docker exec -it s2_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">#服务器3</span></div><div class="line"> </div><div class="line">[root@VM_124_217_centos ~]<span class="comment"># docker exec -it s3_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: leader</div></pre></td></tr></table></figure>
<p>服务器3变成leader了！</p>
<p>重新启动服务器1，服务器1是follower</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]<span class="comment"># docker start s1_zookeeper_1</span></div><div class="line"> </div><div class="line">s1_zookeeper_1</div><div class="line"> </div><div class="line">[root@VM_158_245_centos ~]<span class="comment"># docker exec -it s1_zookeeper_1 bin/zkServer.sh status</span></div><div class="line"> </div><div class="line">ZooKeeper JMX enabled <span class="keyword">by</span> <span class="keyword">default</span></div><div class="line"> </div><div class="line">Using config: <span class="regexp">/opt/zookeeper-3.4.9/bin/</span>../conf/zoo.cfg</div><div class="line"> </div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://blog.51cto.com/candon123/2050091" target="_blank" rel="external">Configuring Zookeeper Cluster</a></p>
<p><a href="https://www.jianshu.com/p/ea138dba2d36" target="_blank" rel="external">多台虚拟机搭建zookeeper集群</a></p>
<p><a href="https://www.jianshu.com/p/5297773fcc1b" target="_blank" rel="external">搭建kafka集群详细教程</a></p>
<p><a href="https://zookeeper.apache.org/" target="_blank" rel="external">zookeeper.apache.org</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、什么是ZooKeeper？&quot;&gt;&lt;a href=&quot;#一、什么是ZooKeeper？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是ZooKeeper？&quot;&gt;&lt;/a&gt;一、什么是ZooKeeper？&lt;/h1&gt;&lt;p&gt;ZooKeeper（动物园管理员），顾名思义，是用来管理Hadoop（大象）、Hive（蜜蜂）、Pig（小猪）的管理员，同时Apache HBase、Apache Solr、LinkedIn Sensei等众多项目中都采用了ZooKeeper。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="kafka" scheme="http://www.kekefund.com/tags/kafka/"/>
    
      <category term="zookeeper" scheme="http://www.kekefund.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>kafka原理及Docker环境部署</title>
    <link href="http://www.kekefund.com/2018/10/26/kafka-docker/"/>
    <id>http://www.kekefund.com/2018/10/26/kafka-docker/</id>
    <published>2018-10-26T04:59:05.000Z</published>
    <updated>2018-10-26T05:09:13.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h1><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布/订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。此外，Kafka可以通过Kafka Connect连接到外部系统（用于数据输入/输出），并提供了Kafka Streams——一个Java流式处理库 (计算机)。</p>
<p>Kafka是一个分布式的、高吞吐量、高可扩展性的消息系统。Kafka 基于发布/订阅模式，通过消息解耦，使生产者和消费者异步交互，无需彼此等待。Ckafka 具有数据压缩、同时支持离线和实时数据处理等优点，适用于日志压缩收集、监控数据聚合等场景。</p>
<h1 id="关键名词："><a href="#关键名词：" class="headerlink" title="关键名词："></a>关键名词：</h1><ul>
<li><p>broker：kafka集群包含一个或者多个服务器，服务器就称作broker</p>
</li>
<li><p>producer：负责发布消息到broker</p>
</li>
<li><p>consumer：消费者，从broker获取消息</p>
</li>
<li><p>topic：发布到kafka集群的消息类别。</p>
</li>
<li><p>partition：每个topic划分为多个partition。</p>
</li>
<li><p>group：每个partition分为多个group</p>
</li>
</ul>
<h1 id="架构示意图"><a href="#架构示意图" class="headerlink" title="架构示意图"></a>架构示意图</h1><p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker01.png" alt=""></p>
<p>一个典型的Kafka集群中包含若干Producer（可以是web前端FET，或者是服务器日志等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干ConsumerGroup，以及一个Zookeeper集群。</p>
<p>Kafka通过Zookeeper管理Kafka集群配置：选举Kafka broker的leader，以及在Consumer Group发生变化时进行rebalance，因为consumer消费kafka topic的partition的offsite信息是存在Zookeeper的。</p>
<p>Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。<br><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker02.png" alt=""><br>一个典型的Cloud Kafka集群如上所示。其中的生产者Producer可能是网页活动产生的消息、或是服务日志等信息。生产者通过push模式将消息发布到Cloud Kafka的Broker集群，消费者通过pull模式从broker中消费消息。消费者Consumer被划分为若干个Consumer Group，此外，集群通过Zookeeper管理集群配置，进行leader选举，故障容错等。</p>
<h1 id="kafka特点："><a href="#kafka特点：" class="headerlink" title="kafka特点："></a>kafka特点：</h1><ul>
<li>它是一个处理流式数据的”发布-订阅“消息系统。</li>
<li>实时高效处理流式数据：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。</li>
<li>将数据安全存储在分布式集群。</li>
<li>它是运行在集群上的。</li>
<li>它将流式记录存储在topics中。</li>
<li>每个record由key, value和timestamp组成。</li>
</ul>
<h1 id="Docker搭建"><a href="#Docker搭建" class="headerlink" title="Docker搭建"></a>Docker搭建</h1><p>参考：<a href="https://github.com/wurstmeister/kafka-docker" target="_blank" rel="external">https://github.com/wurstmeister/kafka-docker</a></p>
<p>docker-compose.yml如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="attribute">version</span>: <span class="string">'2'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">zookeeper</span>:</div><div class="line">    <span class="attribute">image</span>: wurstmeister/zookeeper</div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">      - ./<span class="attribute">data</span>:/data</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"2181:2181"</span></div><div class="line">       </div><div class="line">  <span class="attribute">kafka</span>:</div><div class="line">    <span class="attribute">image</span>: wurstmeister/kafka</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"9092:9092"</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">KAFKA_ADVERTISED_HOST_NAME</span>: <span class="number">10.154</span>.<span class="number">38.115</span></div><div class="line">      <span class="attribute">KAFKA_MESSAGE_MAX_BYTES</span>: <span class="number">2000000</span></div><div class="line">      <span class="attribute">KAFKA_CREATE_TOPICS</span>: <span class="string">"Topic1:1:3,Topic2:1:1:compact"</span></div><div class="line">      <span class="attribute">KAFKA_ZOOKEEPER_CONNECT</span>: <span class="attribute">zookeeper</span>:<span class="number">2181</span></div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">      - ./<span class="attribute">kafka-logs</span>:/kafka</div><div class="line">      - /var/run/docker.<span class="attribute">sock</span>:/var/run/docker.sock</div><div class="line"> </div><div class="line">  <span class="attribute">kafka-manager</span>:</div><div class="line">    <span class="attribute">image</span>: sheepkiller/kafka-manager</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="number">9020</span>:<span class="number">9000</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">ZK_HOSTS</span>: <span class="attribute">zookeeper</span>:<span class="number">2181</span></div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>KAFKA_ADVERTISED_HOST_NAME：Docker宿主机IP（如果你要配置多个brokers，就不能设置为 localhost 或 127.0.0.1）</li>
<li>KAFKA_MESSAGE_MAX_BYTES：kafka(message.max.bytes) 会接收单个消息size的最大限制，默认值为1000000 , ≈1M</li>
<li>KAFKA_CREATE_TOPICS：初始创建的topics，可以不设置</li>
<li>环境变量./kafka-logs为防止容器销毁时消息数据丢失。</li>
<li>容器kafka-manager为yahoo出可视化kafka WEB管理平台。</li>
</ul>
<p>操作命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 启动：</span></div><div class="line"><span class="variable">$ </span>docker-compose up -d</div><div class="line"> </div><div class="line"><span class="comment"># 增加更多Broker：</span></div><div class="line"><span class="variable">$ </span>docker-compose scale kafka=<span class="number">3</span></div><div class="line"> </div><div class="line"><span class="comment"># 合并：</span></div><div class="line"><span class="variable">$ </span>docker-compose up --scale kafka=<span class="number">3</span></div></pre></td></tr></table></figure></p>
<h1 id="Kakfa使用"><a href="#Kakfa使用" class="headerlink" title="Kakfa使用"></a>Kakfa使用</h1><h2 id="1，Kafka管理节点"><a href="#1，Kafka管理节点" class="headerlink" title="1，Kafka管理节点"></a>1，Kafka管理节点</h2><p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker03.png" alt=""></p>
<h2 id="2，主题"><a href="#2，主题" class="headerlink" title="2，主题"></a>2，主题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">environment</span>:</div><div class="line">      <span class="selector-tag">KAFKA_CREATE_TOPICS</span>: "<span class="selector-tag">Topic1</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:3</span>,<span class="selector-tag">Topic2</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:1</span><span class="selector-pseudo">:compact"</span></div></pre></td></tr></table></figure>
<p>Topic1有1个Partition和3个replicas， Topic2有2个Partition，1个replica和cleanup.policy为compact。</p>
<blockquote>
<p>Topic 1 will have 1 partition and 3 replicas, Topic 2 will have 1 partition, 1 replica and a cleanup.policy set to compact.</p>
</blockquote>
<h2 id="3，读写验证"><a href="#3，读写验证" class="headerlink" title="3，读写验证"></a>3，读写验证</h2><p>读写验证的方法有很多，这里我们用kafka容器自带的工具来验证，首先进入到kafka容器的交互模式：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -<span class="keyword">it</span> kafka_kafka_1 /bin/bash</div></pre></td></tr></table></figure>
<p>创建一个主题：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/opt/kafka/bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">31</span><span class="string">.</span><span class="comment">84:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">replication</span><span class="literal">-</span><span class="comment">factor</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">partitions</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">my</span><span class="literal">-</span><span class="comment">test</span></div></pre></td></tr></table></figure></p>
<p>查看刚创建的主题：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">opt</span>/kafka/bin/kafka-topics.<span class="keyword">sh</span> --<span class="keyword">list</span> --zookeeper <span class="number">192.168</span>.<span class="number">31.84</span>:<span class="number">2181</span></div></pre></td></tr></table></figure></p>
<p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker04.png" alt=""></p>
<p>发送消息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">opt</span>/kafka/bin/kafka-console-producer.<span class="keyword">sh</span> --broker-<span class="keyword">list</span> <span class="number">192.168</span>.<span class="number">31.84</span>:<span class="number">9092</span> --topic my-test</div><div class="line">This <span class="keyword">is</span> <span class="keyword">a</span> message</div><div class="line">This <span class="keyword">is</span> another message</div></pre></td></tr></table></figure></p>
<p>读取消息：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">opt</span>/kafka/<span class="keyword">bin/kafka-console-consumer.sh </span>--<span class="keyword">bootstrap-server </span><span class="number">192</span>.<span class="number">168</span>.<span class="number">31</span>.<span class="number">84</span>:<span class="number">9092</span> --topic my-test --from-<span class="keyword">beginning</span></div></pre></td></tr></table></figure></p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>日志收集：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li>
</ul>
<p><img src="https://cbbing-1253804295.cos.ap-shanghai.myqcloud.com/kekefund/kafka_docker05.png" alt=""></p>
<ul>
<li>消息系统：解耦和生产者和消费者、缓存消息等。</li>
</ul>
<ul>
<li>用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li>
</ul>
<ul>
<li>运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li>
</ul>
<ul>
<li>流式处理：比如spark streaming和storm</li>
</ul>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>1，<a href="https://www.jianshu.com/p/bfeceb3548ad" target="_blank" rel="external">https://www.jianshu.com/p/bfeceb3548ad</a><br>2，<a href="https://www.jianshu.com/p/7f089cdff29a" target="_blank" rel="external">https://www.jianshu.com/p/7f089cdff29a</a><br>3，<a href="https://www.cnblogs.com/iforever/p/9130983.html" target="_blank" rel="external">https://www.cnblogs.com/iforever/p/9130983.html</a><br>4，<a href="http://dataunion.org/19045.html" target="_blank" rel="external">利用flume+kafka+storm+mysql构建大数据实时系统</a><br>5，<a href="http://www.dengshenyu.com/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/2017/11/14/kafka-consumer.html" target="_blank" rel="external">Kafka系列（四）Kafka消费者：从Kafka中读取数据</a><br>6，<a href="https://bbs.huaweicloud.com/blogs/b3a46198d03211e7b8317ca23e93a891" target="_blank" rel="external">基于Docker搭建分布式消息队列Kafka</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术原理&quot;&gt;&lt;a href=&quot;#技术原理&quot; class=&quot;headerlink&quot; title=&quot;技术原理&quot;&gt;&lt;/a&gt;技术原理&lt;/h1&gt;&lt;p&gt;Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="kafka" scheme="http://www.kekefund.com/tags/kafka/"/>
    
      <category term="zookeeper" scheme="http://www.kekefund.com/tags/zookeeper/"/>
    
      <category term="kafka-manager" scheme="http://www.kekefund.com/tags/kafka-manager/"/>
    
  </entry>
  
  <entry>
    <title>redash部署使用</title>
    <link href="http://www.kekefund.com/2018/09/12/redash-use/"/>
    <id>http://www.kekefund.com/2018/09/12/redash-use/</id>
    <published>2018-09-12T03:13:42.000Z</published>
    <updated>2018-09-21T07:50:46.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>从<a href="https://github.com/getredash/redash" target="_blank" rel="external">https://github.com/getredash/redash</a> 拉取代码，运行docker-compose.production.yml</p>
<h2 id="1，docker-compose文件调整"><a href="#1，docker-compose文件调整" class="headerlink" title="1，docker-compose文件调整"></a>1，docker-compose文件调整</h2><p>主要修改了两处：</p>
<p>1，增加了redis和postgres的db文件与宿主机的映射，不让docker容器停止后数据丢失。</p>
<blockquote>
<p>官方默认的docker-compose.production.yml在docker-compose down 命令后，所有的配置信息都丢失了</p>
</blockquote>
<p>2，增加了redis和postgres的端口映射，方便调试，线上环境也可以关掉。</p>
<p>3，修改REDASH_COOKIE_SECRET。</p>
<p>修改后的docker-compose.production.yml文件如下：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta"># This is an example configuration for Docker Compose. Make sure to atleast update</span></div><div class="line"><span class="meta"># the cookie secret &amp; postgres database password.</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Some other recommendations:</span></div><div class="line"><span class="meta"># 1. To persist Postgres data, assign it a volume host location.</span></div><div class="line"><span class="meta"># 2. Split the worker service to adhoc workers and scheduled queries workers.</span></div><div class="line"><span class="symbol">version:</span> <span class="string">'2'</span></div><div class="line"><span class="symbol">services:</span></div><div class="line"><span class="symbol">  server:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    command:</span> server</div><div class="line"><span class="symbol">    depends_on:</span></div><div class="line">      - postgres</div><div class="line">      - redis</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line"><span class="symbol">    environment:</span></div><div class="line"><span class="symbol">      PYTHONUNBUFFERED:</span> <span class="number">0</span></div><div class="line"><span class="symbol">      REDASH_LOG_LEVEL:</span> <span class="string">"INFO"</span></div><div class="line"><span class="symbol">      REDASH_REDIS_URL:</span> <span class="string">"redis://redis:6379/0"</span></div><div class="line"><span class="symbol">      REDASH_DATABASE_URL:</span> <span class="string">"postgresql://postgres@postgres/postgres"</span></div><div class="line"><span class="symbol">      REDASH_COOKIE_SECRET:</span> <span class="string">"Q422k6vaXUk8"</span></div><div class="line"><span class="symbol">      REDASH_WEB_WORKERS:</span> <span class="number">4</span>      </div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  worker:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    command:</span> scheduler</div><div class="line"><span class="symbol">    environment:</span></div><div class="line"><span class="symbol">      PYTHONUNBUFFERED:</span> <span class="number">0</span></div><div class="line"><span class="symbol">      REDASH_LOG_LEVEL:</span> <span class="string">"INFO"</span></div><div class="line"><span class="symbol">      REDASH_REDIS_URL:</span> <span class="string">"redis://redis:6379/0"</span></div><div class="line"><span class="symbol">      REDASH_DATABASE_URL:</span> <span class="string">"postgresql://postgres@postgres/postgres"</span></div><div class="line"><span class="symbol">      QUEUES:</span> <span class="string">"queries,scheduled_queries,celery"</span></div><div class="line"><span class="symbol">      WORKERS_COUNT:</span> <span class="number">2</span></div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  redis:</span></div><div class="line"><span class="symbol">    image:</span> redis:<span class="number">3.0</span>-alpine</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">    - <span class="string">"6379:6379"</span></div><div class="line"><span class="symbol">    volumes:</span> </div><div class="line">      - .<span class="meta-keyword">/data/</span>redis_data:/data</div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  postgres:</span></div><div class="line"><span class="symbol">    image:</span> postgres:<span class="number">9.5</span><span class="number">.6</span>-alpine</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">    - <span class="string">"5432:5432"</span></div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - .<span class="meta-keyword">/data/</span>postgresql_data:<span class="meta-keyword">/var/</span>lib<span class="meta-keyword">/postgresql/</span>data</div><div class="line"><span class="symbol">    restart:</span> always</div><div class="line"><span class="symbol">  nginx:</span></div><div class="line"><span class="symbol">    image:</span> redash/nginx:latest</div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="string">"88:80"</span></div><div class="line"><span class="symbol">    depends_on:</span></div><div class="line">      - server</div><div class="line"><span class="symbol">    links:</span></div><div class="line">      - server:redash</div><div class="line"><span class="symbol">    restart:</span> always</div></pre></td></tr></table></figure>
<h2 id="2，创建db"><a href="#2，创建db" class="headerlink" title="2，创建db"></a>2，创建db</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@VM<span class="emphasis">_38_</span>115<span class="emphasis">_centos redash]# docker-compose -f docker-compose.production.yml run --rm server create_</span>db</div><div class="line"> </div><div class="line">Starting redash<span class="emphasis">_redis_</span>1</div><div class="line"> </div><div class="line">Starting redash<span class="emphasis">_postgres_</span>1</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:39,580</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/Grammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:39,601</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/PatternGrammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,707</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Context impl PostgresqlImpl.</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,708</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Will assume transactional DDL.</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 09:02:41,724</span>][<span class="symbol">PID:1</span>][<span class="string">INFO</span>][<span class="symbol">alembic.runtime.migration</span>] Running stamp_revision -&gt; 969126bd800f</div></pre></td></tr></table></figure>
<h2 id="3，运行"><a href="#3，运行" class="headerlink" title="3，运行"></a>3，运行</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">docker-compose</span> <span class="selector-tag">-f</span> <span class="selector-tag">docker-compose</span><span class="selector-class">.production</span><span class="selector-class">.yml</span> <span class="selector-tag">up</span></div></pre></td></tr></table></figure>
<p>运行起来的容器如下:<br><img src="http://pic.cbbing.com/redash00.png" alt=""></p>
<h2 id="4，邮件配置"><a href="#4，邮件配置" class="headerlink" title="4，邮件配置"></a>4，邮件配置</h2><p>For the system to be able to send emails (for example when alerts trigger), you need to set the mail server to use and the host name of your Redash server. If you’re using one of our images, you can do this by editing the .env file:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"># Note that not all values are required, <span class="keyword">as</span> they have default values.</div><div class="line"> </div><div class="line"><span class="keyword">export</span> REDASH_MAIL_SERVER=<span class="string">""</span> # default: localhost</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_PORT=<span class="string">""</span> # default: <span class="number">25</span></div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USE_TLS=<span class="string">""</span> # default: false</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USE_SSL=<span class="string">""</span> # default: false</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_USERNAME=<span class="string">""</span> # default: None</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_PASSWORD=<span class="string">""</span> # default: None</div><div class="line"><span class="keyword">export</span> REDASH_MAIL_DEFAULT_SENDER=<span class="string">""</span> # Email address to send <span class="keyword">from</span></div><div class="line"> </div><div class="line"><span class="keyword">export</span> REDASH_HOST=<span class="string">""</span> # base address <span class="keyword">of</span> your Redash <span class="keyword">instance</span>, for example: <span class="string">"https://demo.redash.io"</span></div></pre></td></tr></table></figure>
<p>docker-compose文件中配置</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">server:</span></div><div class="line"><span class="symbol">    image:</span> redash/redash:latest</div><div class="line"><span class="symbol">    environment:</span></div><div class="line">  </div><div class="line">      ...</div><div class="line"> </div><div class="line">      <span class="meta">#邮箱 </span></div><div class="line"><span class="symbol">      REDASH_MAIL_SERVER:</span> <span class="string">"smtp.exmail.qq.com"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_PORT:</span> <span class="number">465</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USE_TLS:</span> <span class="string">"false"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USE_SSL:</span> <span class="string">"true"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_USERNAME:</span> <span class="string">"no-reply@yoursite.com"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_PASSWORD:</span> <span class="string">"111111"</span></div><div class="line"><span class="symbol">      REDASH_MAIL_DEFAULT_SENDER:</span> <span class="string">"no-reply@yoursite.com"</span></div><div class="line"><span class="symbol">      REDASH_HOST:</span> <span class="string">"http://redash.mysite.com"</span></div></pre></td></tr></table></figure>
<p>测试是否配置成功：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">[root@VM<span class="emphasis">_38_</span>115<span class="emphasis">_centos ~]# docker exec -it redash_</span>server<span class="emphasis">_1 python manage.py send_</span>test_mail</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 10:02:28,627</span>][<span class="symbol">PID:37</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/Grammar.txt</div><div class="line"> </div><div class="line">[<span class="string">2018-09-11 10:02:28,649</span>][<span class="symbol">PID:37</span>][<span class="string">INFO</span>][<span class="symbol">root</span>] Generating grammar tables from /usr/lib/python2.7/lib2to3/PatternGrammar.txt</div></pre></td></tr></table></figure>
<p>自己邮件会收到Test message。<br><img src="http://pic.cbbing.com/redash01.png" alt=""></p>
<blockquote>
<p>PS：配置成功了，但在Alerts中触发了警告，设置的接受邮件没收到警告信息。还没找到原因…</p>
</blockquote>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="1，配置数据库"><a href="#1，配置数据库" class="headerlink" title="1，配置数据库"></a>1，配置数据库</h2><p><img src="http://pic.cbbing.com/redash02.png" alt=""></p>
<h2 id="2，查询语句"><a href="#2，查询语句" class="headerlink" title="2，查询语句"></a>2，查询语句</h2><ul>
<li>获取表的更新时间<br><img src="http://pic.cbbing.com/redash03.png" alt=""></li>
</ul>
<p>增加图表展示：<br><img src="http://pic.cbbing.com/redash04.png" alt=""></p>
<h2 id="3，Dashboards"><a href="#3，Dashboards" class="headerlink" title="3，Dashboards"></a>3，Dashboards</h2><p><img src="http://pic.cbbing.com/redash05.png" alt=""></p>
<h1 id="三、用户管理"><a href="#三、用户管理" class="headerlink" title="三、用户管理"></a>三、用户管理</h1><p><img src="http://pic.cbbing.com/redash06.png" alt=""><br>添加用户<br><img src="http://pic.cbbing.com/redash07.png" alt=""></p>
<h1 id="四、特性"><a href="#四、特性" class="headerlink" title="四、特性"></a>四、特性</h1><h2 id="1，支持iframe嵌入到其它网页"><a href="#1，支持iframe嵌入到其它网页" class="headerlink" title="1，支持iframe嵌入到其它网页"></a>1，支持iframe嵌入到其它网页</h2><p>对于任何Query，表格和图形都支持embed<br><img src="http://pic.cbbing.com/redash28.png" alt=""><br>点击Embed弹出：</p>
<p><img src="http://pic.cbbing.com/redash09.png" alt=""><br>这个功能可以实现自己系统中集成报表展示。</p>
<h2 id="2，可视化图形支持的类型"><a href="#2，可视化图形支持的类型" class="headerlink" title="2，可视化图形支持的类型"></a>2，可视化图形支持的类型</h2><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><p><img src="http://pic.cbbing.com/redash10.png" alt=""></p>
<h3 id="线形图、柱状图、面积图、饼图、散点图"><a href="#线形图、柱状图、面积图、饼图、散点图" class="headerlink" title="线形图、柱状图、面积图、饼图、散点图"></a>线形图、柱状图、面积图、饼图、散点图</h3><p><img src="http://pic.cbbing.com/redash11.png" alt=""><br><img src="http://pic.cbbing.com/redash12.png" alt=""><br><img src="http://pic.cbbing.com/redash13.png" alt=""></p>
<h3 id="队列图"><a href="#队列图" class="headerlink" title="队列图"></a>队列图</h3><p><img src="http://pic.cbbing.com/redash14.png" alt=""></p>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p><img src="http://pic.cbbing.com/redash15.png" alt=""></p>
<h3 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h3><p><img src="http://pic.cbbing.com/redash16.png" alt=""></p>
<h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><p><img src="http://pic.cbbing.com/redash17.png" alt=""></p>
<h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><p><img src="http://pic.cbbing.com/redash18.png" alt=""></p>
<h3 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h3><p><img src="http://pic.cbbing.com/redash19.png" alt=""></p>
<blockquote>
<p>桑基图用于表达流量分布于结构对比，最初的发明者使用它来呈现能量的流动与分布。</p>
</blockquote>
<h3 id="旭日图（Sunburst）"><a href="#旭日图（Sunburst）" class="headerlink" title="旭日图（Sunburst）"></a>旭日图（Sunburst）</h3><p><img src="http://pic.cbbing.com/redash20.png" alt=""></p>
<h3 id="词云图"><a href="#词云图" class="headerlink" title="词云图"></a>词云图</h3><p><img src="http://pic.cbbing.com/redash21.png" alt=""></p>
<h1 id="五，实践"><a href="#五，实践" class="headerlink" title="五，实践"></a>五，实践</h1><p>根据scrapy log日志表，设计出一张bashboard监控面板：<br><img src="http://pic.cbbing.com/redash22.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://redash.io/help/open-source/setup" target="_blank" rel="external">redash邮箱设置</a></p>
<p><a href="https://redash.io/help/open-source/admin-guide/env-vars-settings" target="_blank" rel="external">redash环境变量</a></p>
<p><a href="https://redash.io/help/user-guide/visualizations/visualization-types" target="_blank" rel="external">Visualization Types</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;p&gt;从&lt;a href=&quot;https://github.com/getredash/redash&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="redash" scheme="http://www.kekefund.com/tags/redash/"/>
    
  </entry>
  
  <entry>
    <title>jenkins 批量添加任务job</title>
    <link href="http://www.kekefund.com/2018/08/29/jenkins-jobs/"/>
    <id>http://www.kekefund.com/2018/08/29/jenkins-jobs/</id>
    <published>2018-08-29T07:06:15.000Z</published>
    <updated>2018-09-21T07:50:46.088Z</updated>
    
    <content type="html"><![CDATA[<p>最近重构一个Scrapy爬虫项目，需要将300个spider的调度任务在jenkins中添加。这已经超过了手动一个一个添加任务的极限，是时候要借助工具批量添加了。</p>
<h1 id="Jenkins-API"><a href="#Jenkins-API" class="headerlink" title="Jenkins API"></a>Jenkins API</h1><p>Jenkins提供了一套远端访问的API，目前有3种方式：</p>
<ul>
<li><p>XML</p>
</li>
<li><p>JSON with JSONP support</p>
</li>
<li><p>Python</p>
</li>
</ul>
<p>远程API可以执行以下这些功能：</p>
<ul>
<li><p>创建/复制 job</p>
</li>
<li><p>触发一个新的构建</p>
</li>
<li><p>查询Jenkins的运行状态</p>
</li>
</ul>
<h1 id="Jenkins-Job模板"><a href="#Jenkins-Job模板" class="headerlink" title="Jenkins Job模板"></a>Jenkins Job模板</h1><h2 id="1，创建job"><a href="#1，创建job" class="headerlink" title="1，创建job"></a>1，创建job</h2><p>本文的思路是先在网页上手动创建一个Job，然后将Job的配置文件拷贝至本地，制作成模板。</p>
<p><img src="http://pic.cbbing.com/jenkins_job01.png" alt=""></p>
<h2 id="2，配置job"><a href="#2，配置job" class="headerlink" title="2，配置job"></a>2，配置job</h2><p>模板job主要有两块内容：</p>
<p>1，【构建触发器】定时构建</p>
<p><img src="http://pic.cbbing.com/jenkins_job02.png" alt=""></p>
<ul>
<li>【构建】执行shell</li>
</ul>
<p><img src="http://pic.cbbing.com/jenkins_job03.png" alt=""></p>
<p>其中HOST_TEST，PROJECT_TEST是在jenkins系统配置中设置的环境变量，目的是为了更换scrapyd服务器时更加灵活。</p>
<p><img src="http://pic.cbbing.com/jenkins_job05.png" alt=""></p>
<h2 id="3，制作模板"><a href="#3，制作模板" class="headerlink" title="3，制作模板"></a>3，制作模板</h2><p>进入到jenkins的安装目录（默认为/var/lib/jenkins/)，在/var/lib/jenkins/jobs/【采集】template目录下找到config.xml文件，拷贝至本地</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.1"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">project</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">actions</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">keepDependencies</span>&gt;</span>false<span class="tag">&lt;/<span class="name">keepDependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scm</span> <span class="attr">class</span>=<span class="string">"hudson.scm.NullSCM"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canRoam</span>&gt;</span>true<span class="tag">&lt;/<span class="name">canRoam</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">disabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">disabled</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockBuildWhenDownstreamBuilding</span>&gt;</span>false<span class="tag">&lt;/<span class="name">blockBuildWhenDownstreamBuilding</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockBuildWhenUpstreamBuilding</span>&gt;</span>false<span class="tag">&lt;/<span class="name">blockBuildWhenUpstreamBuilding</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">triggers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hudson.triggers.TimerTrigger</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">spec</span>&gt;</span>0 12 * * *<span class="tag">&lt;/<span class="name">spec</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">hudson.triggers.TimerTrigger</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">triggers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">concurrentBuild</span>&gt;</span>false<span class="tag">&lt;/<span class="name">concurrentBuild</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">builders</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hudson.tasks.Shell</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">command</span>&gt;</span>curl $<span class="template-variable">&#123;HOST_TEST&#125;</span><span class="xml">/schedule.json -d project=$</span><span class="template-variable">&#123;PROJECT_TEST&#125;</span><span class="xml"> -d spider='tt_test_spider'<span class="tag">&lt;/<span class="name">command</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">hudson.tasks.Shell</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">builders</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">publishers</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">buildWrappers</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>批量创建的job主要差异在spider名称和crontab定时任务的设置不同，将这两处模板化：</p>
<p>config.xml</p>
<p><img src="http://pic.cbbing.com/jenkins_job06.png" alt=""></p>
<p>该文件中有4个变量要配置：</p>
<ul>
<li><p>crontab_value</p>
</li>
<li><p>spider_name</p>
</li>
<li><p>HOST_TEMPLATE</p>
</li>
<li><p>PROJECT_TEMPLATE</p>
</li>
</ul>
<h1 id="Python-Jenkins脚本批量创建job"><a href="#Python-Jenkins脚本批量创建job" class="headerlink" title="Python-Jenkins脚本批量创建job"></a>Python-Jenkins脚本批量创建job</h1><h2 id="1，安装"><a href="#1，安装" class="headerlink" title="1，安装"></a>1，安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pip <span class="keyword">install</span> python-jenkins</div></pre></td></tr></table></figure>
<h1 id="2，脚本"><a href="#2，脚本" class="headerlink" title="2，脚本"></a>2，脚本</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jenkins</div><div class="line">template_xml=<span class="string">"config.xml"</span></div><div class="line"><span class="comment">#与网页版Jenkins登录的账号、密码一致</span></div><div class="line">server = jenkins.Jenkins(<span class="string">'http://yourip:8080/'</span>, username=<span class="string">'admin'</span>, password=<span class="string">'admin'</span>)</div><div class="line"> </div><div class="line">job_list = &#123;   </div><div class="line">    <span class="string">"test1_spider"</span>: <span class="string">"30 2 * * *"</span>,</div><div class="line">    <span class="string">"test2_spider"</span>: <span class="string">"30 3 * * *"</span>,</div><div class="line">    <span class="string">"test3_spider"</span>: <span class="string">"55 11,23 * * *"</span>,</div><div class="line">&#125;</div><div class="line"> </div><div class="line">classify = <span class="string">'采集'</span></div><div class="line">host = <span class="string">'http://0.0.0.0:6800/'</span></div><div class="line">project = <span class="string">'test_spider'</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> spider_name, crontab <span class="keyword">in</span> job_list.items():</div><div class="line">    <span class="keyword">with</span> open(template_xml) as f:</div><div class="line">        profile = f.read()</div><div class="line"> </div><div class="line">    JOB_CONFIG=profile.replace(<span class="string">"crontab_value"</span>, crontab)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"spider_name"</span>,spider_name)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"HOST_TEMPLATE"</span>, host)<span class="string">\</span></div><div class="line">        .replace(<span class="string">"PROJECT_TEMPLATE"</span>, project)</div><div class="line"> </div><div class="line">    <span class="built_in">print</span>(JOB_CONFIG[-<span class="number">200</span>:])</div><div class="line"> </div><div class="line">    view_name = <span class="string">"【&#123;&#125;】&#123;&#125;_"</span>.format(classify, type)</div><div class="line">    server.create_job(view_name+name, JOB_CONFIG)</div><div class="line">    <span class="comment"># del_job=server.delete_job(view_name+name)</span></div><div class="line">    <span class="comment"># print(del_job)</span></div></pre></td></tr></table></figure>
<h1 id="3，结果"><a href="#3，结果" class="headerlink" title="3，结果"></a>3，结果</h1><p><img src="http://pic.cbbing.com/jenkins_job07.png" alt=""></p>
<p>搞定！分分钟创建了几百个job。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://wiki.jenkins.io/display/JENKINS/Remote+access+API" target="_blank" rel="external">https://wiki.jenkins.io/display/JENKINS/Remote+access+API</a><br><a href="http://www.xskh.club/2017/07/31/python/%E6%89%B9%E9%87%8F%E5%85%8B%E9%9A%86jenkins%E7%9A%84job/" target="_blank" rel="external">批量克隆jenkins的job</a><br><a href="https://www.cnblogs.com/znicy/p/5498609.html" target="_blank" rel="external">https://www.cnblogs.com/znicy/p/5498609.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重构一个Scrapy爬虫项目，需要将300个spider的调度任务在jenkins中添加。这已经超过了手动一个一个添加任务的极限，是时候要借助工具批量添加了。&lt;/p&gt;
&lt;h1 id=&quot;Jenkins-API&quot;&gt;&lt;a href=&quot;#Jenkins-API&quot; class=&quot;
    
    </summary>
    
      <category term="运维" scheme="http://www.kekefund.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Jenkins" scheme="http://www.kekefund.com/tags/Jenkins/"/>
    
      <category term="api" scheme="http://www.kekefund.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Django中配置Gunicorn</title>
    <link href="http://www.kekefund.com/2018/08/24/django-gunicorn/"/>
    <id>http://www.kekefund.com/2018/08/24/django-gunicorn/</id>
    <published>2018-08-24T01:51:17.000Z</published>
    <updated>2018-08-24T02:04:32.909Z</updated>
    
    <content type="html"><![CDATA[<p>Gunicorn是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植至Ruby的独角兽（Unicorn）项目，使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。</p>
<p>Django自带的简易服务器，它是一个纯Python写的轻量级的WEB服务器，但它是为了开发而设计的，不适合在生产环境中部署。<br><a id="more"></a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8000</span></div></pre></td></tr></table></figure>
<p>在Django中配置gunicorn，适合高并发的生产环境。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>Gunicorn是基于prefork模式的Python wsgi应用服务器，支持 Unix like的系统</p>
</li>
<li><p>采用epoll (Linux下) 非阻塞网络I/O 模型</p>
</li>
<li><p>多种Worker类型可以选择 同步的，基于事件的（gevent tornado等），基于多线程的</p>
</li>
<li><p>高性能，比之uwsgi不相上下</p>
</li>
<li><p>配置使用非常简单</p>
</li>
<li><p>支持 Python 2.x &gt;= 2.6 or Python 3.x &gt;= 3.2</p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> gunicorn</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>settings.py</li>
</ul>
<p>在settings.py添加gunicorn。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...</div><div class="line">    <span class="string">'gunicorn'</span>,</div><div class="line">    ...</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>gunicorn配置文件gunicorn.conf.py</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.handlers</div><div class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> WatchedFileHandler</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"></div><div class="line">bind = <span class="string">"0.0.0.0:8091"</span>   #绑定的ip与端口</div><div class="line">backlog = <span class="number">512</span>                #监听队列数量，<span class="number">64</span><span class="number">-2048</span></div><div class="line">#chdir = <span class="string">'/home/test/server/bin'</span>  #gunicorn要切换到的目的工作目录</div><div class="line">worker_class = <span class="string">'sync'</span> #使用gevent模式，还可以使用sync 模式，默认的是sync模式</div><div class="line">workers = <span class="number">4</span> # multiprocessing.cpu_count()    #进程数</div><div class="line">threads = <span class="number">16</span> #multiprocessing.cpu_count()*<span class="number">4</span> #指定每个进程开启的线程数</div><div class="line">loglevel = <span class="string">'info'</span> #日志级别，这个日志级别指的是错误日志的级别，而访问日志的级别无法设置</div><div class="line">access_log_format = <span class="string">'%(t)s %(p)s %(h)s "%(r)s" %(s)s %(L)s %(b)s %(f)s" "%(a)s"'</span></div><div class="line"></div><div class="line"># accesslog = <span class="string">"/home/log/gunicorn_access.log"</span>      #访问日志文件</div><div class="line">#errorlog = <span class="string">"/home/log/gunicorn_error.log"</span>        #错误日志文件</div><div class="line">accesslog = <span class="string">"-"</span>  #访问日志文件，<span class="string">"-"</span> 表示标准输出</div><div class="line">errorlog = <span class="string">"-"</span>   #错误日志文件，<span class="string">"-"</span> 表示标准输出</div><div class="line"></div><div class="line">proc_name = <span class="string">'fof_api'</span>   #进程名</div></pre></td></tr></table></figure>
<p>其中access_log_format选项的变量含义如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">其每个选项的含义如下：</div><div class="line">h          remote <span class="selector-tag">address</span></div><div class="line">l          <span class="string">'-'</span></div><div class="line">u          currently <span class="string">'-'</span>, may be user name <span class="keyword">in</span> future releases</div><div class="line">t          date of the request</div><div class="line">r          status line (e<span class="selector-class">.g</span>. ``GET / HTTP/<span class="number">1.1</span>``)</div><div class="line">s          status</div><div class="line"><span class="selector-tag">b</span>          response length or <span class="string">'-'</span></div><div class="line">f          referer</div><div class="line"><span class="selector-tag">a</span>          user agent</div><div class="line">T          request <span class="selector-tag">time</span> <span class="keyword">in</span> seconds</div><div class="line">D          request <span class="selector-tag">time</span> <span class="keyword">in</span> microseconds</div><div class="line">L          request <span class="selector-tag">time</span> <span class="keyword">in</span> decimal seconds</div><div class="line"><span class="selector-tag">p</span>          process ID</div></pre></td></tr></table></figure></p>
<p>accesslog、errorlog日志文件可以写到文件，也可以标准输出到屏幕。</p>
<h1 id="正常启动"><a href="#正常启动" class="headerlink" title="正常启动"></a>正常启动</h1><p>以gunicorn.conf.py配置文件启动gunicorn<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunicorn -c gunicorn<span class="selector-class">.conf</span><span class="selector-class">.py</span> api<span class="selector-class">.wsgi</span>:application</div></pre></td></tr></table></figure></p>
<p>也可以直接启动<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">api</span><span class="selector-class">.wsgi</span><span class="selector-pseudo">:application</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8091</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-k</span> <span class="selector-tag">gthread</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>-w 4是启动4个进程，可以支持更多的并发。</p>
</blockquote>
<p>or</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">api</span><span class="selector-class">.wsgi</span><span class="selector-pseudo">:application</span> <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8091</span> <span class="selector-tag">-w</span> 4 <span class="selector-tag">-k</span> <span class="selector-tag">gthread</span>  <span class="selector-tag">--thread</span> 40 <span class="selector-tag">--max-requests</span> 4096 <span class="selector-tag">--max-requests-jitter</span> 512</div></pre></td></tr></table></figure>
<blockquote>
<p>参数详见官网的配置说明，参考文章底部的链接</p>
</blockquote>
<h1 id="Docker方式启动"><a href="#Docker方式启动" class="headerlink" title="Docker方式启动"></a>Docker方式启动</h1><p>Dockerfile文件<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /usr/src/app/requirements.txt</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt</span></div><div class="line"> </div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn -c gunicorn.conf.py api.wsgi:application</span></div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">45</span>:<span class="number">42</span> +<span class="number">0800</span>] &lt;<span class="number">16</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/compose/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">5.369574</span> <span class="number">1113</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">45</span>:<span class="number">43</span> +<span class="number">0800</span>] &lt;<span class="number">14</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/fund_static/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">5.868518</span> <span class="number">481</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">46</span>:<span class="number">00</span> +<span class="number">0800</span>] &lt;<span class="number">334</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/adjustment/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">0.845745</span> <span class="number">1398</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div><div class="line">[<span class="number">24</span><span class="regexp">/Aug/</span><span class="number">2018</span>:<span class="number">09</span>:<span class="number">46</span>:<span class="number">00</span> +<span class="number">0800</span>] &lt;<span class="number">12</span>&gt; <span class="number">10.154</span><span class="number">.53</span><span class="number">.113</span> <span class="string">"POST /api/v1/risk/ HTTP/1.0"</span> <span class="number">200</span> <span class="number">0.860662</span> <span class="number">1254</span> <span class="string">https:</span><span class="comment">//xxxx.com/ProductPerspective/detail" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://docs.gunicorn.org/en/stable/settings.html?highlight=backlog" target="_blank" rel="external">gunicorn参数</a></li>
<li><a href="https://www.jianshu.com/p/260f18aa5462" target="_blank" rel="external">Gunicorn运行与配置</a></li>
<li><a href="https://blog.csdn.net/y472360651/article/details/78538188" target="_blank" rel="external">Gunicorn-配置详解</a></li>
<li><a href="http://xiaorui.cc/2014/11/22/%E7%94%A8gunicorn%E5%92%8Cgevent%E6%8F%90%E9%AB%98python-web%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%A7%E8%83%BD/" target="_blank" rel="external">用gunicorn和gevent提高python-web框架的性能</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gunicorn是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植至Ruby的独角兽（Unicorn）项目，使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。&lt;/p&gt;
&lt;p&gt;Django自带的简易服务器，它是一个纯Python写的轻量级的WEB服务器，但它是为了开发而设计的，不适合在生产环境中部署。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Gunicorn" scheme="http://www.kekefund.com/tags/Gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>服务器被矿机程序攻击</title>
    <link href="http://www.kekefund.com/2018/07/31/attack-miner/"/>
    <id>http://www.kekefund.com/2018/07/31/attack-miner/</id>
    <published>2018-07-31T01:28:46.000Z</published>
    <updated>2018-09-21T07:50:46.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h1><p>今天早上7:00，收到腾讯云监控发来基础监控告警：某台服务器的CPU利用率为100%。SSH登录到服务器正常，说明root密码还没有被更改，我最初怀疑有可能是DDos攻击。<br><a id="more"></a><br>执行top命令：<br><img src="http://pic.cbbing.com/attack02.png" alt=""></p>
<p>发现有个名为qW3xT.2的程序CPU占用高达397.3%，服务器为4核8G，那就基本上把所有CPU资源占了，也就是腾讯云发来的CPU使用率大于99%。</p>
<p>Google搜索第一条显示这是一个矿机程序。</p>
<p><img src="http://pic.cbbing.com/attack03.png" alt=""></p>
<p>那就是说明云服务器被矿机程序破解了。</p>
<ul>
<li>切换到/tmp目录：<br><img src="http://pic.cbbing.com/attack01.png" alt=""></li>
</ul>
<p>有两个可执行程序ddgs.3013和qW3xT.2</p>
<ul>
<li>查看定时任务：<br><img src="http://pic.cbbing.com/attack04.png" alt=""></li>
</ul>
<p>执行远程脚本<a href="http://149.56.106.215:8000/i.sh" target="_blank" rel="external">http://149.56.106.215:8000/i.sh</a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1，删掉/tmp下的ddgs.3013和qW3xT.2<br>2.，删掉cron任务</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>云服务器上近期搭建了一个redis服务，没采用密码验证，挖矿程序就是通过Redis拿到了系统的控制权。</p>
<h1 id="关于reidis-未授权登陆漏洞"><a href="#关于reidis-未授权登陆漏洞" class="headerlink" title="关于reidis 未授权登陆漏洞"></a>关于reidis 未授权登陆漏洞</h1><h2 id="漏洞概要"><a href="#漏洞概要" class="headerlink" title="漏洞概要"></a>漏洞概要</h2><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将Redis服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功将自己的公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以直接登录目标服务器。</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Redis 安全模型的观念是: “请不要将Redis暴露在公开网络中, 因为让不受信任的客户接触到Redis是非常危险的” 。<br>Redis 作者之所以放弃解决未授权访问导致的不安全性是因为, 99.99%使用Redis的场景都是在沙盒化的环境中, 为了0.01%的可能性增加安全规则的同时也增加了复杂性, 虽然这个问题的并不是不能解决的, 但是这在他的设计哲学中仍是不划算的。<br>因为其他受信任用户需要使用Redis或者因为运维人员的疏忽等原因，部分Redis 绑定在0.0.0.0:6379，并且没有开启认证（这是Redis的默认配置），如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip访问等，将会导致Redis服务直接暴露在公网上，导致其他用户可以直接在非授权情况下直接访问Redis服务并进行相关操作。<br>利用Redis自身的相关方法，可以进行写文件操作，攻击者可以成功将自己的公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys文件中，进而可以直接登录目标服务器。 （导致可以执行任何操作）</p>
<p>参考</p>
<blockquote>
<p><a href="https://wwxinjie.github.io/2018/06/15/linux-clean-mineral/" target="_blank" rel="external">https://wwxinjie.github.io/2018/06/15/linux-clean-mineral/</a><br><a href="https://blog.csdn.net/whs_321/article/details/51734602" target="_blank" rel="external">https://blog.csdn.net/whs_321/article/details/51734602</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事件经过&quot;&gt;&lt;a href=&quot;#事件经过&quot; class=&quot;headerlink&quot; title=&quot;事件经过&quot;&gt;&lt;/a&gt;事件经过&lt;/h1&gt;&lt;p&gt;今天早上7:00，收到腾讯云监控发来基础监控告警：某台服务器的CPU利用率为100%。SSH登录到服务器正常，说明root密码还没有被更改，我最初怀疑有可能是DDos攻击。&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://www.kekefund.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://www.kekefund.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="攻击" scheme="http://www.kekefund.com/tags/%E6%94%BB%E5%87%BB/"/>
    
      <category term="矿机" scheme="http://www.kekefund.com/tags/%E7%9F%BF%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>API自动化测试</title>
    <link href="http://www.kekefund.com/2018/07/15/api-test/"/>
    <id>http://www.kekefund.com/2018/07/15/api-test/</id>
    <published>2018-07-15T07:11:41.000Z</published>
    <updated>2018-12-04T08:35:51.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>公司目前用的前后端分离的架构，API接口的稳定性直接影响了与前端团队的沟通效率，前端开发和测试人员都比较熟练的使用Postman来测试API接口。</p>
<p>API接口的自动化测试有很多方案，但Postman+Newman+Jenkins的组合方案，对于测试人员的学习成本最低，实现起来速度是最快的。</p>
<p>由于公司目前已经采用Jenkins做自动化部署，因此只需要安装Newman，整个流程即可走通。<br><a id="more"></a></p>
<p>实现步骤如下：</p>
<ol>
<li><p>Postman编写测试用例；</p>
</li>
<li><p>导出到json文件</p>
</li>
<li><p>Newman执行json文件</p>
</li>
<li><p>Jenkins调用newman命令，定时执行或者触发执行</p>
</li>
</ol>
<h1 id="1，Postman编写测试用例"><a href="#1，Postman编写测试用例" class="headerlink" title="1，Postman编写测试用例"></a>1，Postman编写测试用例</h1><blockquote>
<p>Postman is the only complete API development environment, for API developers, used by more than 5 million developers and 100,000 companies worldwide. Postman makes working with APIs faster and easier by supporting developers at every stage of their workflow, and is available for Mac OS X, Windows, and Linux users.</p>
</blockquote>
<p><img src="http://pic.cbbing.com/test01.png" alt=""></p>
<p>配置环境变量：<br><img src="http://pic.cbbing.com/test02.png" alt=""></p>
<p>这里建立了测试环境和生产环境；</p>
<p><img src="http://pic.cbbing.com/test04.png" alt=""><br><img src="http://pic.cbbing.com/test03.png" alt=""><br>配置好环境变量后，就可以在api请求时用环境变量，方便切换测试环境和生产环境。<br><img src="http://pic.cbbing.com/test05.png" alt=""></p>
<p>可以直接在Postman中跑测试用例<br><img src="http://pic.cbbing.com/test06.png" alt=""></p>
<p>如果是临时的API接口测试，到这步就可以了。当然，我们的目的是实现测试自动化，接着往下走。</p>
<h1 id="2，导出到JSON"><a href="#2，导出到JSON" class="headerlink" title="2，导出到JSON"></a>2，导出到JSON</h1><p><img src="http://pic.cbbing.com/test07.png" alt=""></p>
<h1 id="3，添加到github项目"><a href="#3，添加到github项目" class="headerlink" title="3，添加到github项目"></a>3，添加到github项目</h1><p>创建一个github项目，专门存储postman脚本。这是为了方便项目成员在本地提交，跟踪版本。<br><img src="http://pic.cbbing.com/test08.png" alt=""></p>
<h1 id="4，Jenkins集成"><a href="#4，Jenkins集成" class="headerlink" title="4，Jenkins集成"></a>4，Jenkins集成</h1><p>新建一个自由风格的项目<br><img src="http://pic.cbbing.com/test09.png" alt=""><br>配置git<br><img src="http://pic.cbbing.com/test10.png" alt=""></p>
<p>构建触发器<br><img src="http://pic.cbbing.com/test11.png" alt=""><br>每天6点执行一次。</p>
<p>执行SHELL<br><img src="http://pic.cbbing.com/test12.png" alt=""></p>
<p>其中 newman是预先安装在系统上的：<br>先安装nodejs，再安装newman:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g newman</div></pre></td></tr></table></figure>
<p>脚本：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newman --version</div><div class="line"></div><div class="line">newman run Brison<span class="selector-class">.postman_collection</span><span class="selector-class">.json</span> -e test<span class="selector-class">.postman_environment</span><span class="selector-class">.json</span> --reporters cli,<span class="selector-tag">html</span>,json,junit --reporter-json-export brison_jsonOut<span class="selector-class">.json</span> --reporter-junit-export brison_xmlOut<span class="selector-class">.xml</span> --reporter-html-export brison_htmlOut.html</div></pre></td></tr></table></figure>
<p>Brison.postman_collection.json是postman请求 collection集合。<br>test.postman_environment.json 是环境变量。<br>生成brison_jsonOut.json，brison_xmlOut.xml，brison_htmlOut.html</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/wanglin_lin/article/details/51959342" target="_blank" rel="external">https://blog.csdn.net/wanglin_lin/article/details/51959342</a></p>
<p><a href="https://www.jianshu.com/p/dd0db1b13cfc" target="_blank" rel="external">https://www.jianshu.com/p/dd0db1b13cfc</a></p>
<p><a href="https://www.getpostman.com/docs/v6/postman/collection_runs/integration_with_jenkins" target="_blank" rel="external">https://www.getpostman.com/docs/v6/postman/collection_runs/integration_with_jenkins</a></p>
<p><a href="https://www.jianshu.com/p/d958fc8bf7a4" target="_blank" rel="external">https://www.jianshu.com/p/d958fc8bf7a4</a></p>
<p><a href="https://www.jianshu.com/p/2c83f2ffbd5e" target="_blank" rel="external">https://www.jianshu.com/p/2c83f2ffbd5e</a></p>
<p><a href="https://www.cnblogs.com/lsjdddddd/p/5734531.html" target="_blank" rel="external">https://www.cnblogs.com/lsjdddddd/p/5734531.html</a></p>
<p><a href="https://www.jianshu.com/p/9b196c71d1fc" target="_blank" rel="external">https://www.jianshu.com/p/9b196c71d1fc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;公司目前用的前后端分离的架构，API接口的稳定性直接影响了与前端团队的沟通效率，前端开发和测试人员都比较熟练的使用Postman来测试API接口。&lt;/p&gt;
&lt;p&gt;API接口的自动化测试有很多方案，但Postman+Newman+Jenkins的组合方案，对于测试人员的学习成本最低，实现起来速度是最快的。&lt;/p&gt;
&lt;p&gt;由于公司目前已经采用Jenkins做自动化部署，因此只需要安装Newman，整个流程即可走通。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="postman" scheme="http://www.kekefund.com/tags/postman/"/>
    
      <category term="newman" scheme="http://www.kekefund.com/tags/newman/"/>
    
      <category term="测试" scheme="http://www.kekefund.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>内网映射方案(lanproxy)</title>
    <link href="http://www.kekefund.com/2018/06/24/lanproxy/"/>
    <id>http://www.kekefund.com/2018/06/24/lanproxy/</id>
    <published>2018-06-24T03:56:49.000Z</published>
    <updated>2018-12-04T08:36:25.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>现在运营商提供的宽带服务，无论是动态IP，还是固定IP，默认都是禁止所有端口服务的（目前了解上海是这样的），在路由器上配置的端口映射和DMZ都失效。申请开通端口需要域名备案，过程比较繁琐。<br>运营商这么做是为了防止个人随意开设各种非法服务，也防止黑客通过扫描器进行抓鸡和批量扫描。这样封禁，虽然一定程度上保证了我们的网络安全，比如说前段时间的勒索病毒正因为国内大部分用户没有独立的公网IP，并且操作系统最容易爆发漏洞的一些，135，139等端口被运营商封禁了，使得国内个人家庭电脑中招的概率小了很多；但是导致即使有公网IP，也无法使用常用端口向外网提供服务。<br><a id="more"></a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>通过NAPT原理得知：NAPT实现了内网主机在没有公网IP的情况下访问公网主机。<br>那么我们可以这样做：假设公网IP为23.23.23.23，内网IP为192.168.1.2。<br>公网主机先监听80端口，监听这个端口是用于向外部提供一个HTTP服务，80是WEB服务器的默认端口。同时其他任意一个端口（这里我们假设为7777），监听这个端口是用于让内网服务器主动连接进来打通一个隧道。接着内网再主动向公网主机的7777发起一个请求，这样内网就成功与公网主机建立了一个连接通道。</p>
<p>然后当有任何客户端主动连接公网的80端口时，公网接收到连接请求之后马上把这连接请求通过先前建立好的隧道转发到内网主机，内网主机接收到来自隧道的数据包后再主动连接内网主机自身的80端口，连接成功之后将数据包原封不动地转发数据包给80端口，待HTTP服务器程序处理完这个数据包，生成了响应报文之后再原路转发回去，最终到达公网的80端口，然后返回给最开始请求公网服务器80端口的客户端。<br><img src="http://pic.cbbing.com/lanproxy1.png" alt=""></p>
<p>大名鼎鼎的花生壳内网版以及nat123等内网穿透工具的原理基本就是如此。</p>
<blockquote>
<p><a href="https://juejin.im/entry/59f2ed94518825098951554c" target="_blank" rel="external">https://juejin.im/entry/59f2ed94518825098951554c</a></p>
</blockquote>
<h1 id="lanproxy"><a href="#lanproxy" class="headerlink" title="lanproxy"></a>lanproxy</h1><p>lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，目前仅支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面…）。目前市面上提供类似服务的有花生壳、TeamViewer、GoToMyCloud等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。</p>
<h2 id="1，服务器配置"><a href="#1，服务器配置" class="headerlink" title="1，服务器配置"></a>1，服务器配置</h2><p>服务器如腾讯云服务器、阿里云服务器，必须有独立IP。<br>下载<a href="https://seafile.io2c.com/d/3b1b44fee5f74992bb17/?p=/lanproxy-server&amp;mode=list" target="_blank" rel="external">lanproxy-server-20171116.zip</a>，解压后放到服务器上。<br>server的配置文件放置在conf目录中，配置 config.properties<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server.bind=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line"></div><div class="line">#与代理客户端通信端口</div><div class="line">server.port=<span class="number">4900</span></div><div class="line"></div><div class="line">#ssl相关配置</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.enable</span>=true</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.bind</span>=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.port</span>=<span class="number">4993</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.jksPath</span>=test<span class="selector-class">.jks</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.keyStorePassword</span>=<span class="number">123456</span></div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.keyManagerPassword</span>=<span class="number">123456</span></div><div class="line"></div><div class="line">#这个配置可以忽略</div><div class="line">server<span class="selector-class">.ssl</span><span class="selector-class">.needsClientAuth</span>=false</div><div class="line"></div><div class="line">#WEB在线配置管理相关信息</div><div class="line">config<span class="selector-class">.server</span><span class="selector-class">.bind</span>=<span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">config<span class="selector-class">.server</span><span class="selector-class">.port</span>=<span class="number">8090</span></div><div class="line">config<span class="selector-class">.admin</span><span class="selector-class">.username</span>=admin</div><div class="line">config<span class="selector-class">.admin</span><span class="selector-class">.password</span>=admin</div></pre></td></tr></table></figure></p>
<p>代理配置，打开地址 <a href="http://ip:8090" target="_blank" rel="external">http://ip:8090</a> ，使用上面配置中配置的用户名密码登录<br><img src="http://pic.cbbing.com/lanproxy2.png" alt=""></p>
<p>添加客户端:<br><img src="http://pic.cbbing.com/lanproxy3.png" alt=""></p>
<p>配置客户端：<br><img src="http://pic.cbbing.com/lanproxy4.png" alt=""></p>
<p>示例是将公网的80、443端口映射到内网主机的80、443端口。</p>
<h2 id="2，Java客户端配置"><a href="#2，Java客户端配置" class="headerlink" title="2，Java客户端配置"></a>2，Java客户端配置</h2><blockquote>
<p>Java client的配置文件放置在conf目录中，配置 config.properties<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#与在proxy-server配置后台创建客户端时填写的秘钥保持一致；</span></div><div class="line">client.<span class="attr">key=</span></div><div class="line">ssl.<span class="attr">enable=true</span></div><div class="line">ssl.<span class="attr">jksPath=test.jks</span></div><div class="line">ssl.<span class="attr">keyStorePassword=123456</span></div><div class="line"></div><div class="line"><span class="comment">#这里填写实际的proxy-server地址；没有服务器默认即可，自己有服务器的更换为自己的proxy-server（IP）地址</span></div><div class="line">server.<span class="attr">host=lp.thingsglobal.org</span></div><div class="line"></div><div class="line"><span class="comment">#proxy-server ssl默认端口4993，默认普通端口4900</span></div><div class="line"><span class="comment">#ssl.enable=true时这里填写ssl端口，ssl.enable=false时这里填写普通端口</span></div><div class="line">server.<span class="attr">port=4993</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>java客户端需要以下环境:</p>
<ul>
<li>安装java1.7或以上环境</li>
<li>linux（mac）环境中运行bin目录下的 startup.sh</li>
<li>windows环境中运行bin目录下的 startup.bat</li>
</ul>
<p>下载: <a href="http://pic.cbbing.com/lanproxy-java-client-20171116.zip" target="_blank" rel="external">lanproxy-java-client-20171116</a></p>
<h2 id="3，其他平台客户端"><a href="#3，其他平台客户端" class="headerlink" title="3，其他平台客户端"></a>3，其他平台客户端</h2><p>不用java客户端的可以使用下面提供的各个平台的客户端，省去安装java运行环境</p>
<p><strong>源码地址</strong><br><a href="https://github.com/ffay/lanproxy-go-client" target="_blank" rel="external">https://github.com/ffay/lanproxy-go-client</a></p>
<p><strong>发布包</strong><br><a href="https://github.com/ffay/lanproxy-go-client/releases" target="_blank" rel="external">https://github.com/ffay/lanproxy-go-client/releases</a></p>
<p><strong>普通端口连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mac 64位</span></div><div class="line">nohup ./client_darwin_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</div><div class="line"></div><div class="line"><span class="comment"># linux 64位</span></div><div class="line">nohup ./client_linux_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY &amp;</div><div class="line"></div><div class="line"><span class="comment"># windows 64 位</span></div><div class="line">./client_windows_amd64.exe <span class="_">-s</span> SERVER_IP -p SERVER_PORT -k CLIENT_KEY</div></pre></td></tr></table></figure></p>
<p><strong>SSL端口连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mac 64位</span></div><div class="line">nohup ./client_darwin_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span> &amp;</div><div class="line"></div><div class="line"><span class="comment"># linux 64位</span></div><div class="line">nohup ./client_linux_amd64 <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span> &amp;</div><div class="line"></div><div class="line"><span class="comment"># windows 64 位</span></div><div class="line">./client_windows_amd64.exe <span class="_">-s</span> SERVER_IP -p SERVER_SSL_PORT -k CLIENT_KEY -ssl <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h2 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h2><p><img src="http://pic.cbbing.com/lanproxy5.png" alt=""><br>查看管理后台的数据统计，有访问流量，说明转发成功！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h1&gt;&lt;p&gt;现在运营商提供的宽带服务，无论是动态IP，还是固定IP，默认都是禁止所有端口服务的（目前了解上海是这样的），在路由器上配置的端口映射和DMZ都失效。申请开通端口需要域名备案，过程比较繁琐。&lt;br&gt;运营商这么做是为了防止个人随意开设各种非法服务，也防止黑客通过扫描器进行抓鸡和批量扫描。这样封禁，虽然一定程度上保证了我们的网络安全，比如说前段时间的勒索病毒正因为国内大部分用户没有独立的公网IP，并且操作系统最容易爆发漏洞的一些，135，139等端口被运营商封禁了，使得国内个人家庭电脑中招的概率小了很多；但是导致即使有公网IP，也无法使用常用端口向外网提供服务。&lt;br&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="内网映射" scheme="http://www.kekefund.com/tags/%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84/"/>
    
      <category term="端口转发" scheme="http://www.kekefund.com/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>seafile服务器配置</title>
    <link href="http://www.kekefund.com/2018/06/24/seafile-server/"/>
    <id>http://www.kekefund.com/2018/06/24/seafile-server/</id>
    <published>2018-06-24T01:28:22.000Z</published>
    <updated>2018-12-04T08:36:13.716Z</updated>
    
    <content type="html"><![CDATA[<p>公司内部网盘分享方案。</p>
<p>目前开源的企业网盘方案有seafile，<a href="http://kekefund.com/2017/04/19/docker-owncloud/" target="_blank" rel="external">ownCloud</a>。</p>
<p>Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 全平台。支持文件同步或者直接挂载到本地访问。</p>
<a id="more"></a>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1、搭建seafile服务器"><a href="#1、搭建seafile服务器" class="headerlink" title="1、搭建seafile服务器"></a>1、搭建seafile服务器</h2><p>seafile服务器主要支持Linux系统，包括Debian，Ubuntu，Centos等，也支持Windows系统（版本更新有滞后，人数超过25人会卡）。同时也提供 <a href="https://manual-cn.seafile.com/deploy/deploy_with_docker.html" target="_blank" rel="external">Docker安装</a>方式，更加轻松的部署和更新Seafile服务。</p>
<p>本文采用Docker的部署方式。</p>
<ul>
<li>配置文件：docker-compose.yml</li>
</ul>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attribute">version</span>: '3.4'</div><div class="line"></div><div class="line"><span class="less"><span class="attribute">services</span>:</span></div><div class="line"></div><div class="line">  <span class="attribute">seafile</span>:</div><div class="line"></div><div class="line">    <span class="attribute">image</span>: seafileltd/<span class="attribute">seafile</span>:latest</div><div class="line"></div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line"></div><div class="line">        - ./<span class="attribute">shared</span>:/shared</div><div class="line"></div><div class="line">    <span class="attribute">ports</span>:</div><div class="line"></div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line"></div><div class="line">      - <span class="number">8000</span>:<span class="number">8000</span></div><div class="line"></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_SERVER_HOSTNAME</span>: pan.xxx.com</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_ADMIN_EMAIL</span>:xxx<span class="variable">@163</span>.com</div><div class="line"></div><div class="line">      <span class="attribute">SEAFILE_ADMIN_PASSWORD</span>: <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>该配置文件将seafile的数据文件存储于当前目录的shared目录下，开放80和8000端口；环境变量设置了访问的主机IP或域名、设置了管理员账号和密码。                                                                                                                                                                              </p>
<h2 id="2、向Let’s-encrypt申请SSL证书"><a href="#2、向Let’s-encrypt申请SSL证书" class="headerlink" title="2、向Let’s encrypt申请SSL证书"></a>2、向Let’s encrypt申请SSL证书</h2><p>添加环境变量，并且添加443端口。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="attr">SEAFILE_SERVER_LETSENCRYPT</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>这样完整的docker-compose.yml如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">version</span>: <span class="string">'3'</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">seafile</span>:</div><div class="line">    <span class="attribute">image</span>: seafileltd/<span class="attribute">seafile</span>:latest</div><div class="line">    <span class="attribute">volumes</span>:</div><div class="line">        - ./<span class="attribute">shared</span>:/shared</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="number">80</span>:<span class="number">80</span></div><div class="line">      - <span class="number">443</span>:<span class="number">443</span></div><div class="line">      - <span class="number">8000</span>:<span class="number">8000</span></div><div class="line">    <span class="attribute">environment</span>:</div><div class="line">      <span class="attribute">SEAFILE_SERVER_LETSENCRYPT</span>: <span class="string">"true"</span></div><div class="line">      <span class="attribute">SEAFILE_SERVER_HOSTNAME</span>: pan1.cbbing.com</div><div class="line">      <span class="attribute">SEAFILE_ADMIN_EMAIL</span>: cbbing<span class="variable">@163</span>.com</div><div class="line">      <span class="attribute">SEAFILE_ADMIN_PASSWORD</span>: <span class="number">12356789</span></div></pre></td></tr></table></figure></p>
<h2 id="3、支持在线编辑"><a href="#3、支持在线编辑" class="headerlink" title="3、支持在线编辑"></a>3、支持在线编辑</h2><p>onlyoffice 的 documentserver 镜像是提供在线编辑服务的，镜像内已包含了 nginx 服务器，支持 80 端口和 443 端口，如果有合法证书，我们可以使用 https 连接。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git clone https://github.com/neroxps/Docker-Only-Office-Chinese-font.git </div><div class="line"></div><div class="line">cd Docker-Only-Office-Chinese-font docker </div><div class="line"></div><div class="line">build -t onlyoffice/chinese .</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># http</span></div><div class="line"></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -itd -p 780:80 --name office --restart=always onlyoffice/chinese</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># https</span></div><div class="line"></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -itd -p 7443:443 --name office --restart=always onlyoffice/chinese</span></div></pre></td></tr></table></figure>
<ul>
<li>conf/seahub_settings.py添加</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Enable Only Office</span></div><div class="line"></div><div class="line"><span class="attr">ENABLE_ONLYOFFICE</span> = <span class="literal">True</span></div><div class="line"></div><div class="line"><span class="attr">VERIFY_ONLYOFFICE_CERTIFICATE</span> = <span class="literal">False</span></div><div class="line"></div><div class="line"><span class="attr">ONLYOFFICE_APIJS_URL</span> = <span class="string">'http://pan.fofpower.com:780/web-apps/apps/api/documents/api.js'</span></div><div class="line"></div><div class="line"><span class="attr">ONLYOFFICE_FILE_EXTENSION</span> = (<span class="string">'doc'</span>, <span class="string">'docx'</span>, <span class="string">'ppt'</span>, <span class="string">'pptx'</span>, <span class="string">'xls'</span>, <span class="string">'xlsx'</span>, <span class="string">'odt'</span>, <span class="string">'fodt'</span>, <span class="string">'odp'</span>, <span class="string">'fodp'</span>, <span class="string">'ods'</span>, <span class="string">'fods'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://bbs.seafile.com/t/topic/3430" target="_blank" rel="external">https://bbs.seafile.com/t/topic/3430</a></p>
</blockquote>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h1 id="1、添加-导入用户"><a href="#1、添加-导入用户" class="headerlink" title="1、添加/导入用户"></a>1、添加/导入用户</h1><p><img src="http://pic.cbbing.com/seafile1.png" alt=""></p>
<p>下载模板，填入用户信息批量添加用户，适合从企业邮箱通讯录中批量导入用户</p>
<h1 id="2、新建群组"><a href="#2、新建群组" class="headerlink" title="2、新建群组"></a>2、新建群组</h1><p><img src="http://pic.cbbing.com/seafile2.png" alt=""></p>
<p>群组共享的资料库对组内所有成员可见，方便部门内部文档沟通。<br><img src="http://pic.cbbing.com/seafile3.png" alt=""></p>
<h2 id="3，多终端使用"><a href="#3，多终端使用" class="headerlink" title="3，多终端使用"></a>3，多终端使用</h2><p>seafile支持ios，android，同步盘，web端，实测体验不错。<br>需要注意的是，如果seafile服务器端做了域名映射，需要修改系统配置，否则ios和android手机端文件上传和下载会失败。</p>
<p><img src="http://pic.cbbing.com/seafile4.png" alt=""><br>将SERVICE_URL的8000去掉，直接用80端口<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">SERVICE_URL:</span>  <span class="string">http:</span><span class="comment">//pan.xxxx.com</span></div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.kancloud.cn/kancloud/seafile-manual/51487" target="_blank" rel="external">https://www.kancloud.cn/kancloud/seafile-manual/51487</a><br><a href="https://bbs.seafile.com/t/topic/3430" target="_blank" rel="external">https://bbs.seafile.com/t/topic/3430</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司内部网盘分享方案。&lt;/p&gt;
&lt;p&gt;目前开源的企业网盘方案有seafile，&lt;a href=&quot;http://kekefund.com/2017/04/19/docker-owncloud/&quot;&gt;ownCloud&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 全平台。支持文件同步或者直接挂载到本地访问。&lt;/p&gt;
    
    </summary>
    
      <category term="系统架构" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="seafile" scheme="http://www.kekefund.com/tags/seafile/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器运行多条命令(supervisor)</title>
    <link href="http://www.kekefund.com/2018/03/30/supervisor/"/>
    <id>http://www.kekefund.com/2018/03/30/supervisor/</id>
    <published>2018-03-30T01:45:32.000Z</published>
    <updated>2018-09-21T07:50:46.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一, 简介"></a>一, 简介</h1><p>Dockerfile 运行只支持一条命令，当在Docker里要运行多条命令，用supervisor来管理就比较合适了。<br>Supervisor是一个 Python 开发的 client/server 系统，可以管理和监控类 UNIX 操作系统上面的进程。它可以同时启动，关闭多个进程，使用起来特别的方便。</p>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><p>supervisor 主要由两部分组成：</p>
<ol>
<li>supervisord(server 部分)：主要负责管理子进程，响应客户端命令以及日志的输出等；</li>
<li>supervisorctl(client 部分)：命令行客户端，用户可以通过它与不同的 supervisord 进程联系，获取子进程的状态等。</li>
</ol>
<h1 id="二，存在的问题——日志不输出"><a href="#二，存在的问题——日志不输出" class="headerlink" title="二，存在的问题——日志不输出"></a>二，存在的问题——日志不输出</h1><p>但是使用supervisor，Django运行的日志就不会在Docker里输出了，默认的输出如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">20</span>,<span class="number">292</span> CRIT Supervisor running as root (no <span class="keyword">user</span> <span class="keyword">in</span> config file)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">20</span>,<span class="number">308</span> INFO supervisord started with pid <span class="number">1</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">310</span> INFO spawned: 'celery_beat' with pid <span class="number">7</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">312</span> INFO spawned: 'celery_worker' with pid <span class="number">8</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">21</span>,<span class="number">313</span> INFO spawned: 'django' with pid <span class="number">9</span></div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: celery_beat entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: celery_worker entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div><div class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">28</span> <span class="number">06</span>:<span class="number">48</span>:<span class="number">22</span>,<span class="number">315</span> INFO success: django entered RUNNING <span class="keyword">state</span>, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs)</div></pre></td></tr></table></figure></p>
<p>上面的Docker中supervisor配置如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">[supervisord]</span></div><div class="line"><span class="attr">nodaemon</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:django]</div><div class="line"><span class="attr">command</span>=python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_worker]</div><div class="line"><span class="attr">command</span>=python manage.py celery worker -c <span class="number">4</span> -l info</div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_beat]</div><div class="line"><span class="attr">command</span>=python manage.py celery beat</div></pre></td></tr></table></figure></p>
<p>这样的配置在容器中是同时运行Django，celery。</p>
<h1 id="三，解决方案"><a href="#三，解决方案" class="headerlink" title="三，解决方案"></a>三，解决方案</h1><h2 id="1，改进后的配置方案"><a href="#1，改进后的配置方案" class="headerlink" title="1，改进后的配置方案"></a>1，改进后的配置方案</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="section">[inet_http_server]</span></div><div class="line"><span class="attr">port</span>=<span class="number">9001</span></div><div class="line"><span class="attr">username</span>=abc</div><div class="line"><span class="attr">password</span>=<span class="number">123456</span></div><div class="line"><span class="section"> </span></div><div class="line">[supervisord]</div><div class="line"><span class="attr">nodaemon</span>=<span class="literal">true</span></div><div class="line"><span class="attr">logfile</span>=/var/log/supervisor/supervisord.log ; (main log file;default <span class="variable">$CWD</span>/supervisord.log)</div><div class="line"><span class="attr">pidfile</span>=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class="line"><span class="attr">childlogdir</span>=/var/log/supervisor            ; (<span class="string">'AUTO'</span> child log dir, default <span class="variable">$TEMP</span>)</div><div class="line"><span class="section"> </span></div><div class="line">[program:django]</div><div class="line"><span class="attr">command</span>=python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span></div><div class="line"><span class="comment">#stdout_logfile = /var/log/supervisord/django_stdout.log</span></div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_worker]</div><div class="line"><span class="attr">command</span>=python manage.py celery worker -c <span class="number">4</span> -l info</div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div><div class="line"><span class="section"> </span></div><div class="line">[program:celery_beat]</div><div class="line"><span class="attr">command</span>=python manage.py celery beat</div><div class="line"><span class="attr">loglevel</span>=info</div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>实测发现Django的日志输出会写到stderr.log文件中，所以在配置文件中将错误日志重定向到标准日志里;<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>容器中的生成的日志文件如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@a16bc77e96bc:/var/<span class="built_in">log</span>/supervisor<span class="meta"># ls</span></div><div class="line">celery_beat-<span class="built_in">stderr</span>---supervisor-rSPQ7E.<span class="built_in">log</span>    django-<span class="built_in">stderr</span>---supervisor<span class="number">-9</span>LS_KA.<span class="built_in">log</span></div><div class="line">celery_beat-<span class="built_in">stdout</span>---supervisor-t5Q4UI.<span class="built_in">log</span>    django-<span class="built_in">stdout</span>---supervisor-cTSBmq.<span class="built_in">log</span></div><div class="line">celery_worker-<span class="built_in">stderr</span>---supervisor-TRFzc7.<span class="built_in">log</span>  supervisord.<span class="built_in">log</span></div><div class="line">celery_worker-<span class="built_in">stdout</span>---supervisor-xNgeBU.<span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<h2 id="2，查看日志"><a href="#2，查看日志" class="headerlink" title="2，查看日志"></a>2，查看日志</h2><p>运行容器时，将9001端口映射出去，通过ip:9001访问：<br><img src="http://pic.cbbing.com/2018-03-30/supervisor-web.png" alt=""></p>
<p>点击 Tail -f 查看各个进程的日志。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://debugo.com/docker-supervisord/" target="_blank" rel="external">http://debugo.com/docker-supervisord/</a></p>
<p><a href="http://blog.csdn.net/zhousenshan/article/details/52988885" target="_blank" rel="external">http://blog.csdn.net/zhousenshan/article/details/52988885</a></p>
<p><a href="http://supervisord.org/configuration.html" target="_blank" rel="external">supervisor配置</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一, 简介&quot;&gt;&lt;/a&gt;一, 简介&lt;/h1&gt;&lt;p&gt;Dockerfile 运行只支持一条命令，当在Docker里要运行多条命令，用supervisor来管理就比较合适了。&lt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="supervisor" scheme="http://www.kekefund.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>scrapy+selenium爬取UC头条网站</title>
    <link href="http://www.kekefund.com/2017/12/06/scrapy-and-selenium/"/>
    <id>http://www.kekefund.com/2017/12/06/scrapy-and-selenium/</id>
    <published>2017-12-06T05:49:26.000Z</published>
    <updated>2018-09-21T07:50:46.077Z</updated>
    
    <content type="html"><![CDATA[<p>Scrapy是Python优秀的爬虫框架，selenium是非常好用的自动化WEB测试工具，两者结合可以非常容易对动态网页进行爬虫。<br>本文的需求是抓取UC头条各个板块的内容。UC头条(<a href="https://news.uc.cn/" target="_blank" rel="external">https://news.uc.cn/</a> )网站没有提供搜索入口，只能每个板块的首页向下滚动鼠标加载更多。要对这样的网站进行检索，抓取其内容，采用一般的scrapy请求方式，每次只能获取最新的10条数据，分析其JS请求，发现参数过于复杂，没有规律。如果想获取更多数据，则需要采用模拟浏览器的方法，这时候selenium就派上用场了。<br><a id="more"></a><br><img src="http://pic.cbbing.com/2017-12-06/86387208.png" alt=""></p>
<h1 id="1，定义spider"><a href="#1，定义spider" class="headerlink" title="1，定义spider"></a>1，定义spider</h1><p>模拟从百度搜索进入，这个步骤可以省略，主要为了跳到parse函数<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCTouTiaoSpider</span>(<span class="title">VideoBaseSpider</span>):</span></div><div class="line">    name = <span class="string">"uctoutiao_spider"</span></div><div class="line">    df_keys = [<span class="string">'人物'</span>, <span class="string">'百科'</span>, <span class="string">'乌镇'</span>]</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, scrapy_task_id=None, *args, **kwargs)</span></span>:        </div><div class="line">        <span class="keyword">self</span>.url_src = <span class="string">"http://www.baidu.com"</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line"> </div><div class="line">        requests = []</div><div class="line">        request = scrapy.Request(<span class="string">"http://www.baidu.com"</span>, callback=<span class="keyword">self</span>.parse)</div><div class="line">        requests.append(request)       </div><div class="line">        <span class="keyword">return</span> requests</div></pre></td></tr></table></figure></p>
<h1 id="2，parse函数"><a href="#2，parse函数" class="headerlink" title="2，parse函数"></a>2，parse函数</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">def parse(self, response):</div><div class="line">    self.<span class="built_in">log</span>(response.url)</div><div class="line"> </div><div class="line"> </div><div class="line">    urls = [<span class="string">"https://news.uc.cn/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_redian/"</span>,</div><div class="line">            <span class="comment"># "https://news.uc.cn/c_shipin/",</span></div><div class="line">            <span class="comment"># "https://news.uc.cn/c_gaoxiao/",</span></div><div class="line">            <span class="string">"https://news.uc.cn/c_shehui/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_yule/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_keji/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_tiyu/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_qiche/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_caijing/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_junshi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_tansuo/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_lishi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_youxi/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_lvyou/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/news/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_shishang/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_jiankang/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_guoji/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_yuer/"</span>,</div><div class="line">            <span class="string">"https://news.uc.cn/c_meishi/"</span>]</div><div class="line">      </div><div class="line">    <span class="comment"># 启动浏览器，这里用的火狐，如果在linux环境下可以用PhantomJS，稳定性稍微差点，有内存泄露的风险。</span></div><div class="line">    driver = webdriver.Firefox()</div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(url)</div><div class="line">            driver.<span class="built_in">get</span>(url)</div><div class="line">            <span class="comment">#模拟鼠标滚到底部(加载100条数据)</span></div><div class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">                driver.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight)"</span>)</div><div class="line">                driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 隐性等待,最长10秒</span></div><div class="line"> </div><div class="line">            <span class="comment"># print driver.page_source</span></div><div class="line">            soup = bs(driver.page_source, <span class="string">'lxml'</span>)</div><div class="line">            articles = soup.find_all(href=re.compile(<span class="string">"/a_\w+?/"</span>), <span class="keyword">text</span>=re.compile(<span class="string">".+"</span>))</div><div class="line">            <span class="keyword">for</span> article <span class="keyword">in</span> articles:</div><div class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> self.df_keys:</div><div class="line">                    <span class="keyword">item</span> = VideoItem()  <span class="comment">#自定义的Item</span></div><div class="line">                    <span class="keyword">item</span>[<span class="string">'title'</span>] = article.<span class="keyword">text</span></div><div class="line">                    <span class="keyword">item</span>[<span class="string">'href'</span>] = article[<span class="string">'href'</span>]                    </div><div class="line">                    self.<span class="built_in">log</span>(<span class="keyword">item</span>)</div><div class="line">                    yield <span class="keyword">item</span></div><div class="line"> </div><div class="line">        except Exception <span class="keyword">as</span> e:</div><div class="line">            print e</div><div class="line">            <span class="keyword">if</span> driver == None:</div><div class="line">                driver = webdriver.Firefox()</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> driver != None:</div><div class="line">        driver.quit()</div></pre></td></tr></table></figure>
<p>真正的实现部分比较简单，几句代码就搞定了。</p>
<h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><h2 id="selenium使用实例"><a href="#selenium使用实例" class="headerlink" title="selenium使用实例"></a>selenium使用实例</h2><h3 id="1，切换焦点至新窗口"><a href="#1，切换焦点至新窗口" class="headerlink" title="1，切换焦点至新窗口"></a>1，切换焦点至新窗口</h3><p>在页面上点击一个button, 然后打开了一个新的window, 将当前IWebDriver的focus切换到新window，使用IWebDriver.SwitchTo().Window(string windowName)。</p>
<p>例如， 我点击按钮以后弹出一个名字叫做”Content Display”的window， 要切换焦点到新窗口的方法是， 首先，获得新window的window name, 大家不要误以为page tile就是window name 哦， 如果你使用driver.SwitchTo().Window(“Content Display”)是找不到window name 叫做”Content Display”的窗口的， 其实Window Name 是一长串数字，类似“59790103-4e06-4433-97a9-b6e519a84fd0”。</p>
<p>要正确切换到”Content Display”的方法是：</p>
<ol>
<li><p>获得当前所有的WindowHandles。</p>
</li>
<li><p>循环遍历到所有的window, 查找window.title与”Content Display”相符的window返回。</p>
</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> dr<span class="selector-class">.window_handles</span>:</div><div class="line">    dr<span class="selector-class">.switch_to</span><span class="selector-class">.window</span>(handle)</div><div class="line">    print dr<span class="selector-class">.title</span></div><div class="line">    <span class="keyword">if</span> len(dr.title) == <span class="string">'目标窗口标题'</span>:</div><div class="line">        break</div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/qixue/p/3928775.html" target="_blank" rel="external">Selenium - IWebDriver.SwitchTo() frame 和 Window 的用法</a></p>
</blockquote>
<h3 id="2-，移至底部"><a href="#2-，移至底部" class="headerlink" title="2 ，移至底部"></a>2 ，移至底部</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">driver</span><span class="selector-class">.execute_script</span>("<span class="selector-tag">window</span><span class="selector-class">.scrollTo</span>(0, <span class="selector-tag">document</span><span class="selector-class">.body</span><span class="selector-class">.scrollHeight</span>)")</div></pre></td></tr></table></figure>
<h3 id="3，移动至指定元素"><a href="#3，移动至指定元素" class="headerlink" title="3，移动至指定元素"></a>3，移动至指定元素</h3><p>某些按钮点击时必须可见，于是要把屏幕移动到按钮可见的区域<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span> = driver.find_element_by_xpath(<span class="string">"//a[@class='p-next']"</span>)</div><div class="line"><span class="keyword">element</span>.location_once_scrolled_into_view</div><div class="line"> </div><div class="line"><span class="comment">#或者</span></div><div class="line">driver.set_window_size(<span class="number">800</span>,<span class="number">800</span>)</div><div class="line"><span class="keyword">element</span> = driver.find_element_by_xpath(<span class="string">"//a[@class='p-next']"</span>)</div><div class="line">js = <span class="string">"window.scrollTo(&#123;&#125;,&#123;&#125;);"</span>.<span class="built_in">format</span>(<span class="keyword">element</span>.location[<span class="string">'x'</span>], <span class="keyword">element</span>.location[<span class="string">'y'</span>] - <span class="number">100</span>)</div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait" target="_blank" rel="external">Python selenium —— 一定要会用selenium的等待，三种等待方式解读</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scrapy是Python优秀的爬虫框架，selenium是非常好用的自动化WEB测试工具，两者结合可以非常容易对动态网页进行爬虫。&lt;br&gt;本文的需求是抓取UC头条各个板块的内容。UC头条(&lt;a href=&quot;https://news.uc.cn/&quot;&gt;https://news.uc.cn/&lt;/a&gt; )网站没有提供搜索入口，只能每个板块的首页向下滚动鼠标加载更多。要对这样的网站进行检索，抓取其内容，采用一般的scrapy请求方式，每次只能获取最新的10条数据，分析其JS请求，发现参数过于复杂，没有规律。如果想获取更多数据，则需要采用模拟浏览器的方法，这时候selenium就派上用场了。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="selenium" scheme="http://www.kekefund.com/tags/selenium/"/>
    
      <category term="scrapy" scheme="http://www.kekefund.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>nginx日志分析</title>
    <link href="http://www.kekefund.com/2017/10/27/nginx-log/"/>
    <id>http://www.kekefund.com/2017/10/27/nginx-log/</id>
    <published>2017-10-27T10:57:09.000Z</published>
    <updated>2018-09-21T07:50:46.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，日志定义"><a href="#1，日志定义" class="headerlink" title="1，日志定义"></a>1，日志定义</h1><p>在nginx.conf中定义的日志格式如下：<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">http</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> [<span class="variable">$request_body</span>] <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>日志文件如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">POST</span> /api/v1/f1_static/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[&#123;\x22user_id\x22:\x229b999d46dd6149f49\x22&#125;]</span> <span class="number">323</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">OPTIONS</span> /api/v1/fund_info/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[-]</span> <span class="number">31</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div></pre></td></tr></table></figure></p>
<h1 id="2，日志分割"><a href="#2，日志分割" class="headerlink" title="2，日志分割"></a>2，日志分割</h1><p>nginx没有命令直接将日志按天分割，我们写了一个shell脚本，每日0点定时执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nginx.log.sh</span></div><div class="line"><span class="comment">#nginx日志切割脚本</span></div><div class="line"> </div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#设置日志文件存放目录</span></div><div class="line">logs_path=<span class="string">"/mydata/nginx/logs/"</span></div><div class="line"> </div><div class="line"><span class="comment">#重命名日志文件</span></div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-web.log <span class="variable">$&#123;logs_path&#125;</span>access-web-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-api.log <span class="variable">$&#123;logs_path&#125;</span>access-api-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div></pre></td></tr></table></figure></p>
<p>cron：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> * * * /mydata/nginx/nginx.<span class="keyword">log</span>.sh</div></pre></td></tr></table></figure></p>
<h1 id="3，日志搜集"><a href="#3，日志搜集" class="headerlink" title="3，日志搜集"></a>3，日志搜集</h1><p>从nginx服务器将日志数据传输到日志服务器<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@VM_231_116_centos ~]# scp -r /mydata/<span class="built_in">code</span>/deploy/nginx/logs <span class="number">10.115</span>.<span class="number">82.34</span><span class="symbol">:</span>/mydata/logs</div><div class="line">root@<span class="number">10.105</span>.<span class="number">83.34</span>'s passwo<span class="symbol">rd:</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170929</span>.<span class="built_in">log</span> <span class="number">100%</span>  <span class="number">126</span>KB <span class="number">125.8</span>KB/s  <span class="symbol">00:00</span></div><div class="line">access-web-<span class="number">20171016</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">2616</span>KB  <span class="number">2.6</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">1687</span>KB  <span class="number">1.7</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170911</span>.<span class="built_in">log</span>    <span class="number">100%</span> <span class="number">1209</span>KB  <span class="number">1.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170930</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">1354</span>KB  <span class="number">1.3</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access.log   <span class="number">100%</span>  <span class="number">45</span>MB  <span class="number">45.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">2960</span>KB  <span class="number">2.9</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170906</span>.<span class="built_in">log</span>  <span class="number">100%</span>  <span class="number">669</span>KB <span class="number">669.1</span>KB/s  <span class="symbol">00:01</span></div><div class="line">access-api-<span class="number">20170904</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">9186</span>KB  <span class="number">9.0</span>MB/s  <span class="symbol">00:00</span></div></pre></td></tr></table></figure></p>
<ul>
<li>服务器之间文件（夹）复制<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文件</span></div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span>  </div><div class="line">或者  </div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_file</span>  </div><div class="line"> </div><div class="line"><span class="comment"># 目录</span></div><div class="line">scp -r local_folder remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4，日志解析"><a href="#4，日志解析" class="headerlink" title="4，日志解析"></a>4，日志解析</h1><p>主要有几点：</p>
<ol>
<li>逐行解析</li>
<li>正则匹配</li>
<li>日期的处理</li>
<li>批量写入数据库</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> arrow</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> io_tosql</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"> </div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line">engine_user_info = create_engine(</div><div class="line">    <span class="string">"mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;"</span>.format(<span class="string">'usr'</span>, <span class="string">'pwd'</span>, <span class="string">'host'</span>,<span class="string">'port'</span>, <span class="string">'db'</span>),</div><div class="line">    connect_args=&#123;<span class="string">"charset"</span>: <span class="string">"utf8"</span>&#125;)</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(filename)</span>:</span></div><div class="line"> </div><div class="line">    month_abr = &#123;<span class="string">"Jan"</span>:<span class="string">"01"</span>, <span class="string">"Feb"</span>:<span class="string">"02"</span>, <span class="string">"Mar"</span>:<span class="string">"03"</span>, <span class="string">"Apr"</span>:<span class="string">"04"</span>, <span class="string">"May"</span>:<span class="string">"05"</span>, <span class="string">"Jun"</span>:<span class="string">"06"</span>,</div><div class="line">                 <span class="string">"Jul"</span>:<span class="string">"07"</span>, <span class="string">"Aug"</span>:<span class="string">"08"</span>, <span class="string">"Sep"</span>:<span class="string">"09"</span>, <span class="string">"Oct"</span>:<span class="string">"10"</span>, <span class="string">"Nov"</span>:<span class="string">"11"</span>, <span class="string">"Dec"</span>:<span class="string">"12"</span>&#125;</div><div class="line"> </div><div class="line">    dfs = []</div><div class="line"> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line"> </div><div class="line">        i = <span class="number">0</span></div><div class="line">        file = open(filename)</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">            pattern = <span class="string">"(\d+\.\d+\.\d+\.\d+).*?\[(.*?)\].*?(\w+) (/.*?) .*?\" (\d+) \[(.*?)\] (\d+) \"(.*?)\" \"(.*?)\" \"(.*?)\""</span></div><div class="line">            s = re.search(pattern, line)</div><div class="line">            <span class="keyword">if</span> s:</div><div class="line">                remote_addr = s.group(<span class="number">1</span>)</div><div class="line">                local_time = s.group(<span class="number">2</span>)</div><div class="line">                request_method = s.group(<span class="number">3</span>)</div><div class="line">                request_url = s.group(<span class="number">4</span>)</div><div class="line">                status = s.group(<span class="number">5</span>)</div><div class="line">                request_body = s.group(<span class="number">6</span>)</div><div class="line">                body_bytes_sent = s.group(<span class="number">7</span>)</div><div class="line">                http_referer = s.group(<span class="number">8</span>)</div><div class="line">                http_user_agent = s.group(<span class="number">9</span>)</div><div class="line">                http_x_forwarded_for = s.group(<span class="number">10</span>)</div><div class="line"> </div><div class="line">                <span class="comment"># 30/Sep/2017:01:08:39 +0000</span></div><div class="line">                <span class="keyword">for</span> mon <span class="keyword">in</span> month_abr.keys():</div><div class="line">                    <span class="keyword">if</span> mon <span class="keyword">in</span> local_time:</div><div class="line">                        local_time = local_time.replace(mon, month_abr[mon])</div><div class="line">                        <span class="keyword">break</span></div><div class="line"> </div><div class="line">                lt = arrow.get(local_time, <span class="string">"DD/MM/YYYY:HH:mm:ss"</span>)</div><div class="line">                lt = lt.shift(hours=<span class="number">8</span>)</div><div class="line">                local_time = str(lt.datetime)</div><div class="line">                i = i+<span class="number">1</span></div><div class="line">                <span class="comment"># print("line:&#123;&#125; &gt; &#123;&#125;".format(i, local_time))</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_body != <span class="string">'-'</span>:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        request_body = request_body.replace(<span class="string">r'\x22'</span>, <span class="string">'"'</span>).replace(<span class="string">"null"</span>, <span class="string">'""'</span>)</div><div class="line">                        request_body_dict = json.loads(request_body)</div><div class="line">                        fund_id = request_body_dict.get(<span class="string">'fund_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        user_id = request_body_dict.get(<span class="string">'user_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                            user_id = request_body_dict.get(<span class="string">'userId'</span>, <span class="keyword">None</span>)</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        print(<span class="string">"request_body:&#123;&#125;"</span>.format(request_body))</div><div class="line">                        print(e)</div><div class="line">                        fund_id = <span class="keyword">None</span></div><div class="line">                        user_id = <span class="keyword">None</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    fund_id = <span class="keyword">None</span></div><div class="line">                    user_id = <span class="keyword">None</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">"GET"</span>, <span class="string">"POST"</span>):</div><div class="line">                    <span class="comment"># print(request_method)</span></div><div class="line">                    <span class="keyword">continue</span></div><div class="line">  </div><div class="line">                df = pd.DataFrame(&#123;<span class="string">"remote_addr"</span>: [remote_addr], <span class="string">"request_method"</span>: [request_method], <span class="string">"local_time"</span>: [local_time],</div><div class="line">                                                <span class="string">"request_url"</span>: [request_url], <span class="string">"status"</span>: [status], <span class="string">"request_body"</span>: [request_body],</div><div class="line">                                                <span class="string">"body_bytes_sent"</span>: [body_bytes_sent], <span class="string">"http_referer"</span>: [http_referer],</div><div class="line">                                                <span class="string">"http_user_agent"</span>: [http_user_agent], <span class="string">"http_x_forwarded_for"</span>: [http_x_forwarded_for],</div><div class="line">                                                <span class="string">"fund_id"</span>: [fund_id], <span class="string">"user_id"</span>: [user_id]</div><div class="line">                                                &#125;)</div><div class="line">                df[<span class="string">'create_at'</span>] = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">                <span class="comment"># print(df)</span></div><div class="line">                dfs.append(df)</div><div class="line"> </div><div class="line">                <span class="comment">#每100条写数据库</span></div><div class="line">                <span class="keyword">if</span> len(dfs) &gt;= <span class="number">100</span>:</div><div class="line">                    df_all = pd.concat(dfs)</div><div class="line">                    df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])                    </div><div class="line">                    df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line">                    print(<span class="string">"写入长度为："</span> + str(len(df_all)))</div><div class="line">                    dfs = []</div><div class="line">  </div><div class="line">        df_all = pd.concat(dfs)</div><div class="line">        df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])</div><div class="line">        df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div></pre></td></tr></table></figure>
<h1 id="5，日志展示"><a href="#5，日志展示" class="headerlink" title="5，日志展示"></a>5，日志展示</h1><p>日志结构化写入数据库后，到前端页面可以多维度展示，下面是展示页面示例：</p>
<ul>
<li><p>统计每日活跃IP数<br><img src="http://pic.cbbing.com/2017-10-27/log1.png" alt=""></p>
</li>
<li><p>统计每日API请求次数<br><img src="http://pic.cbbing.com/2017-10-27/log2.png" alt=""></p>
</li>
<li><p>分类分析<br><img src="http://pic.cbbing.com/2017-10-27/log3.png" alt=""><br><img src="http://pic.cbbing.com/2017-10-27/log4.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，日志定义&quot;&gt;&lt;a href=&quot;#1，日志定义&quot; class=&quot;headerlink&quot; title=&quot;1，日志定义&quot;&gt;&lt;/a&gt;1，日志定义&lt;/h1&gt;&lt;p&gt;在nginx.conf中定义的日志格式如下：&lt;br&gt;&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log_format  &lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$remote_addr&lt;/span&gt; - &lt;span class=&quot;variable&quot;&gt;$remote_user&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$time_local&lt;/span&gt;] &quot;&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$status&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$request_body&lt;/span&gt;] &lt;span class=&quot;variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &quot;&lt;span class=&quot;variable&quot;&gt;$http_referer&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&quot;&lt;span class=&quot;variable&quot;&gt;$http_user_agent&lt;/span&gt;&quot; &quot;&lt;span class=&quot;variable&quot;&gt;$http_x_forwarded_for&lt;/span&gt;&quot;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.kekefund.com/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="日志" scheme="http://www.kekefund.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>docker命令手册</title>
    <link href="http://www.kekefund.com/2017/08/09/docker-command/"/>
    <id>http://www.kekefund.com/2017/08/09/docker-command/</id>
    <published>2017-08-09T08:06:45.000Z</published>
    <updated>2017-10-13T05:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 命令操作手册，方便查询使用。</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>docker run </p>
<blockquote>
<p>–name 指定容器名<br>-p 指定端口映射<br><a id="more"></a><br>-v 挂载数据卷或者本地目录映射 :ro 挂载为只读<br>-d 后台持续运行<br>-i 交互式操作<br>-t 终端<br>-rm 容器退出后随之将其删除(与-d 冲突)</p>
</blockquote>
<p>eg:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> --name ghost1 -p 80:2368 -v /c/Dev/server/blogtest2:/var/lib/ghost ghost</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -it --rm ubuntu:14.04 bash</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> ubuntu:14.04 /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> --name webserver <span class="_">-d</span> -p 80:80 nginx</span></div></pre></td></tr></table></figure>
<h1 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker ps 列出正在运行的容器 </div><div class="line">docker <span class="keyword">kill</span> $(docker ps -q) 停止所有正在运行的容器 </div><div class="line">docker ps -a 查看所有容器，包括运行和停止的</div><div class="line">docker <span class="keyword">start</span> 启动一个已有容器 </div><div class="line">docker <span class="keyword">stop</span> 终止一个运行中的容器 </div><div class="line">docker restart 重启某个容器 </div><div class="line">docker rm xxxx 删除容器 -f 删除运行中的 </div><div class="line">docker rm $(docker ps -a -q) 删除所有终止的容器 </div><div class="line">docker <span class="keyword">logs</span> [<span class="keyword">container</span> <span class="keyword">id</span> <span class="keyword">or</span> <span class="keyword">names</span>] 获取输出<span class="keyword">log</span> -f 实时打印日志</div><div class="line">docker diff 容器名 查看我们定制以及修改 </div><div class="line">docker volume ls 列出所有本机的数据卷</div></pre></td></tr></table></figure>
<h1 id="管理镜像"><a href="#管理镜像" class="headerlink" title="管理镜像"></a>管理镜像</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker pull [option] [url]  获取镜像, 例如: docker pull ubuntu:<span class="number">14.04</span> </div><div class="line">docker images 列出本地镜像 </div><div class="line">docker build -t nginx:v3 .   在当前目录构建镜像,-t 是指定镜像名称 <span class="keyword">tag</span></div><div class="line"><span class="title">docker</span> rmi xxxxxx 删除本地镜像</div><div class="line">docker commit 选项 容器名/id 仓库名 <span class="keyword">tag</span> <span class="title">：可以把修改定制过的容器保存为镜像</span></div><div class="line"> </div><div class="line">docker images -f <span class="attr">dangling=</span><span class="literal">true</span> 列出所有虚悬镜像(dangling image)</div><div class="line">docker rmi $(docker images -q -f <span class="attr">dangling=</span><span class="literal">true</span>) 删除所有虚悬镜像</div><div class="line">docker histroy 镜像名:标签 查看镜像修改的历史纪录</div></pre></td></tr></table></figure>
<h1 id="查询单个容器详细信息"><a href="#查询单个容器详细信息" class="headerlink" title="查询单个容器详细信息"></a>查询单个容器详细信息</h1><p>可以看到容器的完整ID、运行状态、网络设置、镜像等信息。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@VM_25_5_centos</span> ~]<span class="meta"># docker inspect splash</span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"b5a387e5f9064113e48c06384be045675e12047c7ef5564f76ae8bf0c7f95304"</span>,</div><div class="line">        <span class="string">"Created"</span>: <span class="string">"2017-04-05T04:49:40.025249222Z"</span>,</div><div class="line">        <span class="string">"Path"</span>: <span class="string">"python3"</span>,</div><div class="line">        ....   </div><div class="line">        <span class="string">"State"</span>: &#123;</div><div class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</div><div class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</div><div class="line">         </div><div class="line">            <span class="string">"Networks"</span>: &#123;</div><div class="line">                <span class="string">"bridge"</span>: &#123;</div><div class="line">                    <span class="string">"IPAMConfig"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Links"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Aliases"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"b3063867b30c820bb92ee198edad8d5cb8974135d0490e956d3646364ccca711"</span>,</div><div class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"979a8d0bbfde532c45dfbf97bab3c2d874100b4ca448a460b81904709260eb3b"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</div><div class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.3"</span>,</div><div class="line">                    <span class="string">"IPPrefixLen"</span>: <span class="number">16</span>,</div><div class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: <span class="number">0</span>,</div><div class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:03"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure>
<h1 id="实时打印日志"><a href="#实时打印日志" class="headerlink" title="实时打印日志"></a>实时打印日志</h1><p>加上-f参数<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs -f splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器所占用的系统资源"><a href="#查看容器所占用的系统资源" class="headerlink" title="查看容器所占用的系统资源"></a>查看容器所占用的系统资源</h1><p>如CPU使用率、内存、网络和磁盘开销。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]# docker stats splash</div><div class="line"></div><div class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O              BLOCK I/O             PIDS</div><div class="line">splash              <span class="number">0.04</span>%               <span class="number">230.5</span> MiB / <span class="number">7.64</span> GiB   <span class="number">2.95</span>%               <span class="number">50.7</span> MB / <span class="number">33.77</span> MB   <span class="number">547.9</span> MB / <span class="number">131.1</span> kB   <span class="number">7</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器使用了哪些进程"><a href="#查看容器使用了哪些进程" class="headerlink" title="查看容器使用了哪些进程"></a>查看容器使用了哪些进程</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]<span class="comment"># docker exec api1 ps aux</span></div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root        <span class="number"> 1 </span> 0.0  0.3<span class="number"> 125480 </span>25136 ?        Ss+  Mar31   0:00 python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root        <span class="number"> 6 </span> 0.9  0.8<span class="number"> 747960 </span>64664 ?        Sl+  Mar31 139:37 /usr/local/bin/python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root      <span class="number"> 886 </span> 0.0  0.0 <span class="number"> 19180 </span><span class="number"> 1300 </span>?        Rs   16:56   0:00 ps aux</div></pre></td></tr></table></figure>
<h1 id="转移Docker的数据目录到大的磁盘分区上"><a href="#转移Docker的数据目录到大的磁盘分区上" class="headerlink" title="转移Docker的数据目录到大的磁盘分区上"></a>转移Docker的数据目录到大的磁盘分区上</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">service docker stop</div><div class="line">mkdir /data/dockerData/</div><div class="line">mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span> /<span class="title">data</span>/<span class="title">dockerData</span>/</span></div><div class="line">ln -s /data/dockerData/docker /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></div><div class="line">service docker start</div></pre></td></tr></table></figure>
<h1 id="centos7-安装docker"><a href="#centos7-安装docker" class="headerlink" title="centos7 安装docker"></a>centos7 安装docker</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">yum -y install docker-io</div></pre></td></tr></table></figure>
<p>可通过以下命令启动 Docker 服务：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">chkconfig docker <span class="keyword">on</span> <span class="comment"># 设置开机启动</span></div></pre></td></tr></table></figure></p>
<p>可使用以下命令，查看 Docker 是否安装成功：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@localhost</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div></pre></td></tr></table></figure></p>
<h1 id="centos7-卸载docker"><a href="#centos7-卸载docker" class="headerlink" title="centos7 卸载docker"></a>centos7 卸载docker</h1><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root<span class="title">@localhost</span> ~]# yum list installed | grep docker</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos </div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div></pre></td></tr></table></figure>
<h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker network <span class="keyword">create</span></div><div class="line">docker network <span class="keyword">connect</span></div><div class="line">docker network ls</div><div class="line">docker network rm</div><div class="line">docker network <span class="keyword">disconnect</span></div><div class="line">docker network inspect</div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/0a03b68023e1" target="_blank" rel="external">Docker network命令详解</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 命令操作手册，方便查询使用。&lt;/p&gt;
&lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;p&gt;docker run &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–name 指定容器名&lt;br&gt;-p 指定端口映射&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
  </entry>
  
</feed>
