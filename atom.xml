<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KeKeFund</title>
  <subtitle>金融 · Python · 技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kekefund.com/"/>
  <updated>2017-10-27T11:20:58.000Z</updated>
  <id>http://www.kekefund.com/</id>
  
  <author>
    <name>Binger Chen</name>
    <email>cbbing@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx日志分析</title>
    <link href="http://www.kekefund.com/2017/10/27/nginx-log/"/>
    <id>http://www.kekefund.com/2017/10/27/nginx-log/</id>
    <published>2017-10-27T10:57:09.000Z</published>
    <updated>2017-10-27T11:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，日志定义"><a href="#1，日志定义" class="headerlink" title="1，日志定义"></a>1，日志定义</h1><p>在nginx.conf中定义的日志格式如下：<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">http</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> [<span class="variable">$request_body</span>] <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>日志文件如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">POST</span> /api/v1/f1_static/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[&#123;\x22user_id\x22:\x229b999d46dd6149f49\x22&#125;]</span> <span class="number">323</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div><div class="line"><span class="number">116.2.52.247</span> - - <span class="string">[26/Oct/2017:15:04:00 +0000]</span> <span class="string">"<span class="keyword">OPTIONS</span> /api/v1/fund_info/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">[-]</span> <span class="number">31</span> <span class="string">"http://www.abc.com/ProductPerspective/detail/"</span> <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="string">"-"</span></div></pre></td></tr></table></figure></p>
<h1 id="2，日志分割"><a href="#2，日志分割" class="headerlink" title="2，日志分割"></a>2，日志分割</h1><p>nginx没有命令直接将日志按天分割，我们写了一个shell脚本，每日0点定时执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nginx.log.sh</span></div><div class="line"><span class="comment">#nginx日志切割脚本</span></div><div class="line"> </div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#设置日志文件存放目录</span></div><div class="line">logs_path=<span class="string">"/mydata/nginx/logs/"</span></div><div class="line"> </div><div class="line"><span class="comment">#重命名日志文件</span></div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-web.log <span class="variable">$&#123;logs_path&#125;</span>access-web-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access-api.log <span class="variable">$&#123;logs_path&#125;</span>access-api-$(date <span class="_">-d</span> <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).log</div></pre></td></tr></table></figure></p>
<p>cron：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> * * * /mydata/nginx/nginx.<span class="keyword">log</span>.sh</div></pre></td></tr></table></figure></p>
<h1 id="3，日志搜集"><a href="#3，日志搜集" class="headerlink" title="3，日志搜集"></a>3，日志搜集</h1><p>从nginx服务器将日志数据传输到日志服务器<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@VM_231_116_centos ~]# scp -r /mydata/<span class="built_in">code</span>/deploy/nginx/logs <span class="number">10.115</span>.<span class="number">82.34</span><span class="symbol">:</span>/mydata/logs</div><div class="line">root@<span class="number">10.105</span>.<span class="number">83.34</span>'s passwo<span class="symbol">rd:</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170929</span>.<span class="built_in">log</span> <span class="number">100%</span>  <span class="number">126</span>KB <span class="number">125.8</span>KB/s  <span class="symbol">00:00</span></div><div class="line">access-web-<span class="number">20171016</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">2616</span>KB  <span class="number">2.6</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">1687</span>KB  <span class="number">1.7</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170911</span>.<span class="built_in">log</span>    <span class="number">100%</span> <span class="number">1209</span>KB  <span class="number">1.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170930</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">1354</span>KB  <span class="number">1.3</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access.log   <span class="number">100%</span>  <span class="number">45</span>MB  <span class="number">45.2</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-api-<span class="number">20170907</span>.<span class="built_in">log</span>  <span class="number">100%</span> <span class="number">2960</span>KB  <span class="number">2.9</span>MB/s  <span class="symbol">00:00</span></div><div class="line">access-<span class="built_in">power</span>-<span class="number">20170906</span>.<span class="built_in">log</span>  <span class="number">100%</span>  <span class="number">669</span>KB <span class="number">669.1</span>KB/s  <span class="symbol">00:01</span></div><div class="line">access-api-<span class="number">20170904</span>.<span class="built_in">log</span>   <span class="number">100%</span> <span class="number">9186</span>KB  <span class="number">9.0</span>MB/s  <span class="symbol">00:00</span></div></pre></td></tr></table></figure></p>
<ul>
<li>服务器之间文件（夹）复制<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文件</span></div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span>  </div><div class="line">或者  </div><div class="line">scp local_file remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_file</span>  </div><div class="line"> </div><div class="line"><span class="comment"># 目录</span></div><div class="line">scp -r local_folder remote_username<span class="variable">@remote_ip</span><span class="symbol">:remote_folder</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4，日志解析"><a href="#4，日志解析" class="headerlink" title="4，日志解析"></a>4，日志解析</h1><p>主要有几点：</p>
<ol>
<li>逐行解析</li>
<li>正则匹配</li>
<li>日期的处理</li>
<li>批量写入数据库</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> arrow</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> io_tosql</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"> </div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line">engine_user_info = create_engine(</div><div class="line">    <span class="string">"mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;"</span>.format(<span class="string">'usr'</span>, <span class="string">'pwd'</span>, <span class="string">'host'</span>,<span class="string">'port'</span>, <span class="string">'db'</span>),</div><div class="line">    connect_args=&#123;<span class="string">"charset"</span>: <span class="string">"utf8"</span>&#125;)</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(filename)</span>:</span></div><div class="line"> </div><div class="line">    month_abr = &#123;<span class="string">"Jan"</span>:<span class="string">"01"</span>, <span class="string">"Feb"</span>:<span class="string">"02"</span>, <span class="string">"Mar"</span>:<span class="string">"03"</span>, <span class="string">"Apr"</span>:<span class="string">"04"</span>, <span class="string">"May"</span>:<span class="string">"05"</span>, <span class="string">"Jun"</span>:<span class="string">"06"</span>,</div><div class="line">                 <span class="string">"Jul"</span>:<span class="string">"07"</span>, <span class="string">"Aug"</span>:<span class="string">"08"</span>, <span class="string">"Sep"</span>:<span class="string">"09"</span>, <span class="string">"Oct"</span>:<span class="string">"10"</span>, <span class="string">"Nov"</span>:<span class="string">"11"</span>, <span class="string">"Dec"</span>:<span class="string">"12"</span>&#125;</div><div class="line"> </div><div class="line">    dfs = []</div><div class="line"> </div><div class="line">    <span class="keyword">try</span>:</div><div class="line"> </div><div class="line">        i = <span class="number">0</span></div><div class="line">        file = open(filename)</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">            pattern = <span class="string">"(\d+\.\d+\.\d+\.\d+).*?\[(.*?)\].*?(\w+) (/.*?) .*?\" (\d+) \[(.*?)\] (\d+) \"(.*?)\" \"(.*?)\" \"(.*?)\""</span></div><div class="line">            s = re.search(pattern, line)</div><div class="line">            <span class="keyword">if</span> s:</div><div class="line">                remote_addr = s.group(<span class="number">1</span>)</div><div class="line">                local_time = s.group(<span class="number">2</span>)</div><div class="line">                request_method = s.group(<span class="number">3</span>)</div><div class="line">                request_url = s.group(<span class="number">4</span>)</div><div class="line">                status = s.group(<span class="number">5</span>)</div><div class="line">                request_body = s.group(<span class="number">6</span>)</div><div class="line">                body_bytes_sent = s.group(<span class="number">7</span>)</div><div class="line">                http_referer = s.group(<span class="number">8</span>)</div><div class="line">                http_user_agent = s.group(<span class="number">9</span>)</div><div class="line">                http_x_forwarded_for = s.group(<span class="number">10</span>)</div><div class="line"> </div><div class="line">                <span class="comment"># 30/Sep/2017:01:08:39 +0000</span></div><div class="line">                <span class="keyword">for</span> mon <span class="keyword">in</span> month_abr.keys():</div><div class="line">                    <span class="keyword">if</span> mon <span class="keyword">in</span> local_time:</div><div class="line">                        local_time = local_time.replace(mon, month_abr[mon])</div><div class="line">                        <span class="keyword">break</span></div><div class="line"> </div><div class="line">                lt = arrow.get(local_time, <span class="string">"DD/MM/YYYY:HH:mm:ss"</span>)</div><div class="line">                lt = lt.shift(hours=<span class="number">8</span>)</div><div class="line">                local_time = str(lt.datetime)</div><div class="line">                i = i+<span class="number">1</span></div><div class="line">                <span class="comment"># print("line:&#123;&#125; &gt; &#123;&#125;".format(i, local_time))</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_body != <span class="string">'-'</span>:</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        request_body = request_body.replace(<span class="string">r'\x22'</span>, <span class="string">'"'</span>).replace(<span class="string">"null"</span>, <span class="string">'""'</span>)</div><div class="line">                        request_body_dict = json.loads(request_body)</div><div class="line">                        fund_id = request_body_dict.get(<span class="string">'fund_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        user_id = request_body_dict.get(<span class="string">'user_id'</span>, <span class="keyword">None</span>)</div><div class="line">                        <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                            user_id = request_body_dict.get(<span class="string">'userId'</span>, <span class="keyword">None</span>)</div><div class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                        print(<span class="string">"request_body:&#123;&#125;"</span>.format(request_body))</div><div class="line">                        print(e)</div><div class="line">                        fund_id = <span class="keyword">None</span></div><div class="line">                        user_id = <span class="keyword">None</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    fund_id = <span class="keyword">None</span></div><div class="line">                    user_id = <span class="keyword">None</span></div><div class="line"> </div><div class="line">                <span class="keyword">if</span> request_method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">"GET"</span>, <span class="string">"POST"</span>):</div><div class="line">                    <span class="comment"># print(request_method)</span></div><div class="line">                    <span class="keyword">continue</span></div><div class="line">  </div><div class="line">                df = pd.DataFrame(&#123;<span class="string">"remote_addr"</span>: [remote_addr], <span class="string">"request_method"</span>: [request_method], <span class="string">"local_time"</span>: [local_time],</div><div class="line">                                                <span class="string">"request_url"</span>: [request_url], <span class="string">"status"</span>: [status], <span class="string">"request_body"</span>: [request_body],</div><div class="line">                                                <span class="string">"body_bytes_sent"</span>: [body_bytes_sent], <span class="string">"http_referer"</span>: [http_referer],</div><div class="line">                                                <span class="string">"http_user_agent"</span>: [http_user_agent], <span class="string">"http_x_forwarded_for"</span>: [http_x_forwarded_for],</div><div class="line">                                                <span class="string">"fund_id"</span>: [fund_id], <span class="string">"user_id"</span>: [user_id]</div><div class="line">                                                &#125;)</div><div class="line">                df[<span class="string">'create_at'</span>] = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(time.time()))</div><div class="line">                <span class="comment"># print(df)</span></div><div class="line">                dfs.append(df)</div><div class="line"> </div><div class="line">                <span class="comment">#每100条写数据库</span></div><div class="line">                <span class="keyword">if</span> len(dfs) &gt;= <span class="number">100</span>:</div><div class="line">                    df_all = pd.concat(dfs)</div><div class="line">                    df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])                    </div><div class="line">                    df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line">                    print(<span class="string">"写入长度为："</span> + str(len(df_all)))</div><div class="line">                    dfs = []</div><div class="line">  </div><div class="line">        df_all = pd.concat(dfs)</div><div class="line">        df_all = df_all.drop_duplicates(subset=[<span class="string">'remote_addr'</span>, <span class="string">'request_url'</span>,<span class="string">'local_time'</span>])</div><div class="line">        df_all.to_sql(<span class="string">"log_table"</span>, engine, if_exists=<span class="string">"append"</span>, index=<span class="keyword">False</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div></pre></td></tr></table></figure>
<h1 id="5，日志展示"><a href="#5，日志展示" class="headerlink" title="5，日志展示"></a>5，日志展示</h1><p>日志结构化写入数据库后，到前端页面可以多维度展示，下面是展示页面示例：</p>
<ul>
<li><p>统计每日活跃IP数<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-27/log1.png" alt=""></p>
</li>
<li><p>统计每日API请求次数<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-27/log2.png" alt=""></p>
</li>
<li><p>分类分析<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-27/log3.png" alt=""><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-27/log4.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，日志定义&quot;&gt;&lt;a href=&quot;#1，日志定义&quot; class=&quot;headerlink&quot; title=&quot;1，日志定义&quot;&gt;&lt;/a&gt;1，日志定义&lt;/h1&gt;&lt;p&gt;在nginx.conf中定义的日志格式如下：&lt;br&gt;&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log_format  &lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$remote_addr&lt;/span&gt; - &lt;span class=&quot;variable&quot;&gt;$remote_user&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$time_local&lt;/span&gt;] &quot;&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&lt;span class=&quot;variable&quot;&gt;$status&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;$request_body&lt;/span&gt;] &lt;span class=&quot;variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &quot;&lt;span class=&quot;variable&quot;&gt;$http_referer&lt;/span&gt;&quot; &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&#39;&quot;&lt;span class=&quot;variable&quot;&gt;$http_user_agent&lt;/span&gt;&quot; &quot;&lt;span class=&quot;variable&quot;&gt;$http_x_forwarded_for&lt;/span&gt;&quot;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://www.kekefund.com/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="日志" scheme="http://www.kekefund.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>nginx 缓存与优化</title>
    <link href="http://www.kekefund.com/2017/10/13/nginx-cache/"/>
    <id>http://www.kekefund.com/2017/10/13/nginx-cache/</id>
    <published>2017-10-13T05:45:50.000Z</published>
    <updated>2017-10-13T05:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在浏览器和应用服务器之间，存在多种“潜在”缓存，如：</p>
<ul>
<li>客户端浏览器缓存</li>
<li>中间缓存</li>
<li>内容分发网络（CDN）</li>
<li>服务器上的负载均衡和反向代理<a id="more"></a>
缓存，仅在反向代理和负载均衡的层面，就对性能提高有很大的帮助。</li>
</ul>
<h1 id="为什么要用缓存？"><a href="#为什么要用缓存？" class="headerlink" title="为什么要用缓存？"></a>为什么要用缓存？</h1><ul>
<li>网站的访问速度更快</li>
<li>减轻源服务器的负担</li>
<li>提高负载平衡器、反向代理和应用服务器前端web服务的性能</li>
</ul>
<h1 id="nginx代理模块缓存指令"><a href="#nginx代理模块缓存指令" class="headerlink" title="nginx代理模块缓存指令"></a>nginx代理模块缓存指令</h1><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>proxy_cache</td>
<td>定义缓存的共享内存区域</td>
</tr>
<tr>
<td>proxy_cache_bypass</td>
<td>一个或者多个字符串变量，变量的值为非空或者非零将会导致响应从上游服务器获取而不是缓存</td>
</tr>
<tr>
<td>proxy_cache_key</td>
<td>用来区分缓存文件的key，作为缓存key的一个字符串，用于存储或者获取缓存值。默认值为$scheme$proxy_host$uri$is_args$args</td>
</tr>
<tr>
<td>proxy_cache_lock</td>
<td>启用这个指令，当多个客户端请求一个缓存中不存在的文件（或称之为一个MISS），只有这些请求中的第一个被允许发送至服务器。其他请求在第一个请求得到满意结果之后在缓存中得到文件。</td>
</tr>
<tr>
<td>proxy_cache_lock_timeout</td>
<td>等待一个请求将出现在缓存或者proxy_cache_lock锁释放的时间长度</td>
</tr>
<tr>
<td>proxy_cache_min_uses</td>
<td>在一个响应被缓存为一个key之前需要请求的最小次数</td>
</tr>
<tr>
<td>proxy_cache_path</td>
<td>一个放置缓存响应和共享zone（keys_zone=name:size）的目录，用于存放key和响应的元数据。</td>
</tr>
<tr>
<td>proxy_cache_path:keys_zone</td>
<td>设置一个共享内存区，用于存储缓存键和元数据，有些类似计时器的用途。</td>
</tr>
<tr>
<td>proxy_cache_path:levels</td>
<td>冒号用于分隔在每个级别（1或2）的子目录名长度，最多三级深；</td>
</tr>
<tr>
<td>proxy_cache_path:inactive</td>
<td>在一个不活动的响应被驱除出缓存之前待在缓存中的最大时间长度；例如设置如60m，则文件如果在60分钟之内没有被请求，则缓存管理会自动将其在内存中删除，不管文件是否过期。</td>
</tr>
<tr>
<td>proxy_cache_path:max_size</td>
<td>缓存的最大值，当大小超过这个值，缓存管理器溢出最近最少使用的缓存条目；</td>
</tr>
<tr>
<td>proxy_cache_path:loader_files</td>
<td>缓存文件的最大数量，它们的元数据被每个缓存载入进程迭代载入；</td>
</tr>
<tr>
<td>proxy_cache_path:loader_sleep</td>
<td>在每个迭代缓存载入进程之间停顿的毫秒数；</td>
</tr>
<tr>
<td>proxy_cache_path:loader_threshold</td>
<td>缓存载入进程迭代花去时间的最大值</td>
</tr>
<tr>
<td>proxy_cache_use_stale</td>
<td>在访问上游服务器的时候发生错误，在这种情况下接受提供过期的缓存数据。参数updating告知NGINX在客户端请求的项目的更新正在原服务器中下载时发送旧内容，而不是向服务器转发重复的请求</td>
</tr>
<tr>
<td>proxy_cache_valid</td>
<td>缓存的有效期；指定对200、301或者302有效代码缓存的时间长度。特定参数any表示对任何响应都缓存一定时间长度。</td>
</tr>
<tr>
<td>proxy_cache_methods</td>
<td>缓存支持的方法，默认为GET，可以改为POST，OPTIONS等</td>
</tr>
</tbody>
</table>
<h1 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h1><ul>
<li>首页缓存1分钟，因为它所包含的链接及文件列表经常更新</li>
<li>每篇文章都被缓存1天，因为一旦写完它们将不会改变，但我们又不希望缓存被填满，因此需要移除一些旧的缓存内容以便满足空间的需要。</li>
<li>尽量地缓存所有图像，因为从磁盘检索图像文件是一件比较“昂贵”的操作。</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">proxy_cache_path</span>    /var/spool/nginx/articles    keys_zone=ARTICLES:<span class="number">16m</span>    levels=<span class="number">1</span>:<span class="number">2</span>    inactive=<span class="number">1d</span>;</div><div class="line">    <span class="attribute">proxy_cache_path</span>    /var/spool/nginx/images    keys_zone=IMAGES:<span class="number">128m</span>    levels=<span class="number">1</span>:<span class="number">2</span>    inactive=<span class="number">30d</span>;</div><div class="line">    <span class="attribute">proxy_temp_path</span>    /var/spool/nginx;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">            <span class="comment"># 首页</span></div><div class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">1m</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="attribute">location</span> /articles &#123;</div><div class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">1d</span>;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="attribute">location</span> /img &#123;</div><div class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">10y</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面的配置设计缓存所有的响应6个小时，缓存大小为1GB。任何条目保存刷新，就是说，在6个小时内被调用为超时，有效期为1天。在此时间后，上游服务器将再次调用提供响应。如果上游服务器由于错误、超时、无效头或者是由于缓存条目被升级，那么过期的条目就会被使用。共享内存区、CACHE被定义为10MB，并且在location中使用，在这里设置缓存key，并且也可以从这里查询。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">proxy_temp_path</span>  /var/spool/nginx;</div><div class="line"></div><div class="line">    <span class="attribute">proxy_cache_path</span>  /var/spool/nginx  keys_zone=CACHE:<span class="number">10m</span>  levels=<span class="number">1</span>:<span class="number">2</span>  inactive=<span class="number">6h</span> max_size=<span class="number">1g</span>;</div><div class="line"> </div><div class="line">    <span class="section">server</span> &#123;</div><div class="line"> </div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">            <span class="comment"># using include to bring in a file with commonly-used settings</span></div><div class="line">            <span class="attribute">include</span> proxy.conf;</div><div class="line"> </div><div class="line">            <span class="attribute">proxy_cache</span> CACHE;</div><div class="line"> </div><div class="line">            <span class="attribute">proxy_cache_valid</span> any <span class="number">1d</span>;</div><div class="line"> </div><div class="line">            <span class="attribute">proxy_cache_use_stale</span> <span class="literal">error</span> timeout invalid_header updating http_500 http_502 http_503 http_504;</div><div class="line"> </div><div class="line">            <span class="attribute">proxy_pass</span> http://upstream;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="1，检测缓存状态"><a href="#1，检测缓存状态" class="headerlink" title="1，检测缓存状态"></a>1，检测缓存状态</h2><p>通过添加如下代码实现<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> xx.fofpower.com;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_cache</span> api_cache;</div><div class="line">        <span class="attribute">proxy_cache_valid</span>  <span class="number">200</span> <span class="number">206</span> <span class="number">304</span> <span class="number">301</span> <span class="number">302</span> <span class="number">1d</span>;        </div><div class="line">        <span class="attribute">proxy_ignore_headers</span> Cache-Control;</div><div class="line">        <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;  <span class="comment">#添加此行</span></div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://myapi;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浏览器上看到的状态可能有：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-13/cache1.png" alt=""><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-10-13/cache2.png" alt=""></p>
<p>$upstream_cache_status可能值：<br>1，MISS——响应在缓存中找不到，所以需要在服务器中取得。<br>2，HIT——响应包含来自缓存的最新有效的内容<br>3，EXPIRED——缓存中的某一项过期了，来自原始服务器的响应包含最新的内容<br>4，STALE——内容陈旧是因为原始服务器不能正确响应。需要配置proxy_cache_use_stale<br>5，UPDATING——内容过期了，因为相对于之前的请求，响应的入口（entry）已经更新，并且proxy_cache_use_stale的updating已被设置<br>6，REVALIDATED——proxy_cache_revalidate命令被启用，NGINX检测得知当前的缓存内容依然有效(If-Modified-Since或者If-None-Match)</p>
<h1 id="2，缓存POST请求"><a href="#2，缓存POST请求" class="headerlink" title="2，缓存POST请求"></a>2，缓存POST请求</h1><p>NGINX默认支持GET请求的缓存，要增加POST，需要设置proxy_cache_methods。<br>对于POST请求，url相同，body内容不同，如果使用默认的proxy_cache_key，会造成不同的post请求，用了一个缓存键，返回给前端的数据会错乱。<br>解决方案是将post的请求参数也作为key的一部分。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> www.fofeasy.com;</div><div class="line">    <span class="attribute">add_header</span> X-Cache-Status <span class="variable">$upstream_cache_status</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_cache</span> web_cache;</div><div class="line">        <span class="attribute">proxy_cache_valid</span>  <span class="number">200</span> <span class="number">206</span> <span class="number">304</span> <span class="number">301</span> <span class="number">302</span> <span class="number">10d</span>;</div><div class="line">        <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$request_body</span>; <span class="comment">#增加此行</span></div><div class="line">        <span class="attribute">proxy_cache_methods</span> GET POST;  <span class="comment">#增加此行</span></div><div class="line">        <span class="attribute">proxy_ignore_headers</span> Cache-Control;</div><div class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        <span class="attribute">proxy_pass</span> http://myweb;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://linux.cn/article-5945-1.html" target="_blank" rel="external">NGINX缓存使用官方指南</a></li>
<li><a href="https://blessing.studio/use-nginx-proxy-to-cache-dynamic-content/" target="_blank" rel="external">使用 Nginx 反代并缓存动态内容</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在浏览器和应用服务器之间，存在多种“潜在”缓存，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端浏览器缓存&lt;/li&gt;
&lt;li&gt;中间缓存&lt;/li&gt;
&lt;li&gt;内容分发网络（CDN）&lt;/li&gt;
&lt;li&gt;服务器上的负载均衡和反向代理
    
    </summary>
    
      <category term="Nginx" scheme="http://www.kekefund.com/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://www.kekefund.com/tags/nginx/"/>
    
      <category term="缓存" scheme="http://www.kekefund.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>docker命令手册</title>
    <link href="http://www.kekefund.com/2017/08/09/docker-command/"/>
    <id>http://www.kekefund.com/2017/08/09/docker-command/</id>
    <published>2017-08-09T08:06:45.000Z</published>
    <updated>2017-10-13T05:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 命令操作手册，方便查询使用。</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>docker run </p>
<blockquote>
<p>–name 指定容器名<br>-p 指定端口映射<br><a id="more"></a><br>-v 挂载数据卷或者本地目录映射 :ro 挂载为只读<br>-d 后台持续运行<br>-i 交互式操作<br>-t 终端<br>-rm 容器退出后随之将其删除(与-d 冲突)</p>
</blockquote>
<p>eg:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> --name ghost1 -p 80:2368 -v /c/Dev/server/blogtest2:/var/lib/ghost ghost</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> -it --rm ubuntu:14.04 bash</span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> ubuntu:14.04 /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span></div><div class="line">docker <span class="keyword">run</span><span class="bash"> --name webserver <span class="_">-d</span> -p 80:80 nginx</span></div></pre></td></tr></table></figure>
<h1 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker ps 列出正在运行的容器 </div><div class="line">docker <span class="keyword">kill</span> $(docker ps -q) 停止所有正在运行的容器 </div><div class="line">docker ps -a 查看所有容器，包括运行和停止的</div><div class="line">docker <span class="keyword">start</span> 启动一个已有容器 </div><div class="line">docker <span class="keyword">stop</span> 终止一个运行中的容器 </div><div class="line">docker restart 重启某个容器 </div><div class="line">docker rm xxxx 删除容器 -f 删除运行中的 </div><div class="line">docker rm $(docker ps -a -q) 删除所有终止的容器 </div><div class="line">docker <span class="keyword">logs</span> [<span class="keyword">container</span> <span class="keyword">id</span> <span class="keyword">or</span> <span class="keyword">names</span>] 获取输出<span class="keyword">log</span> -f 实时打印日志</div><div class="line">docker diff 容器名 查看我们定制以及修改 </div><div class="line">docker volume ls 列出所有本机的数据卷</div></pre></td></tr></table></figure>
<h1 id="管理镜像"><a href="#管理镜像" class="headerlink" title="管理镜像"></a>管理镜像</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker pull [option] [url]  获取镜像, 例如: docker pull ubuntu:<span class="number">14.04</span> </div><div class="line">docker images 列出本地镜像 </div><div class="line">docker build -t nginx:v3 .   在当前目录构建镜像,-t 是指定镜像名称 <span class="keyword">tag</span></div><div class="line"><span class="title">docker</span> rmi xxxxxx 删除本地镜像</div><div class="line">docker commit 选项 容器名/id 仓库名 <span class="keyword">tag</span> <span class="title">：可以把修改定制过的容器保存为镜像</span></div><div class="line"> </div><div class="line">docker images -f <span class="attr">dangling=</span><span class="literal">true</span> 列出所有虚悬镜像(dangling image)</div><div class="line">docker rmi $(docker images -q -f <span class="attr">dangling=</span><span class="literal">true</span>) 删除所有虚悬镜像</div><div class="line">docker histroy 镜像名:标签 查看镜像修改的历史纪录</div></pre></td></tr></table></figure>
<h1 id="查询单个容器详细信息"><a href="#查询单个容器详细信息" class="headerlink" title="查询单个容器详细信息"></a>查询单个容器详细信息</h1><p>可以看到容器的完整ID、运行状态、网络设置、镜像等信息。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@VM_25_5_centos</span> ~]<span class="meta"># docker inspect splash</span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"b5a387e5f9064113e48c06384be045675e12047c7ef5564f76ae8bf0c7f95304"</span>,</div><div class="line">        <span class="string">"Created"</span>: <span class="string">"2017-04-05T04:49:40.025249222Z"</span>,</div><div class="line">        <span class="string">"Path"</span>: <span class="string">"python3"</span>,</div><div class="line">        ....   </div><div class="line">        <span class="string">"State"</span>: &#123;</div><div class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</div><div class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</div><div class="line">         </div><div class="line">            <span class="string">"Networks"</span>: &#123;</div><div class="line">                <span class="string">"bridge"</span>: &#123;</div><div class="line">                    <span class="string">"IPAMConfig"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Links"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"Aliases"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"b3063867b30c820bb92ee198edad8d5cb8974135d0490e956d3646364ccca711"</span>,</div><div class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"979a8d0bbfde532c45dfbf97bab3c2d874100b4ca448a460b81904709260eb3b"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</div><div class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.3"</span>,</div><div class="line">                    <span class="string">"IPPrefixLen"</span>: <span class="number">16</span>,</div><div class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</div><div class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: <span class="number">0</span>,</div><div class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:03"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure>
<h1 id="实时打印日志"><a href="#实时打印日志" class="headerlink" title="实时打印日志"></a>实时打印日志</h1><p>加上-f参数<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@VM_25_5_centos ~]</span># docker logs -f splash</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">49</span>.<span class="number">050352</span> <span class="string">[-]</span> <span class="string">"101.226.66.173"</span> - - <span class="string">[10/Apr/2017:12:32:48 +0000]</span> <span class="string">"<span class="keyword">GET</span> /4e5e5d7364f443e28fbf0d3ae744a59a HTTP/1.1"</span> <span class="number">404</span> <span class="number">153</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器所占用的系统资源"><a href="#查看容器所占用的系统资源" class="headerlink" title="查看容器所占用的系统资源"></a>查看容器所占用的系统资源</h1><p>如CPU使用率、内存、网络和磁盘开销。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]# docker stats splash</div><div class="line"></div><div class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O              BLOCK I/O             PIDS</div><div class="line">splash              <span class="number">0.04</span>%               <span class="number">230.5</span> MiB / <span class="number">7.64</span> GiB   <span class="number">2.95</span>%               <span class="number">50.7</span> MB / <span class="number">33.77</span> MB   <span class="number">547.9</span> MB / <span class="number">131.1</span> kB   <span class="number">7</span></div></pre></td></tr></table></figure></p>
<h1 id="查看容器使用了哪些进程"><a href="#查看容器使用了哪些进程" class="headerlink" title="查看容器使用了哪些进程"></a>查看容器使用了哪些进程</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]<span class="comment"># docker exec api1 ps aux</span></div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root        <span class="number"> 1 </span> 0.0  0.3<span class="number"> 125480 </span>25136 ?        Ss+  Mar31   0:00 python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root        <span class="number"> 6 </span> 0.9  0.8<span class="number"> 747960 </span>64664 ?        Sl+  Mar31 139:37 /usr/local/bin/python ./manage.py runserver 0.0.0.0:8000</div><div class="line">root      <span class="number"> 886 </span> 0.0  0.0 <span class="number"> 19180 </span><span class="number"> 1300 </span>?        Rs   16:56   0:00 ps aux</div></pre></td></tr></table></figure>
<h1 id="转移Docker的数据目录到大的磁盘分区上"><a href="#转移Docker的数据目录到大的磁盘分区上" class="headerlink" title="转移Docker的数据目录到大的磁盘分区上"></a>转移Docker的数据目录到大的磁盘分区上</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">service docker stop</div><div class="line">mkdir /data/dockerData/</div><div class="line">mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span> /<span class="title">data</span>/<span class="title">dockerData</span>/</span></div><div class="line">ln -s /data/dockerData/docker /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></div><div class="line">service docker start</div></pre></td></tr></table></figure>
<h1 id="centos7-安装docker"><a href="#centos7-安装docker" class="headerlink" title="centos7 安装docker"></a>centos7 安装docker</h1><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">yum -y install docker-io</div></pre></td></tr></table></figure>
<p>可通过以下命令启动 Docker 服务：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">chkconfig docker <span class="keyword">on</span> <span class="comment"># 设置开机启动</span></div></pre></td></tr></table></figure></p>
<p>可使用以下命令，查看 Docker 是否安装成功：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@localhost</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>         <span class="number">1.12</span><span class="number">.6</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>     <span class="number">1.24</span></div><div class="line"> <span class="string">Package</span> <span class="attr">version:</span> <span class="string">docker-1.12.6-32.git88a4867.el7.centos.x86_64</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>      <span class="string">go1.7.4</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>      <span class="number">88</span><span class="string">a4867/1.12.6</span></div><div class="line"><span class="attr"> Built:</span>           <span class="string">Mon</span> <span class="string">Jul</span>  <span class="number">3</span> <span class="number">16</span><span class="string">:02:02</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>         <span class="string">linux/amd64</span></div></pre></td></tr></table></figure></p>
<h1 id="centos7-卸载docker"><a href="#centos7-卸载docker" class="headerlink" title="centos7 卸载docker"></a>centos7 卸载docker</h1><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root<span class="title">@localhost</span> ~]# yum list installed | grep docker</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                          <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-client.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-28</span>.git<span class="number">1398</span>f<span class="number">24</span>.el<span class="number">7</span>.centos</div><div class="line">docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span>                   <span class="number">2</span>:<span class="number">1.12</span>.<span class="number">6</span><span class="number">-32</span>.git<span class="number">88</span>a<span class="number">4867</span>.el<span class="number">7</span>.centos </div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div><div class="line">[root<span class="title">@localhost</span> ~]# yum -y remove docker-<span class="keyword">common</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span></div></pre></td></tr></table></figure>
<h1 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker network <span class="keyword">create</span></div><div class="line">docker network <span class="keyword">connect</span></div><div class="line">docker network ls</div><div class="line">docker network rm</div><div class="line">docker network <span class="keyword">disconnect</span></div><div class="line">docker network inspect</div></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/0a03b68023e1" target="_blank" rel="external">Docker network命令详解</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 命令操作手册，方便查询使用。&lt;/p&gt;
&lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;p&gt;docker run &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–name 指定容器名&lt;br&gt;-p 指定端口映射&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像自动构建</title>
    <link href="http://www.kekefund.com/2017/08/08/docker-image-auo-build/"/>
    <id>http://www.kekefund.com/2017/08/08/docker-image-auo-build/</id>
    <published>2017-08-08T10:09:51.000Z</published>
    <updated>2017-10-13T05:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于Git的代码版本控制，能保证每个开发人员的开发成果得到有效的保护，不会发生因为其他人的“误操作”操作将自己辛辛苦苦写的代码删除，而且能够跟踪每一次的改动，能快速回滚到之前任一版本。<br>基于Docker镜像的版本控制，能保证应用服务的正常迭代更新，某一版本出问题了可以快速切换至其他镜像版本。<br><a id="more"></a></p>
<h1 id="1，镜像仓库"><a href="#1，镜像仓库" class="headerlink" title="1，镜像仓库"></a>1，镜像仓库</h1><p>镜像的版本控制，主要是通过给image加tag来区分。首先，我们需要一个镜像仓库，最好是私有仓库。目前国内阿里云和腾讯云都提供免费的私有镜像服务，当然，我们还可以自己搭建私有镜像仓库。</p>
<h2 id="1-1，腾讯云镜像仓库：（https-console-qcloud-com-ccs）"><a href="#1-1，腾讯云镜像仓库：（https-console-qcloud-com-ccs）" class="headerlink" title="1.1，腾讯云镜像仓库：（https://console.qcloud.com/ccs）"></a>1.1，腾讯云镜像仓库：（<a href="https://console.qcloud.com/ccs）" target="_blank" rel="external">https://console.qcloud.com/ccs）</a></h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-08-08/b1.png" alt=""></p>
<h2 id="1-2，阿里云镜像仓库：（https-cr-console-aliyun-com）"><a href="#1-2，阿里云镜像仓库：（https-cr-console-aliyun-com）" class="headerlink" title="1.2，阿里云镜像仓库：（https://cr.console.aliyun.com）"></a>1.2，阿里云镜像仓库：（<a href="https://cr.console.aliyun.com）" target="_blank" rel="external">https://cr.console.aliyun.com）</a></h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-08-08/b2.png" alt=""></p>
<h2 id="1-3，自建私有仓库"><a href="#1-3，自建私有仓库" class="headerlink" title="1.3，自建私有仓库"></a>1.3，自建私有仓库</h2><p>参考本人博客: <a href="http://kekefund.com/2017/06/07/doker-registry/" target="_blank" rel="external">docker私有仓库搭建</a></p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-08-08/b3.png" alt=""></p>
<h1 id="2-上传镜像"><a href="#2-上传镜像" class="headerlink" title="2, 上传镜像"></a>2, 上传镜像</h1><p>以腾讯云镜像仓库为例。先开通镜像仓库，然后在命令行登录：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker login --username=yourname -p=yourpassword ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span></div><div class="line">Login Succeeded</div></pre></td></tr></table></figure></p>
<blockquote>
<p>username：腾讯云账号，p为密码</p>
</blockquote>
<p>本地镜像上传<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo docker tag [ImageId] ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/[namespace]/[ImageName]:[镜像版本号]</div><div class="line">$ sudo docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/[namespace]/[ImageName]:[镜像版本号]</div></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker tag fof_api:v20170808 ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div><div class="line">$ docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div></pre></td></tr></table></figure></p>
<h1 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3, 下载镜像"></a>3, 下载镜像</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker login --username=yourname -p=yourpassword ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span></div><div class="line">$ docker pull ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:v20170808</div></pre></td></tr></table></figure>
<h1 id="4，镜像制作"><a href="#4，镜像制作" class="headerlink" title="4，镜像制作"></a>4，镜像制作</h1><h2 id="4-1-API镜像自动构建"><a href="#4-1-API镜像自动构建" class="headerlink" title="4.1 API镜像自动构建"></a>4.1 API镜像自动构建</h2><p>API是基于python的Django框架编写的。在项目的根目录定义好Dockerfile和requirements.txt，具体参考<a href="http://kekefund.com/2017/03/30/docker-django/" target="_blank" rel="external">docker版Django</a>。然后定义Shell脚本(make.sh)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># make.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git pull</div><div class="line"><span class="built_in">echo</span> <span class="string">"开始制作镜像..."</span></div><div class="line">image_tag=`date +%Y%m%d_%H%M`</div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t ccr.ccs.tencentyun.com/sk/api:<span class="variable">$&#123;image_tag&#125;</span> .</div><div class="line"><span class="built_in">echo</span> <span class="string">"制作镜像成功!"</span></div><div class="line"></div><div class="line">docker login --username=yourname -p=yourpassword ccr.ccs.tencentyun.com</div><div class="line">docker push ccr.ccs.tencentyun.com/sk/api:<span class="variable">$&#123;image_tag&#125;</span></div></pre></td></tr></table></figure></p>
<p>制作流程：</p>
<ol>
<li>更新最新代码</li>
<li>制作镜像</li>
<li>镜像添加tag，这里tag是当前日期</li>
<li>上传镜像只腾讯云docker仓库</li>
</ol>
<h2 id="4-2-Web应用镜像自动构建"><a href="#4-2-Web应用镜像自动构建" class="headerlink" title="4.2 Web应用镜像自动构建"></a>4.2 Web应用镜像自动构建</h2><p>Web应用是用maven搭建的SpringMVC+MyBatis项目。打包生成war包可以通过maven命令行在服务器上执行。这里我们采用的服务器是centos7.3，java版本是1.8，maven版本是3.3.9。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mvn -v</div><div class="line">Apache Maven <span class="number">3.3</span><span class="number">.9</span> (bb52d8502b132ec0a5a3f4c09453c07478323dc5; <span class="number">2015</span><span class="number">-11</span><span class="number">-11</span><span class="string">T00:</span><span class="number">41</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span>)</div><div class="line">Maven <span class="string">home:</span> <span class="regexp">/usr/</span>local/apache-maven<span class="number">-3.3</span><span class="number">.9</span></div><div class="line">Java <span class="string">version:</span> <span class="number">1.8</span><span class="number">.0</span>_111, <span class="string">vendor:</span> Oracle Corporation</div><div class="line">Java <span class="string">home:</span> <span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_111/</span>jre</div><div class="line">Default <span class="string">locale:</span> en_US, platform <span class="string">encoding:</span> ANSI_X3<span class="number">.4</span><span class="number">-1968</span></div><div class="line">OS <span class="string">name:</span> <span class="string">"linux"</span>, <span class="string">version:</span> <span class="string">"3.10.0-514.21.2.el7.x86_64"</span>, <span class="string">arch:</span> <span class="string">"amd64"</span>, <span class="string">family:</span> <span class="string">"unix"</span></div></pre></td></tr></table></figure></p>
<p>在服务器上安装好java，maven后，配置maven repository路径:apache-maven-3.3.9/conf/settings.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></div><div class="line">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/your/path/apache-maven-3.3.9/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-2-1-war包生成脚本"><a href="#4-2-1-war包生成脚本" class="headerlink" title="4.2.1 war包生成脚本"></a>4.2.1 war包生成脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mvn_on_centos.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">APP_PATH=<span class="string">"/mydata/code/build/fofweb"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/dzmsoft-ccs</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/dzmsoft-ucs</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy-base</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy-backstage</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeay-report</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;APP_PATH&#125;</span>/fofeasy</div><div class="line">mvn clean</div><div class="line">mvn install -DskipTests</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /mydata/code/deploy/web_war</div><div class="line">mkdir ./ROOT</div><div class="line"><span class="built_in">cd</span> ROOT</div><div class="line">cp /mydata/code/build/fofweb/fofeasy/target/fofeasy.war .</div><div class="line">jar xvf fofeasy.war</div><div class="line">rm fofeasy.war</div><div class="line"><span class="built_in">cd</span> ..</div><div class="line">rm ROOT.tar.gz</div><div class="line">tar czf ROOT.tar.gz ./ROOT</div><div class="line">rm -rf ROOT/</div></pre></td></tr></table></figure>
<p>这里，我们先生成fofeasy.war包，然后将war包移到脚本所在目录解压，打包成tar.gz。</p>
<h3 id="4-2-2-镜像制作及上传"><a href="#4-2-2-镜像制作及上传" class="headerlink" title="4.2.2 镜像制作及上传"></a>4.2.2 镜像制作及上传</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#make_power_image_on_centos.sh</span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">MVN_PATH=<span class="string">"/mydata/code/deploy/web_war"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"MVN_PATH:<span class="variable">$&#123;MVN_PATH&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"开始生成WAR包..."</span></div><div class="line"><span class="variable">$&#123;MVN_PATH&#125;</span>/mvn_on_centos.sh</div><div class="line"><span class="built_in">echo</span> <span class="string">"WAR包生成成功！"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"复制War包到source目录"</span></div><div class="line">cp <span class="variable">$&#123;MVN_PATH&#125;</span>/ROOT.tar.gz <span class="built_in">source</span>/</div><div class="line"><span class="built_in">echo</span> <span class="string">"复制完成"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"开始制作镜像..."</span></div><div class="line">image_tag=`date +%Y%m%d` <span class="comment">#_%H%M</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"当前时间：<span class="variable">$image_tag</span>"</span></div><div class="line">docker build -t ccr.ccs.tencentyun.com/sk/power:v<span class="variable">$&#123;image_tag&#125;</span> .</div><div class="line"><span class="built_in">echo</span> <span class="string">"制作镜像成功!"</span></div><div class="line"></div><div class="line">docker login --username=yourname -p=yourpassword ccr.ccs.tencentyun.com</div><div class="line">docker push ccr.ccs.tencentyun.com/sk/power:v<span class="variable">$&#123;image_tag&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"上传镜像成功!"</span></div></pre></td></tr></table></figure>
<h3 id="4-2-3-镜像自动制作-定时任务"><a href="#4-2-3-镜像自动制作-定时任务" class="headerlink" title="4.2.3 镜像自动制作-定时任务"></a>4.2.3 镜像自动制作-定时任务</h3><p>编译一个调用shell脚本build.sh来管理以上两个构建镜像的sh文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">POWER_PATH=<span class="string">"/mydata/code/deploy/fofpower/web"</span></div><div class="line">API_PATH=<span class="string">"/mydata/code/build/fof_api"</span></div><div class="line">GIT_WEB_PATH=<span class="string">"/mydata/code/build/fofweb"</span></div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"fofweb:git pull..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;GIT_WEB_PATH&#125;</span></div><div class="line">git pull</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"Build fofpower..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;POWER_PATH&#125;</span></div><div class="line"><span class="variable">$&#123;POWER_PATH&#125;</span>/make_power_image_on_centos.sh</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> <span class="string">"Build fof_api..."</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;API_PATH&#125;</span></div><div class="line"><span class="variable">$&#123;API_PATH&#125;</span>/make.sh</div><div class="line"> </div><div class="line"><span class="built_in">echo</span> `date +%Y-%m-%d` `date +%X` <span class="string">"制作完成"</span> &gt;&gt; /mydata/code/build/console.txt</div></pre></td></tr></table></figure></p>
<p>在cron中添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ crontab <span class="_">-e</span></div></pre></td></tr></table></figure></p>
<p>在行尾添加:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">22 </span><span class="number">11</span> * * * cd /mydata/code/build/ &amp;&amp; ./build.sh</div></pre></td></tr></table></figure></p>
<p>定时任务每天11：22执行。</p>
<ul>
<li>遇到在Shell sh下执行成功，在cron中确执行不成功的问题？<br>这是因为cron使用的环境变量不是系统的环境变量，而是自己的环境变量。<br>解决方法：<br>在sh脚本添加如下代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!bin/bash</span></div><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="5，镜像使用"><a href="#5，镜像使用" class="headerlink" title="5，镜像使用"></a>5，镜像使用</h1><p>本地push镜像（需先登录）<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span><span class="selector-class">.com</span>/sk/api:[tag]</div></pre></td></tr></table></figure></p>
<p>上传成果的镜像在镜像仓库能看到：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-08-08/b4.png" alt=""></p>
<p>还可以在后台自动构建，关联github工程，指定Dockerfile，commit触发自动构建。</p>
<blockquote>
<p>PS: commit触发自动构建，在阿里云和腾讯云上测试没成果，需手动构建。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.mykernel.cn/archives/487" target="_blank" rel="external">使用阿里云免费构建docker私有仓库</a><br><a href="http://www.jianshu.com/p/c36fb8d80157" target="_blank" rel="external">Centos 下maven的安装与配置～</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Git的代码版本控制，能保证每个开发人员的开发成果得到有效的保护，不会发生因为其他人的“误操作”操作将自己辛辛苦苦写的代码删除，而且能够跟踪每一次的改动，能快速回滚到之前任一版本。&lt;br&gt;基于Docker镜像的版本控制，能保证应用服务的正常迭代更新，某一版本出问题了可以快速切换至其他镜像版本。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="镜像" scheme="http://www.kekefund.com/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="腾讯云" scheme="http://www.kekefund.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="阿里云" scheme="http://www.kekefund.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="build" scheme="http://www.kekefund.com/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC工程实现单人登录(踢人)</title>
    <link href="http://www.kekefund.com/2017/08/03/springmvc-login-single/"/>
    <id>http://www.kekefund.com/2017/08/03/springmvc-login-single/</id>
    <published>2017-08-03T07:18:50.000Z</published>
    <updated>2017-08-03T07:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>网站不允许多个用户使用一个账号登录，即最后登录的用户会把之前登录在线的用户踢下线。在SpringMVC中配置如下：<br><a id="more"></a></p>
<h1 id="1，spring-shiro-xml配置"><a href="#1，spring-shiro-xml配置" class="headerlink" title="1，spring-shiro.xml配置"></a>1，spring-shiro.xml配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line">   <span class="comment">&lt;!-- 并发登录控制人数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"kickoutSessionControlFilter"</span> <span class="attr">class</span>=<span class="string">"com.dzmsoft.ucs.base.shiro.KickoutSessionControlFilter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionManager"</span> <span class="attr">ref</span>=<span class="string">"sessionManager"</span>/&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"kickoutAfter"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxSession"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"kickoutUrl"</span> <span class="attr">value</span>=<span class="string">"/login?kickout=true"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">util:map</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"authc"</span> <span class="attr">value-ref</span>=<span class="string">"authcFilter"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"kickout"</span> <span class="attr">value-ref</span>=<span class="string">"kickoutSessionControlFilter"</span>/&gt;</span>   #新增</div><div class="line">		<span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--  </span></div><div class="line">       	配置哪些页面需要受保护. </div><div class="line">       	以及访问这些页面需要的权限. </div><div class="line">       	1). anon 可以被匿名访问</div><div class="line">       	2). authc 必须认证(即登录)后才可能访问的页面. </div><div class="line">       	3). logout 登出.</div><div class="line">       	4). roles 角色过滤器--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">		/resources/** = anon</div><div class="line">		/register/** = anon</div><div class="line">		/ucsUser/** = anon</div><div class="line">		/login = anon</div><div class="line">		/rest/** =anon</div><div class="line">		/logout = logout</div><div class="line">		/userManager = roles</div><div class="line">		/** = kickout,authc   #新增</div><div class="line">		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   ...</div></pre></td></tr></table></figure>
<h1 id="2，添加KickoutSessionControlFilter-java文件"><a href="#2，添加KickoutSessionControlFilter-java文件" class="headerlink" title="2，添加KickoutSessionControlFilter.java文件"></a>2，添加KickoutSessionControlFilter.java文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dzmsoft.ucs.base.shiro;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheManager;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.DefaultSessionKey;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.SessionManager;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.web.filter.AccessControlFilter;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.web.util.WebUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.dzmsoft.framework.base.web.mvc.pojo.ShiroUser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Deque;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * &lt;p&gt;User: Zhang Kaitao</div><div class="line"> * &lt;p&gt;Date: 14-2-18</div><div class="line"> * &lt;p&gt;Version: 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KickoutSessionControlFilter</span> <span class="keyword">extends</span> <span class="title">AccessControlFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String kickoutUrl; <span class="comment">//踢出后到的地址</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> kickoutAfter = <span class="keyword">false</span>; <span class="comment">//踢出之前登录的/之后登录的用户 默认踢出之前登录的用户</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSession = <span class="number">1</span>; <span class="comment">//同一个帐号最大会话数 默认1</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> SessionManager sessionManager;</div><div class="line">    <span class="keyword">private</span> Cache&lt;String, Deque&lt;Serializable&gt;&gt; cache;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKickoutUrl</span><span class="params">(String kickoutUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.kickoutUrl = kickoutUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKickoutAfter</span><span class="params">(<span class="keyword">boolean</span> kickoutAfter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.kickoutAfter = kickoutAfter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSession</span><span class="params">(<span class="keyword">int</span> maxSession)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.maxSession = maxSession;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionManager</span><span class="params">(SessionManager sessionManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sessionManager = sessionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCacheManager</span><span class="params">(CacheManager cacheManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cache = cacheManager.getCache(<span class="string">"shiro-kickout-session"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Subject subject = getSubject(request, response);</div><div class="line">        <span class="keyword">if</span>(!subject.isAuthenticated() &amp;&amp; !subject.isRemembered()) &#123;</div><div class="line">            <span class="comment">//如果没有登录，直接进行之后的流程</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Session session = subject.getSession();</div><div class="line">        ShiroUser user = (ShiroUser)subject.getPrincipal();</div><div class="line">        String username = user.getName();</div><div class="line"><span class="comment">//        String username = (String) subject.getPrincipal();</span></div><div class="line">        Serializable sessionId = session.getId();</div><div class="line"></div><div class="line">        <span class="comment">//TODO 同步控制</span></div><div class="line">        Deque&lt;Serializable&gt; deque = cache.get(username);</div><div class="line">        <span class="keyword">if</span>(deque == <span class="keyword">null</span>) &#123;</div><div class="line">            deque = <span class="keyword">new</span> LinkedList&lt;Serializable&gt;();</div><div class="line">            cache.put(username, deque);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果队列里没有此sessionId，且用户没有被踢出；放入队列</span></div><div class="line">        <span class="keyword">if</span>(!deque.contains(sessionId) &amp;&amp; session.getAttribute(<span class="string">"kickout"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">            deque.push(sessionId);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果队列里的sessionId数超出最大会话数，开始踢人</span></div><div class="line">        <span class="keyword">while</span>(deque.size() &gt; maxSession) &#123;</div><div class="line">            Serializable kickoutSessionId = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>(kickoutAfter) &#123; <span class="comment">//如果踢出后者</span></div><div class="line">                kickoutSessionId = deque.removeFirst();</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//否则踢出前者</span></div><div class="line">                kickoutSessionId = deque.removeLast();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Session kickoutSession = sessionManager.getSession(<span class="keyword">new</span> DefaultSessionKey(kickoutSessionId));</div><div class="line">                <span class="keyword">if</span>(kickoutSession != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//设置会话的kickout属性表示踢出了</span></div><div class="line">                    kickoutSession.setAttribute(<span class="string">"kickout"</span>, <span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//ignore exception</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果被踢出了，直接退出，重定向到踢出后的地址</span></div><div class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">"kickout"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//会话被踢出了</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                subject.logout();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">//ignore</span></div><div class="line">            &#125;</div><div class="line">            saveRequest(request);</div><div class="line">            WebUtils.issueRedirect(request, response, kickoutUrl);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3，login-jsp添加提示"><a href="#3，login-jsp添加提示" class="headerlink" title="3，login.jsp添加提示"></a>3，login.jsp添加提示</h1><p>提示是基于url中的参数kickout来判断的<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml">...</span></div><div class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;not empty param.kickout&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'red'</span>&gt;</span>您被踢出登录了。<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>		</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h1 id="4，ehcache-xml配置"><a href="#4，ehcache-xml配置" class="headerlink" title="4，ehcache.xml配置"></a>4，ehcache.xml配置</h1><p>添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro-kickout-session"</span></span></div><div class="line">           <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></div><div class="line">           <span class="attr">eternal</span>=<span class="string">"false"</span></div><div class="line">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></div><div class="line">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></div><div class="line">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></div><div class="line">           <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="5，实测通过"><a href="#5，实测通过" class="headerlink" title="5，实测通过"></a>5，实测通过</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-08-03/kictout.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站不允许多个用户使用一个账号登录，即最后登录的用户会把之前登录在线的用户踢下线。在SpringMVC中配置如下：&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.kekefund.com/categories/Java/"/>
    
    
      <category term="SpringMVC" scheme="http://www.kekefund.com/tags/SpringMVC/"/>
    
      <category term="Login" scheme="http://www.kekefund.com/tags/Login/"/>
    
  </entry>
  
  <entry>
    <title>2017腾讯云+未来峰会</title>
    <link href="http://www.kekefund.com/2017/06/23/qcloud-summit/"/>
    <id>http://www.kekefund.com/2017/06/23/qcloud-summit/</id>
    <published>2017-06-23T07:19:59.000Z</published>
    <updated>2017-06-23T07:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云时代的新趋势-马化腾"><a href="#云时代的新趋势-马化腾" class="headerlink" title="云时代的新趋势  马化腾"></a>云时代的新趋势  马化腾</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs1.png" alt=""><br><a id="more"></a></p>
<blockquote>
<p>电子发票，扫描填写，云端上传，财务报销，钱款到账</p>
</blockquote>
<h1 id="人工智能，为何是现在？"><a href="#人工智能，为何是现在？" class="headerlink" title="人工智能，为何是现在？"></a>人工智能，为何是现在？</h1><blockquote>
<p>张首晟 斯坦福大学物理教授，美国国家科学院院士</p>
</blockquote>
<ul>
<li>摩尔定律所描述的计算能力的指数增长</li>
<li>互联网和物联网的爆发性增长所产生的海量数据</li>
<li>智能算法的快速发展</li>
</ul>
<h2 id="仅基于摄像头的自动驾驶技术"><a href="#仅基于摄像头的自动驾驶技术" class="headerlink" title="仅基于摄像头的自动驾驶技术"></a>仅基于摄像头的自动驾驶技术</h2><p>不需要激光雷达，也不需要高清三维地图 =&gt;Autox技术的可扩展性<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs2.png" alt=""></p>
<ul>
<li><p>大数据<br>金融、教育、健康……，我们需要更多的结构化数据。</p>
</li>
<li><p>数据市场<br>分享个人数据而保护个人隐私 =&gt; 形成数据市场<br>Homomorphic encryption（同态加密）技术</p>
</li>
</ul>
<h1 id="AI即服务"><a href="#AI即服务" class="headerlink" title="AI即服务"></a>AI即服务</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs3.png" alt=""></p>
<h1 id="金融科技"><a href="#金融科技" class="headerlink" title="金融科技"></a>金融科技</h1><blockquote>
<p>李亮，平安科技首席战略官 </p>
</blockquote>
<ul>
<li>1.0：金融IT，科技支持金融</li>
<li>2.0：互联网金融，互联网+金融</li>
<li>3.0：金融科技，科技引领金融<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs4.png" alt=""></li>
</ul>
<h2 id="AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱"><a href="#AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱" class="headerlink" title="AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱"></a>AI、云、数字化O2O和安全是推动金融科技发展的四大关键支柱</h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs5.png" alt=""></p>
<h2 id="金融·科技-or-科技·金融"><a href="#金融·科技-or-科技·金融" class="headerlink" title="金融·科技 or 科技·金融"></a>金融·科技 or 科技·金融</h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs6.png" alt=""></p>
<h2 id="金融应用场景"><a href="#金融应用场景" class="headerlink" title="金融应用场景"></a>金融应用场景</h2><ul>
<li>投资类<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs7.png" alt=""></li>
</ul>
<ul>
<li>银行类<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs8.png" alt=""></li>
<li>保险类<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs9.png" alt=""></li>
</ul>
<h1 id="无缝的数据访问是推动AI商业化应用的关键"><a href="#无缝的数据访问是推动AI商业化应用的关键" class="headerlink" title="无缝的数据访问是推动AI商业化应用的关键"></a>无缝的数据访问是推动AI商业化应用的关键</h1><blockquote>
<p>田民，顺丰集团CTO，顺丰科技CEO</p>
</blockquote>
<h2 id="AI的4大核心要素"><a href="#AI的4大核心要素" class="headerlink" title="AI的4大核心要素"></a>AI的4大核心要素</h2><ul>
<li>数据</li>
<li>场景</li>
<li>技术</li>
<li>算法</li>
</ul>
<h2 id="AI转型的5大关键"><a href="#AI转型的5大关键" class="headerlink" title="AI转型的5大关键"></a>AI转型的5大关键</h2><ul>
<li>成功用例</li>
<li>数据生态</li>
<li>技术工具</li>
<li>无缝介入工作流程</li>
<li>开放的文化和组织</li>
</ul>
<h2 id="AI技术采用率成熟度的6大标准"><a href="#AI技术采用率成熟度的6大标准" class="headerlink" title="AI技术采用率成熟度的6大标准"></a>AI技术采用率成熟度的6大标准</h2><ul>
<li>数字化成熟度</li>
<li>商业规模化应用</li>
<li>核心业务应用</li>
<li>技术多元化</li>
<li>投资回报</li>
<li>高管态度<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs10.png" alt=""></li>
</ul>
<h1 id="互联网专场"><a href="#互联网专场" class="headerlink" title="互联网专场"></a>互联网专场</h1><h2 id="摩拜高速增长背后的技术支撑（六脉神剑）"><a href="#摩拜高速增长背后的技术支撑（六脉神剑）" class="headerlink" title="摩拜高速增长背后的技术支撑（六脉神剑）"></a>摩拜高速增长背后的技术支撑（六脉神剑）</h2><blockquote>
<p>摩拜首席架构师 范同祥</p>
</blockquote>
<ul>
<li>物联网技术</li>
<li>云计算平台</li>
<li>微服务架构</li>
<li>DevOps流水线</li>
<li>腾讯专家团</li>
<li>摩拜技术文化<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs11.png" alt=""></li>
</ul>
<h3 id="领先同行的物联网技术"><a href="#领先同行的物联网技术" class="headerlink" title="领先同行的物联网技术"></a>领先同行的物联网技术</h3><ul>
<li>智能锁</li>
<li>OTA在线升级</li>
<li>软硬件快速迭代</li>
<li>近100项专利或专利申请</li>
<li>GPS定位</li>
<li>GSM通信</li>
<li>蓝牙开锁</li>
<li>NB-IoT<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs12.png" alt=""></li>
</ul>
<h3 id="拥抱主流技术栈"><a href="#拥抱主流技术栈" class="headerlink" title="拥抱主流技术栈"></a>拥抱主流技术栈</h3><ul>
<li>Spring Cloud</li>
<li>Netflix OSS</li>
<li>Consul</li>
<li>ZipKin<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs13.png" alt=""></li>
</ul>
<h3 id="服务分层，保障核心系统稳定可用"><a href="#服务分层，保障核心系统稳定可用" class="headerlink" title="服务分层，保障核心系统稳定可用"></a>服务分层，保障核心系统稳定可用</h3><ul>
<li>数据分层</li>
<li>核心业务系统</li>
<li>运营支撑系统<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs14.png" alt=""><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs15.png" alt=""></li>
</ul>
<h3 id="实用、高效的工具链，步入DevOps快车道"><a href="#实用、高效的工具链，步入DevOps快车道" class="headerlink" title="实用、高效的工具链，步入DevOps快车道"></a>实用、高效的工具链，步入DevOps快车道</h3><ul>
<li>代码模板化</li>
<li>服务容器化</li>
<li>环境标准化</li>
<li>自动化测试</li>
<li>自动化部署</li>
<li>多分支并行迭代<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs16.png" alt=""></li>
</ul>
<h3 id="借力腾讯云"><a href="#借力腾讯云" class="headerlink" title="借力腾讯云"></a>借力腾讯云</h3><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs18.png" alt=""></p>
<h3 id="技术文化"><a href="#技术文化" class="headerlink" title="技术文化"></a>技术文化</h3><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs17.png" alt=""></p>
<h1 id="金融专场"><a href="#金融专场" class="headerlink" title="金融专场"></a>金融专场</h1><h2 id="云上“智”造新金融"><a href="#云上“智”造新金融" class="headerlink" title="云上“智”造新金融"></a>云上“智”造新金融</h2><blockquote>
<p>朱立强，腾讯FiT副总裁,腾讯云副总裁</p>
</blockquote>
<p>AI与金融结合的方向<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs19.png" alt=""></p>
<h2 id="“云-AI”金融应用"><a href="#“云-AI”金融应用" class="headerlink" title="“云+AI”金融应用"></a>“云+AI”金融应用</h2><ul>
<li>智能投顾<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs20.png" alt=""></li>
<li>智能营销<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs21.png" alt=""></li>
<li>智能审批<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs22.png" alt=""></li>
<li>反欺诈<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs23.png" alt=""></li>
</ul>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://cloud.tencent.com/act/tcc2017" target="_blank" rel="external">2017腾讯云+未来峰会</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;云时代的新趋势-马化腾&quot;&gt;&lt;a href=&quot;#云时代的新趋势-马化腾&quot; class=&quot;headerlink&quot; title=&quot;云时代的新趋势  马化腾&quot;&gt;&lt;/a&gt;云时代的新趋势  马化腾&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xo67b.com1.z0.glb.clouddn.com/2017-06-23/qs1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="http://www.kekefund.com/categories/Others/"/>
    
    
      <category term="AI" scheme="http://www.kekefund.com/tags/AI/"/>
    
      <category term="云计算" scheme="http://www.kekefund.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="金融" scheme="http://www.kekefund.com/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>采用Docker集成jquery-file-upload组件到WEB应用</title>
    <link href="http://www.kekefund.com/2017/06/15/jquery-file-upload-docker/"/>
    <id>http://www.kekefund.com/2017/06/15/jquery-file-upload-docker/</id>
    <published>2017-06-15T09:13:19.000Z</published>
    <updated>2017-06-15T09:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1，Docker镜像"><a href="#1，Docker镜像" class="headerlink" title="1，Docker镜像"></a>1，Docker镜像</h1><p>jQuery-File-Upload 组件是一个非常好用的文件上传组件，有很多友好的特性：</p>
<ul>
<li>支持文件多选</li>
<li>拖拽上传</li>
<li>上传进度条</li>
<li>取消上传</li>
<li>图片、音视频预览</li>
<li>纯JS和HTML5代码，不需额外安装插件<a id="more"></a>
</li>
</ul>
<p>服务器端提供了三种部署方式: gae-go、gae-python和php，前两种基于gae，在国内基本被墙了，肯定用不了。php的部署用官方提供的部署方式运行不起来，从dockerhub上找到了一个可用的docker镜像:<a href="https://store.docker.com/community/images/yaasita/docker-jquery-file-upload" target="_blank" rel="external">yaasita/docker-jquery-file-upload</a>，日文？&amp;!OMG。</p>
<ul>
<li>运行起来：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -<span class="selector-tag">p</span> <span class="number">22</span> -<span class="selector-tag">p</span> <span class="number">8033</span>:<span class="number">80</span> yaasita/docker-jquery-file-upload /usr/bin/supervisord</div></pre></td></tr></table></figure>
</li>
</ul>
<p>跟官方给出的Demo是一样的，不过我们需要做下汉化。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-15/up2.png" alt=""></p>
<h1 id="2，集成"><a href="#2，集成" class="headerlink" title="2，集成"></a>2，集成</h1><p>效果如下：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-15/up1.gif" alt=""></p>
<p>每个Tab标签对应的是一个地址。</p>
<h1 id="3，WEB前端"><a href="#3，WEB前端" class="headerlink" title="3，WEB前端"></a>3，WEB前端</h1><p>html调用modal，modal部分如下，通过3个iframe，请求到服务器端的文件上传接口。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 导入modal --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"importModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10%;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">style</span>=<span class="string">"min-width:600px;width:60%;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">&amp;times;</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span> <span class="attr">style</span>=<span class="string">"font-size:18px;"</span>&gt;</span></div><div class="line">数据导入</div><div class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">id</span>=<span class="string">"upLoad"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"labUl"</span> <span class="attr">class</span>=<span class="string">"labelUl"</span> <span class="attr">style</span>=<span class="string">"float:none;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"basicInfotab"</span> <span class="attr">class</span>=<span class="string">"Active2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"netDatatab"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>净值数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"positionDatatab"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>持仓数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"basicInfoDiv"</span> <span class="attr">class</span>=<span class="string">"uploadDiv"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">scrolling</span>=<span class="string">"yes"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8010/"</span> <span class="attr">class</span>=<span class="string">"fileUpload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"netDataDiv"</span> <span class="attr">class</span>=<span class="string">"uploadDiv"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">scrolling</span>=<span class="string">"yes"</span>  <span class="attr">src</span>=<span class="string">"http://localhost:8011/"</span>  <span class="attr">class</span>=<span class="string">"fileUpload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"positionDataDiv"</span> <span class="attr">class</span>=<span class="string">"uploadDiv"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">scrolling</span>=<span class="string">"yes"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8012/"</span>  <span class="attr">class</span>=<span class="string">"fileUpload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"easy1Btn"</span> <span class="attr">id</span>=<span class="string">"buttonImportAndCalc"</span>&gt;</span>导入&amp;计算</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;button type="button" id="fileUpload" class="easy2Btn"&gt;上传</span></div><div class="line">&lt;/button&gt; --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"easy1Btn"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"layer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"onLoad"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="4，服务器端配置"><a href="#4，服务器端配置" class="headerlink" title="4，服务器端配置"></a>4，服务器端配置</h1><h2 id="4-1，Dockerfile文件"><a href="#4-1，Dockerfile文件" class="headerlink" title="4.1，Dockerfile文件"></a>4.1，Dockerfile文件</h2><p>位置: ./FileUpload/Dockerfile<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Version 0.1</span></div><div class="line"></div><div class="line"><span class="comment"># 基础镜像</span></div><div class="line"><span class="keyword">FROM</span> yaasita/docker-jquery-file-upload</div><div class="line"></div><div class="line"><span class="comment"># 维护者信息</span></div><div class="line"><span class="keyword">MAINTAINER</span> cbbing@<span class="number">163</span>.com</div><div class="line"></div><div class="line"><span class="comment"># 镜像命令</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> index.html /var/www/upload/index.html</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/supervisord"</span>]</span></div></pre></td></tr></table></figure></p>
<p>其中，Dockerfile中的<a href="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-15/index.html" target="_blank" rel="external">index.html</a>文件，是为了汉化docker镜像中的index文件。</p>
<h2 id="4-2，docker-compose-yml"><a href="#4-2，docker-compose-yml" class="headerlink" title="4.2，docker-compose.yml"></a>4.2，docker-compose.yml</h2><p>docker-compose中配置了3个容器，对外提供文件上传接口，分别对应服务器的info, nav, pos目录。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">version:</span> <span class="string">'2'</span></div><div class="line"><span class="symbol">services:</span></div><div class="line"></div><div class="line">  <span class="symbol">fileupload1:</span></div><div class="line">    <span class="symbol">build:</span> ./FileUpload</div><div class="line">    <span class="symbol">ports:</span></div><div class="line">      - <span class="number">8010</span><span class="symbol">:</span><span class="number">80</span></div><div class="line">      - <span class="number">22</span></div><div class="line">    <span class="symbol">volumes:</span></div><div class="line">      - <span class="regexp">/usr/local</span><span class="regexp">/upload/info</span><span class="symbol">:/var/www/upload/server/php/files</span></div><div class="line">    <span class="symbol">restart:</span> <span class="string">"always"</span></div><div class="line"></div><div class="line">  <span class="symbol">fileupload2:</span></div><div class="line">    <span class="symbol">build:</span> ./FileUpload</div><div class="line">    <span class="symbol">ports:</span></div><div class="line">      - <span class="number">8011</span><span class="symbol">:</span><span class="number">80</span></div><div class="line">      - <span class="number">22</span></div><div class="line">    <span class="symbol">volumes:</span></div><div class="line">      - <span class="regexp">/usr/local</span><span class="regexp">/upload/nav</span><span class="symbol">:/var/www/upload/server/php/files</span> </div><div class="line">    <span class="symbol">restart:</span> <span class="string">"always"</span></div><div class="line"></div><div class="line">  <span class="symbol">fileupload3:</span></div><div class="line">    <span class="symbol">build:</span> ./FileUpload</div><div class="line">    <span class="symbol">ports:</span></div><div class="line">      - <span class="number">8012</span><span class="symbol">:</span><span class="number">80</span></div><div class="line">      - <span class="number">22</span></div><div class="line">    <span class="symbol">volumes:</span></div><div class="line">      - <span class="regexp">/usr/local</span><span class="regexp">/upload/pos</span><span class="symbol">:/var/www/upload/server/php/files</span></div><div class="line">    <span class="symbol">restart:</span> <span class="string">"always"</span></div></pre></td></tr></table></figure></p>
<p>目录结构：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-</span> <span class="string">docker-compose.yml</span></div><div class="line"><span class="bullet">-</span> <span class="string">FileUpload/</span></div><div class="line"><span class="bullet">-</span><span class="meta">---</span> <span class="string">Dockerfile</span></div><div class="line"><span class="bullet">-</span><span class="meta">---</span> <span class="string">index.html</span></div></pre></td></tr></table></figure></p>
<h2 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose up <span class="comment">--build</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank" rel="external">https://github.com/blueimp/jQuery-File-Upload</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1，Docker镜像&quot;&gt;&lt;a href=&quot;#1，Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;1，Docker镜像&quot;&gt;&lt;/a&gt;1，Docker镜像&lt;/h1&gt;&lt;p&gt;jQuery-File-Upload 组件是一个非常好用的文件上传组件，有很多友好的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持文件多选&lt;/li&gt;
&lt;li&gt;拖拽上传&lt;/li&gt;
&lt;li&gt;上传进度条&lt;/li&gt;
&lt;li&gt;取消上传&lt;/li&gt;
&lt;li&gt;图片、音视频预览&lt;/li&gt;
&lt;li&gt;纯JS和HTML5代码，不需额外安装插件
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="http://www.kekefund.com/tags/Dockerfile/"/>
    
      <category term="jquery-file-upload" scheme="http://www.kekefund.com/tags/jquery-file-upload/"/>
    
      <category term="docker-compose" scheme="http://www.kekefund.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker私有仓库搭建</title>
    <link href="http://www.kekefund.com/2017/06/07/doker-registry/"/>
    <id>http://www.kekefund.com/2017/06/07/doker-registry/</id>
    <published>2017-06-07T08:08:33.000Z</published>
    <updated>2017-06-07T08:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker提供了开放的中央仓库dockerhub，同时也允许我们使用registry搭建本地私有仓库。搭建私有仓库有如下的优点：</p>
<ol>
<li>节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；</li>
<li>私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。<a id="more"></a>
</li>
</ol>
<h1 id="1，搭建私有仓库"><a href="#1，搭建私有仓库" class="headerlink" title="1，搭建私有仓库"></a>1，搭建私有仓库</h1><h2 id="1-1-下载镜像registry"><a href="#1-1-下载镜像registry" class="headerlink" title="1.1 下载镜像registry"></a>1.1 下载镜像registry</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker pull registry</div></pre></td></tr></table></figure>
<h2 id="1-2-启动容器"><a href="#1-2-启动容器" class="headerlink" title="1.2 启动容器"></a>1.2 启动容器</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> --restart=always --name=registry-srv -v /mydata/<span class="symbol">dockerRegistry:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span> <span class="title">registry</span></span></div></pre></td></tr></table></figure>
<p>解释一下:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-d：后台运行</div><div class="line">-p：将容器的<span class="number">5000</span>端口映射到宿主机的<span class="number">5000</span>端口</div><div class="line">--restart：docker服务重启后总是重启此容器</div><div class="line">--name：容器的名称</div><div class="line">-v：将容器内的/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span>映射到宿主机的/<span class="title">mydata</span>/<span class="title">dockerRegistry</span>目录</span></div></pre></td></tr></table></figure></p>
<h1 id="2，搭建WEB服务"><a href="#2，搭建WEB服务" class="headerlink" title="2，搭建WEB服务"></a>2，搭建WEB服务</h1><p>私有仓库搭建好了，怎么查看仓库里的镜像，搭建一个web服务，查看修改image比较方便。</p>
<h2 id="2-1-下载镜像"><a href="#2-1-下载镜像" class="headerlink" title="2.1 下载镜像"></a>2.1 下载镜像</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker pull hyper/docker-registry-web</div></pre></td></tr></table></figure>
<h2 id="2-2-启动容器"><a href="#2-2-启动容器" class="headerlink" title="2.2 启动容器"></a>2.2 启动容器</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -p <span class="number">8080</span>:<span class="number">8080</span> --restart=always --name <span class="keyword">registry</span>-web --link <span class="keyword">registry</span>-srv -e REGISTRY_URL=<span class="keyword">http</span>://<span class="keyword">registry</span>-srv:<span class="number">5000</span>/v2 -e REGISTRY_NAME=localhost:<span class="number">5000</span> hyper/docker-<span class="keyword">registry</span>-web</div></pre></td></tr></table></figure>
<p>解释一下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="symbol">it:</span> 以交互模式运行</span></div><div class="line">-<span class="ruby">-link：链接其它容器(registry-srv)，在此容器中，使用registry-srv等同于registry-srv容器的局域网地址</span></div><div class="line">-<span class="ruby">e：设置环境变量</span></div></pre></td></tr></table></figure></p>
<h1 id="3，上传本地镜像到私有仓库"><a href="#3，上传本地镜像到私有仓库" class="headerlink" title="3，上传本地镜像到私有仓库"></a>3，上传本地镜像到私有仓库</h1><p>例如，将本地的hcharts上传到仓库<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker images | grep hcharts</div><div class="line">cbbing/hcharts                       latest              <span class="number">64164</span>ca3dafe        <span class="number">3</span> weeks ago         <span class="number">550</span> MB</div></pre></td></tr></table></figure></p>
<h2 id="3-1-修改镜像tag"><a href="#3-1-修改镜像tag" class="headerlink" title="3.1 修改镜像tag"></a>3.1 修改镜像tag</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">tag</span> <span class="title">cbbing</span>/hcharts <span class="number">192.168</span>.<span class="number">1.87</span>:<span class="number">5000</span>/cbbing/hcharts</div></pre></td></tr></table></figure>
<h2 id="3-2-上传tag镜像到仓库"><a href="#3-2-上传tag镜像到仓库" class="headerlink" title="3.2 上传tag镜像到仓库"></a>3.2 上传tag镜像到仓库</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">push</span> <span class="number">192.168</span>.1.87:<span class="number">5000</span>/cbbing/hcharts</div><div class="line"></div><div class="line">The <span class="built_in">push</span> refers to a repository [<span class="number">192.168</span>.1.87:<span class="number">5000</span>/hcharts]</div><div class="line"><span class="number">96b641920005</span>: Pushing [===&gt;                                               ] <span class="number">8.852</span> MB/<span class="number">125.1</span> MB</div><div class="line">ee2881ef910e: Pushing [==&gt;                                                ] <span class="number">11.69</span> MB/<span class="number">232.7</span> MB</div><div class="line">36018b5e9787: Pushing [===&gt;                                               ] <span class="number">11.99</span> MB/<span class="number">192.5</span> MB</div></pre></td></tr></table></figure>
<h2 id="3-3-会出现的push失败"><a href="#3-3-会出现的push失败" class="headerlink" title="3.3 会出现的push失败"></a>3.3 会出现的push失败</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">push</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts</div><div class="line">The <span class="keyword">push</span> refers to a repository [<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts]</div><div class="line">Get https://<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>这是因为Docker在1.3.x之后默认docker registry使用的是https，为了解决这个问题，修改本地主机的docker启动配置文件，添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">--insecure-registry</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.87</span><span class="selector-pseudo">:5000</span></div></pre></td></tr></table></figure></p>
<p>我的macbook在图形化终端上修改如下，填写后“Apply&amp;Restart”。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-07/dr1.png" alt=""></p>
<h2 id="3-4-下载镜像"><a href="#3-4-下载镜像" class="headerlink" title="3.4 下载镜像"></a>3.4 下载镜像</h2><p>在另外的客户机上pull镜像，跟拉取DockerHub上的镜像是一样的流程。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.87</span>:<span class="number">5000</span>/hcharts</div></pre></td></tr></table></figure></p>
<h1 id="4，wen端查看私有仓库镜像"><a href="#4，wen端查看私有仓库镜像" class="headerlink" title="4，wen端查看私有仓库镜像"></a>4，wen端查看私有仓库镜像</h1><p>访问:<a href="http://192.168.1.87:8080/，网页上呈现：" target="_blank" rel="external">http://192.168.1.87:8080/，网页上呈现：</a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-06-07/dr2.png" alt=""></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote>
<p>1, <a href="https://store.docker.com/images/registry" target="_blank" rel="external">https://store.docker.com/images/registry</a><br>2, <a href="https://store.docker.com/community/images/hyper/docker-registry-web" target="_blank" rel="external">https://store.docker.com/community/images/hyper/docker-registry-web</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker提供了开放的中央仓库dockerhub，同时也允许我们使用registry搭建本地私有仓库。搭建私有仓库有如下的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；&lt;/li&gt;
&lt;li&gt;私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Registry" scheme="http://www.kekefund.com/tags/Registry/"/>
    
  </entry>
  
  <entry>
    <title>scrapy+splash 爬取动态网站(JS)</title>
    <link href="http://www.kekefund.com/2017/05/25/scrapy-splash/"/>
    <id>http://www.kekefund.com/2017/05/25/scrapy-splash/</id>
    <published>2017-05-25T09:05:06.000Z</published>
    <updated>2017-06-07T02:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>scrapy只支持静态网页的抓取，通过scrapy-splash，能实现对JavaScript的解析。<br><a id="more"></a></p>
<h1 id="一、搭建Docker服务器"><a href="#一、搭建Docker服务器" class="headerlink" title="一、搭建Docker服务器"></a>一、搭建Docker服务器</h1><blockquote>
<p>Docker的相关知识参考本站的<a href="http://kekefund.com/categories/Docker/" target="_blank" rel="external">Docker相关文章</a>。</p>
</blockquote>
<p>Scrapy-Splash采用Splash HTTP API，需要搭建一个Splash实例，用Docker搭建最方便：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 8050:8050 --restart=always --name=splash scrapinghub/splash</span></div></pre></td></tr></table></figure>
<p>在服务器运行好Docker后，就可以通过IP+端口(例如：<a href="http://123.206.211.100:8050" target="_blank" rel="external">http://123.206.211.100:8050</a>  )访问了。</p>
<h1 id="二、Scrapy项目"><a href="#二、Scrapy项目" class="headerlink" title="二、Scrapy项目"></a>二、Scrapy项目</h1><h2 id="1，安装scrapy-splash"><a href="#1，安装scrapy-splash" class="headerlink" title="1，安装scrapy-splash"></a>1，安装scrapy-splash</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip <span class="keyword">install</span> scrapy-splash</div></pre></td></tr></table></figure>
<h2 id="2，配置-setting-py"><a href="#2，配置-setting-py" class="headerlink" title="2，配置(setting.py)"></a>2，配置(setting.py)</h2><h3 id="增加Splash服务器地址"><a href="#增加Splash服务器地址" class="headerlink" title="增加Splash服务器地址"></a>增加Splash服务器地址</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SPLASH_URL</span> = <span class="string">'http://123.206.211.100:8050'</span></div></pre></td></tr></table></figure>
<h3 id="开启Splash中间件"><a href="#开启Splash中间件" class="headerlink" title="开启Splash中间件"></a>开启Splash中间件</h3><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    '<span class="attribute">scrapy_splash.SplashCookiesMiddleware'</span>: 723,</div><div class="line">    'scrapy_splash<span class="variable">.SplashMiddleware</span>': 725,</div><div class="line">    'scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpcompression</span><span class="variable">.HttpCompressionMiddleware</span>': 810,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DUPEFILTER_CLASS</span> = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></div><div class="line"><span class="attr">HTTPCACHE_STORAGE</span> = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></div><div class="line"><span class="attr">SPLASH_COOKIES_DEBUG</span> = <span class="literal">True</span></div></pre></td></tr></table></figure>
<h2 id="3，spider-py使用SplashRequest"><a href="#3，spider-py使用SplashRequest" class="headerlink" title="3，spider.py使用SplashRequest"></a>3，spider.py使用SplashRequest</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line">from scrapy_splash import SplashRequest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderS1</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></div><div class="line"></div><div class="line">    name = <span class="string">"s1_spider"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    	</div><div class="line">    	urls = [<span class="string">'http://sports.sina.com.cn/g/seriea/2017-05-23/doc-ifyfkqiv6736172.shtml'</span>,</div><div class="line">                <span class="string">'http://sports.sina.com.cn/basketball/nba/2017-05-23/doc-ifyfkqiv6683532.shtml'</span>]</div><div class="line">    	</div><div class="line">        requests = []</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="symbol">urls:</span></div><div class="line">       	    url = url.strip()</div><div class="line">       	    request = SplashRequest(url, callback=<span class="keyword">self</span>.parse, args=&#123;<span class="string">'wait'</span><span class="symbol">:</span><span class="number">3</span>&#125;)</div><div class="line">        	requests.append(request)</div><div class="line">        <span class="keyword">return</span> requests</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span>:</div><div class="line">        <span class="keyword">self</span>.log(response.url)</div><div class="line">        ...</div></pre></td></tr></table></figure>
<p>使用非常简单，具体请求参数参考 <a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="external">Scrapy&amp;JavaScript integration through Splash</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scrapy只支持静态网页的抓取，通过scrapy-splash，能实现对JavaScript的解析。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Scrapy" scheme="http://www.kekefund.com/tags/Scrapy/"/>
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="Splash" scheme="http://www.kekefund.com/tags/Splash/"/>
    
      <category term="JavaScript" scheme="http://www.kekefund.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>iReport 选择MySQL数据源生成报告</title>
    <link href="http://www.kekefund.com/2017/05/15/ireport-use-db/"/>
    <id>http://www.kekefund.com/2017/05/15/ireport-use-db/</id>
    <published>2017-05-15T07:40:53.000Z</published>
    <updated>2017-05-15T08:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>ireport是java项目中比较好用的pdf报告生成工具，可以通过JRBeanCollectionDataSource传递java对象至ireport。在项目比较小的时候是比较快捷的。当项目需求复杂了，人员增多了，这种方式不适合任务细分，前后流程衔接太紧密，而且不好调试。<br>采用Mysql作为中间数据交换，能直接在ireport中预览数据展示结果。而且前后端解耦，可以将任务分派给不同的人来做。<br><a id="more"></a></p>
<h1 id="一、配置数据库"><a href="#一、配置数据库" class="headerlink" title="一、配置数据库"></a>一、配置数据库</h1><p>点击下图的红框：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir1.png" alt=""></p>
<p>新建一个Database JDBC connection:<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir2.png" alt=""><br>配置好MySQL的信息，Test成功！<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir3.png" alt=""></p>
<h1 id="二、使用-JDBC连接"><a href="#二、使用-JDBC连接" class="headerlink" title="二、使用 JDBC连接"></a>二、使用 JDBC连接</h1><h2 id="1，SQL与Java-Object的对应关系"><a href="#1，SQL与Java-Object的对应关系" class="headerlink" title="1，SQL与Java Object的对应关系"></a>1，SQL与Java Object的对应关系</h2><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir10.png" alt=""></p>
<h2 id="2，SQL-Qurey"><a href="#2，SQL-Qurey" class="headerlink" title="2，SQL Qurey"></a>2，SQL Qurey</h2><p>点击下图的红框：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir4.png" alt=""><br>编写SQL语句，点击“Read Fields”，会显示查询的字段，点击OK，字段会在左侧的Fields中显示出来。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir5.png" alt=""></p>
<p>Fields会根据sql查询的字段自动生成：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir6.png" alt=""><br>在Detail报表中调用Fields：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir7.png" alt=""><br>Preview预览如下：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir8.png" alt=""></p>
<h1 id="三、在Java项目中调用"><a href="#三、在Java项目中调用" class="headerlink" title="三、在Java项目中调用"></a>三、在Java项目中调用</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-15/ir9.png" alt=""><br>需要先在jrxml中设置语言为java，否则会报如下的错误：。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.<span class="string">NoClassDefFoundError:</span> org<span class="regexp">/codehaus/</span>groovy<span class="regexp">/control/</span>CompilationFailedException</div></pre></td></tr></table></figure></p>
<p>java文件:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JRExporterParameter;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperExportManager;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperFillManager;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperPrint;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.JasperReport;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.<span class="keyword">export</span>.JRRtfExporter;</div><div class="line"><span class="keyword">import</span> net.sf.jasperreports.engine.util.JRLoader;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"> * 报告</div><div class="line"> * @author dzm</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"productReport"</span>)</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ProductRepotController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span>&#123;</div><div class="line">    <span class="comment"><span class="markdown">/**</span></span></div><div class="line"><span class="code">    * 一建生成报告</span></div><div class="line"><span class="code">    * parmas: fileFormat: pdf or doc</span></div><div class="line"><span class="code">    */</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"exportReport"</span>, method = RequestMethod.GET)</div><div class="line">    public <span class="keyword">void</span> exportReport(<span class="built_in">String</span> fundId, <span class="built_in">String</span> fundName, <span class="built_in">String</span> fileFormat, HttpServletResponse response)&#123;</div><div class="line"></div><div class="line">        Date curDate = <span class="keyword">new</span> Date();</div><div class="line">        <span class="built_in">String</span> dateStr = DateUtil.formatDate(curDate, <span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        <span class="comment">// 文件路径 </span></div><div class="line">        StringBuilder filePath = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">        filePath.append(upload_path).append(dateStr).append(<span class="string">"/"</span>).append(fundId);</div><div class="line">        FileUtil.createDictionary(filePath.toString());</div><div class="line">        <span class="comment">// 文件名 </span></div><div class="line">        StringBuilder fileName = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">        fileName.append(fundName).append(<span class="string">"报告_"</span>).append(dateStr).append(<span class="string">"."</span>).append(fileFormat);</div><div class="line">        <span class="comment">// 文件全路径</span></div><div class="line">        StringBuilder fullName = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">        fullName.append(filePath).append(<span class="string">"/"</span>).append(fileName);</div><div class="line">        <span class="comment">// 加载报表对象</span></div><div class="line">        InputStream <span class="keyword">is</span> = <span class="keyword">null</span>;</div><div class="line">        JasperReport jasperReport = <span class="keyword">null</span>;</div><div class="line">        JasperPrint jasperPrint = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">is</span> = ProductDetailController.<span class="keyword">class</span>.getClassLoader().getResourceAsStream(analysis_jasper_path);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">// 响应头部信息设置</span></div><div class="line">            response.setContentType(<span class="string">"text/plain"</span>);</div><div class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span>+FileUtil.getAttachName(fileName.toString()));</div><div class="line">            <span class="comment">//</span></div><div class="line">            jasperReport = (JasperReport) JRLoader.loadObject(<span class="keyword">is</span>);</div><div class="line">            <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; params = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt;();</div><div class="line">            params.put(<span class="string">"SUBREPORT_DIR"</span>, getClassPath(subreport_dir));</div><div class="line">            params.put(<span class="string">"IMAGE_DIR"</span>, <span class="string">"file:"</span>+filePath+<span class="string">"/"</span>);</div><div class="line">                 </div><div class="line">            <span class="comment">// </span></div><div class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">            <span class="built_in">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/test?"</span></div><div class="line">                        + <span class="string">"user=s1&amp;password=s1&amp;useUnicode=true&amp;characterEncoding=UTF8"</span>;</div><div class="line">            Connection conn = (Connection) DriverManager.getConnection(url);</div><div class="line">            jasperPrint = JasperFillManager.fillReport(jasperReport, params, conn);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (fileFormat.equals(<span class="string">"pdf"</span>)) &#123;</div><div class="line">                JasperExportManager.exportReportToPdfFile(jasperPrint, fullName.toString());</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                JRRtfExporter docReport = <span class="keyword">new</span> JRRtfExporter();</div><div class="line">                docReport.setParameter(JRExporterParameter.OUTPUT_FILE_NAME,fullName.toString());</div><div class="line">                docReport.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);</div><div class="line">                docReport.exportReport();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            FileUtil.download(fullName.toString(), response.getOutputStream());</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            logger.error(<span class="string">"生成报告失败，失败原因:&#123;&#125;"</span>,e.getMessage());</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">is</span>!=<span class="keyword">null</span>) <span class="keyword">is</span>.close();</div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                logger.error(<span class="string">"关闭文件输入流异常:&#123;&#125;"</span>,e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://my.oschina.net/jiangli0502/blog/122885" target="_blank" rel="external">https://my.oschina.net/jiangli0502/blog/122885</a><br><a href="http://stackoverflow.com/questions/8935925/jasperreports-compilation-error" target="_blank" rel="external">http://stackoverflow.com/questions/8935925/jasperreports-compilation-error</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ireport是java项目中比较好用的pdf报告生成工具，可以通过JRBeanCollectionDataSource传递java对象至ireport。在项目比较小的时候是比较快捷的。当项目需求复杂了，人员增多了，这种方式不适合任务细分，前后流程衔接太紧密，而且不好调试。&lt;br&gt;采用Mysql作为中间数据交换，能直接在ireport中预览数据展示结果。而且前后端解耦，可以将任务分派给不同的人来做。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.kekefund.com/categories/Java/"/>
    
    
      <category term="ireport" scheme="http://www.kekefund.com/tags/ireport/"/>
    
      <category term="报告" scheme="http://www.kekefund.com/tags/%E6%8A%A5%E5%91%8A/"/>
    
      <category term="mysql" scheme="http://www.kekefund.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker版highcharts中文导出服务器</title>
    <link href="http://www.kekefund.com/2017/05/12/docker-highcharts-server/"/>
    <id>http://www.kekefund.com/2017/05/12/docker-highcharts-server/</id>
    <published>2017-05-12T08:57:28.000Z</published>
    <updated>2017-05-31T02:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>highcharts的导出服务器使用固然方便，但需要把数据上传到它的服务器，对于数据安全性的考虑和外网访问限制的场景，搭建自己的导出服务器是比较可靠的。highcharts提供了一套搭建导出服务器的方法，本文在这个基础上将导出服务器封装成一个Docker容器，并且实现了图片中文字体的支持。</p>
<h1 id="1，基于centos官方镜像"><a href="#1，基于centos官方镜像" class="headerlink" title="1，基于centos官方镜像"></a>1，基于centos官方镜像</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker pull centos</span></div></pre></td></tr></table></figure>
<h1 id="2，启动容器并进入"><a href="#2，启动容器并进入" class="headerlink" title="2，启动容器并进入"></a>2，启动容器并进入</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--name=hcharts -p 3002:80 -v /Users/Download:/home centos bash</span></div></pre></td></tr></table></figure>
<h1 id="3，安装phantomjs"><a href="#3，安装phantomjs" class="headerlink" title="3，安装phantomjs"></a>3，安装phantomjs</h1><p>由于phantomjs的tar.bz2在centos容器中解压失败，我们采用在宿主机中下载并解压好，通过-v链接到容器中。<br>在宿主机中下载最新版的<a href="http://phantomjs.org/download.html" target="_blank" rel="external">phamtomjs</a>，解压到/Users/Download/。在容器的/home目录下就能看到宿主机的解压文件。</p>
<p>设置PATH路径：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="meta">@bfdb</span>9f8adaf6 my_fonts]# <span class="keyword">export</span> PHANTOMJS_HOME = <span class="regexp">/PATH/</span>phantomjs<span class="number">-2.1</span><span class="number">.1</span></div><div class="line">[root<span class="meta">@bfdb</span>9f8adaf6 my_fonts]# <span class="keyword">export</span> PATH = $PATH:$PHANTOMJS_HOME/bin</div></pre></td></tr></table></figure></p>
<p>请在下面相对应的linux版本 运行以下命令</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ubuntu</span></div><div class="line">sudo apt-<span class="keyword">get</span> install libfontconfig</div><div class="line"> </div><div class="line"><span class="meta"># centos</span></div><div class="line">yum install libXext libXrender fontconfig libfontconfig.so<span class="number">.1</span></div></pre></td></tr></table></figure>
<p>输出下面的版本信息即安装成功</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">phantomjs</span> <span class="selector-tag">--version</span></div><div class="line">2<span class="selector-class">.1</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<h1 id="4，安装node-js"><a href="#4，安装node-js" class="headerlink" title="4，安装node.js"></a>4，安装node.js</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --<span class="keyword">location</span> <span class="title">https</span>://rpm.nodesource.com/setup_6.x | bash -</div><div class="line">yum -y install nodejs</div></pre></td></tr></table></figure>
<blockquote>
<p>参考:<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">https://nodejs.org/en/download/package-manager/</a></p>
</blockquote>
<h1 id="5，安装highcharts导出模块"><a href="#5，安装highcharts导出模块" class="headerlink" title="5，安装highcharts导出模块"></a>5，安装highcharts导出模块</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 淘宝[npm镜像](http:<span class="comment">//npm.taobao.org/)：</span></div><div class="line">npm config <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org </span></div><div class="line"><span class="comment">// 全局安装导出模块</span></div><div class="line">npm install highcharts-<span class="keyword">export</span>-server -g</div><div class="line"><span class="comment">// 安装完毕后检查是否安装成功</span></div><div class="line">highcharts-<span class="keyword">export</span>-server</div></pre></td></tr></table></figure>
<h1 id="6，中文字体的支持"><a href="#6，中文字体的支持" class="headerlink" title="6，中文字体的支持"></a>6，中文字体的支持</h1><h2 id="a，复制中文字体到容器"><a href="#a，复制中文字体到容器" class="headerlink" title="a，复制中文字体到容器"></a>a，复制中文字体到容器</h2><p>将windows的fonts目录下拷贝simkai.ttf、simsun.ttc、simhei.ttf，通过-v上传到容器/home目录下。<br>在容器的usr/share/fonts目录下新建my_fonts，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/share/fonts</div><div class="line">$ mkdir myfonts</div><div class="line">$ mv /home/simkai<span class="selector-class">.ttf</span> ./myfonts</div><div class="line">$ mv /home/simsun<span class="selector-class">.ttc</span> ./myfonts</div><div class="line">$ mv /home/simhei<span class="selector-class">.ttf</span> ./myfonts</div></pre></td></tr></table></figure></p>
<h2 id="b，生成字体索引"><a href="#b，生成字体索引" class="headerlink" title="b，生成字体索引"></a>b，生成字体索引</h2><p>在myfonts目录下执行 mkfontscale，执行成功后执行下面命令：fc-list :lang=zh，输出有信息即安装成功！<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@bfdb9f8adaf6</span> my_fonts]<span class="comment"># fc-list :lang=zh</span></div><div class="line">/usr/share/fonts/my_fonts/simsun.<span class="symbol">ttc:</span> NSimSun,新宋体<span class="symbol">:style=Regular</span></div><div class="line">/usr/share/fonts/my_fonts/simhei.<span class="symbol">ttf:</span> SimHei,黑体<span class="symbol">:style=Regular</span>,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,Arrunta</div><div class="line">/usr/share/fonts/my_fonts/simkai.<span class="symbol">ttf:</span> KaiTi,楷体<span class="symbol">:style=Regular</span>,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,Arrunta</div><div class="line">/usr/share/fonts/my_fonts/simsun.<span class="symbol">ttc:</span> SimSun,宋体<span class="symbol">:style=Regular</span></div></pre></td></tr></table></figure></p>
<h1 id="7，测试"><a href="#7，测试" class="headerlink" title="7，测试"></a>7，测试</h1><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'&#123;"</span>infile<span class="string">":&#123;"</span>title<span class="string">": &#123;"</span>text<span class="string">": "</span>中文测试<span class="string">"&#125;, "</span>xAxis<span class="string">": &#123;"</span>categories<span class="string">": ["</span>Jan<span class="string">", "</span>Feb<span class="string">", "</span>Mar<span class="string">"]&#125;, "</span>series<span class="string">": [&#123;"</span>data<span class="string">": [29.9, 71.5, 106.4]&#125;]&#125;&#125;'</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3002</span> -o mychart.png</div></pre></td></tr></table></figure>
<p>得到图片：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-05-12/mychart.png" alt=""></p>
<h1 id="8，从Docker仓库获取"><a href="#8，从Docker仓库获取" class="headerlink" title="8，从Docker仓库获取"></a>8，从Docker仓库获取</h1><p>本教程中的镜像已上传至docker官方仓库, <a href="https://store.docker.com/community/images/cbbing/hcharts" target="_blank" rel="external">链接</a>，按照说明pull即可。<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">d</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name=hcharts0</span><span class="string">.</span><span class="comment">2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">restart=always</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">3003:3000</span> <span class="comment">cbbing/hcharts</span> <span class="comment">highcharts</span><span class="literal">-</span><span class="comment">export</span><span class="literal">-</span><span class="comment">server</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enableServer</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">3000</span></div></pre></td></tr></table></figure></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><blockquote>
<p>1，<a href="https://bbs.hcharts.cn/thread-113-1-1.html" target="_blank" rel="external">Linux下导出服务器缺少字体中文乱码问题解决办法</a></p>
<p>2，<a href="https://www.hcharts.cn/docs/setting-up-the-server" target="_blank" rel="external">搭建导出服务器</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;highcharts的导出服务器使用固然方便，但需要把数据上传到它的服务器，对于数据安全性的考虑和外网访问限制的场景，搭建自己的导出服务器是比较可靠的。highcharts提供了一套搭建导出服务器的方法，本文在这个基础上将导出服务器封装成一个Docker容器，并且实现了图片
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="highcharts" scheme="http://www.kekefund.com/tags/highcharts/"/>
    
  </entry>
  
  <entry>
    <title>docker版私人网盘ownCloud</title>
    <link href="http://www.kekefund.com/2017/04/19/docker-owncloud/"/>
    <id>http://www.kekefund.com/2017/04/19/docker-owncloud/</id>
    <published>2017-04-19T04:37:04.000Z</published>
    <updated>2017-04-19T04:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>ownCloud是一个自由且开源的个人云存储解决方案。ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。<br>除了云存储之外，ownCloud也可用于同步日历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能（类似google documents或Duddle等等）。<br>ownCloud官方提供了Docker版的<a href="https://store.docker.com/images/owncloud?tab=description" target="_blank" rel="external">ownCloud</a>，部署安装能一步到位。<br><a id="more"></a></p>
<h1 id="如何使用Docker"><a href="#如何使用Docker" class="headerlink" title="如何使用Docker"></a>如何使用Docker</h1><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>直接运行：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 80:80 owncloud:8.1</span></div></pre></td></tr></table></figure></p>
<p>然后进入 <a href="http://localhost/" target="_blank" rel="external">http://localhost/</a>，根据向导配置。默认情况下使用SQLite作为数据储存。对于MySQL数据库，可以通过容器连接，例如:–link my-mysql:mysql。</p>
<h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>所有的数据在数据库中管理，数据保存在/var/www/html。可以通过以下命令对容器的数据卷和宿主机的数据卷映射。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="symbol">:/var/www/html</span></span></div></pre></td></tr></table></figure></p>
<p>对于更细粒度的数据持久，设置如下的命令：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="regexp">/apps:/var</span><span class="regexp">/www/html</span><span class="regexp">/apps installed /</span> modified apps</span></div><div class="line">-<span class="ruby">v /&lt;mydatalocation&gt;<span class="regexp">/config:/var</span><span class="regexp">/www/html</span><span class="regexp">/config local configuration</span></span></div><div class="line">-<span class="ruby"><span class="regexp">v /</span>&lt;mydatalocation&gt;<span class="regexp">/data:/var</span><span class="regexp">/www/html</span><span class="regexp">/data the actual data of your ownCloud</span></span></div></pre></td></tr></table></figure></p>
<h1 id="通过docker-compose"><a href="#通过docker-compose" class="headerlink" title="通过docker-compose"></a>通过docker-compose</h1><p>ownCloud的docker-compose.yml示例如下：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># ownCloud with MariaDB/MySQL</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># Access via <span class="string">"http://localhost:8080"</span> (or <span class="string">"http://$(docker-machine ip):8080"</span> <span class="meta-keyword">if</span> using docker-machine)</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta"># During initial ownCloud setup, select <span class="string">"Storage &amp; database"</span> --&gt; <span class="string">"Configure the database"</span> --&gt; <span class="string">"MySQL/MariaDB"</span></span></div><div class="line"><span class="meta"># Database user: root</span></div><div class="line"><span class="meta"># Database password: example</span></div><div class="line"><span class="meta"># Database name: pick any name</span></div><div class="line"><span class="meta"># Database host: replace <span class="string">"localhost"</span> with <span class="string">"mysql"</span></span></div><div class="line"><span class="symbol"></span></div><div class="line">version: <span class="string">'2'</span></div><div class="line"><span class="symbol"></span></div><div class="line">services:</div><div class="line"><span class="symbol"></span></div><div class="line">  owncloud:</div><div class="line"><span class="symbol">    image:</span> owncloud</div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">      - <span class="string">"/mydata/code/ownCloud/ownData:/var/www/html"</span></div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="number">8021</span>:<span class="number">80</span></div><div class="line"><span class="symbol"></span></div><div class="line">  mysql:</div><div class="line"><span class="symbol">    image:</span> mysql:<span class="number">5.6</span></div><div class="line"><span class="symbol">    volumes:</span></div><div class="line">        - <span class="string">"/mydata/code/ownCloud/mysqldata:/var/lib/mysql"</span></div><div class="line"><span class="symbol">    ports:</span></div><div class="line">      - <span class="number">3308</span>:<span class="number">3306</span></div><div class="line"><span class="symbol"></span></div><div class="line">    environment:</div><div class="line"><span class="symbol">      MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></div><div class="line"><span class="symbol">      MYSQL_DATABASE:</span> ownCloud</div><div class="line"><span class="symbol">      MYSQL_USER:</span> abc</div><div class="line"><span class="symbol">      MYSQL_PASSWORD:</span> <span class="number">123456</span></div></pre></td></tr></table></figure></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker-compose up</div></pre></td></tr></table></figure>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ownCloud]<span class="comment"># docker-compose ps</span></div><div class="line">      Name             Command             State              Ports</div><div class="line">-------------------------------------------------------------------------</div><div class="line">owncloud_mysql_1   docker-            Up                 <span class="number">3306</span>/tcp</div><div class="line">                   <span class="keyword">entrypoint</span>.<span class="bash">sh</span></div><div class="line">                   mysqld</div><div class="line">owncloud_ownclou   /<span class="keyword">entrypoint</span>.<span class="bash">sh     Up                 0.0.0.0:8021-&gt;80</span></div><div class="line">d_1                apache2-for ...                       /tcp</div></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ownCloud]# docker-compose down</div><div class="line"><span class="function"><span class="title">Stopping</span></span> owncloud_owncloud_1 ... done</div><div class="line"><span class="function"><span class="title">Stopping</span></span> owncloud_mysql_1 ... done</div><div class="line"><span class="function"><span class="title">Removing</span></span> owncloud_owncloud_1 ... done</div><div class="line"><span class="function"><span class="title">Removing</span></span> owncloud_mysql_1 ... done</div><div class="line">Removing network owncloud_default</div></pre></td></tr></table></figure>
<h1 id="ownCloud配置"><a href="#ownCloud配置" class="headerlink" title="ownCloud配置"></a>ownCloud配置</h1><p>进入 <a href="http://localhost:8021/" target="_blank" rel="external">http://localhost:8021/</a> , 出现页面：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own1.png" alt=""><br>添加用户和数据库信息：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own2.png" alt=""></p>
<p>注意：红框内的数据库地址为docker-compose.yml中mysql的名称。<br>点击“安装完成”！<br>网页版登录：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-04-19/own3.png" alt=""><br>ownCloud支持windows，mac桌面端，ios/android手机端。基本可以替代在线网盘如百度网盘等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ownCloud是一个自由且开源的个人云存储解决方案。ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。&lt;br&gt;除了云存储之外，ownCloud也可用于同步日历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能（类似google documents或Duddle等等）。&lt;br&gt;ownCloud官方提供了Docker版的&lt;a href=&quot;https://store.docker.com/images/owncloud?tab=description&quot;&gt;ownCloud&lt;/a&gt;，部署安装能一步到位。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://www.kekefund.com/tags/Docker/"/>
    
      <category term="ownCloud" scheme="http://www.kekefund.com/tags/ownCloud/"/>
    
      <category term="网盘" scheme="http://www.kekefund.com/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>docker版Django</title>
    <link href="http://www.kekefund.com/2017/03/30/docker-django/"/>
    <id>http://www.kekefund.com/2017/03/30/docker-django/</id>
    <published>2017-03-30T09:14:05.000Z</published>
    <updated>2017-06-06T05:57:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django的运行是基于python的环境，加上django包。在docker中运行django，实现方式是从docker下载python镜像，然后安装django运行所依赖的包。</p>
<p>在<a href="https://store.docker.com/images/python?tab=description" target="_blank" rel="external">https://store.docker.com/images/python?tab=description</a>  中介绍pull镜像方式有一种叫python:onbuild。<br>这种镜像创建方式根据项目中提供的requirements.txt文件自动pip安装依赖包。大多数情况，通过python:onbuild能创建一个满足工程所需的独立镜像。<br><a id="more"></a></p>
<h1 id="一、编写requirements-txt"><a href="#一、编写requirements-txt" class="headerlink" title="一、编写requirements.txt"></a>一、编写requirements.txt</h1><p>下述的目录结构是一个Django Rest Framework例子，其中项目名称为restful，app名称为api。</p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/dd1.png" alt=""></p>
<p>首先我们需要把项目所依赖的包放到requirements.txt中：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Django</span>==<span class="number">1.8</span></div><div class="line"><span class="attr">django-bootstrap-toolkit</span>==<span class="number">2.15</span>.<span class="number">0</span></div><div class="line"><span class="attr">django-filter</span>==<span class="number">1.0</span>.<span class="number">1</span></div><div class="line"><span class="attr">djangorestframework</span>==<span class="number">3.5</span>.<span class="number">4</span></div><div class="line"><span class="attr">djangorestframework-jwt</span>==<span class="number">1.10</span>.<span class="number">0</span></div><div class="line"><span class="attr">pandas</span>==<span class="number">0.19</span>.<span class="number">2</span></div><div class="line"><span class="attr">SQLAlchemy</span>==<span class="number">1.1</span>.<span class="number">4</span></div><div class="line"><span class="attr">MySQL-python</span>==<span class="number">1.2</span>.<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="二、编写Dockerfile"><a href="#二、编写Dockerfile" class="headerlink" title="二、编写Dockerfile"></a>二、编写Dockerfile</h1><p>本文是基于python2.7制作的，Dockerfile文件如下：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">2</span>-<span class="keyword">onbuild</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"python"</span>, <span class="string">"./manage.py"</span>, <span class="string">"runserver"</span>, <span class="string">"0.0.0.0:8000"</span>]</span></div></pre></td></tr></table></figure></p>
<p>CMD命令执行Django启动程序，0.0.0.0是对所有IP开放，监听端口8000。<br>需要说明的是CMD中的每个参数得单独分开，像这样”runserver 0.0.0.0:8000”是运行不成功的。</p>
<h2 id="2-1-pip-国内镜像"><a href="#2-1-pip-国内镜像" class="headerlink" title="2.1 pip 国内镜像"></a>2.1 pip 国内镜像</h2><p>先创建pip.conf文件，使用阿里云作为镜像：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">[global]</span></div><div class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"><span class="section"></span></div><div class="line">[install]</div><div class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</div></pre></td></tr></table></figure></p>
<p>在创建Dockerfile:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></div><div class="line"></div><div class="line"><span class="keyword">COPY</span><span class="bash"> pip.conf /root/.pip/pip.conf</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /usr/src/app/</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /usr/src/app/requirements.txt</span></div><div class="line"></div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /usr/src/app</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"python"</span>, <span class="string">"./manage.py"</span>, <span class="string">"runserver"</span>, <span class="string">"0.0.0.0:8091"</span>]</span></div></pre></td></tr></table></figure></p>
<h1 id="三、构建镜像"><a href="#三、构建镜像" class="headerlink" title="三、构建镜像"></a>三、构建镜像</h1><ul>
<li>$ docker build -t my-python-app .<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">[cbb@number_api]$ docker build -t number_api_django:<span class="number">0.3</span> .</div><div class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">655.9</span> kB</div><div class="line">Step <span class="number">1</span>/<span class="number">2</span> : FROM <span class="keyword">python</span>:<span class="number">2</span>-onbuild</div><div class="line"># Executing <span class="number">3</span> build triggers...</div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : COPY requirements.txt /usr/src/app/</div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : RUN pip install --<span class="keyword">no</span>-cache-dir -r requirements.txt</div><div class="line"> ---&gt; Running in <span class="number">4711187</span>b3011</div><div class="line">Collecting Django==<span class="number">1.8</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">2</span>))</div><div class="line">  Downloading Django-<span class="number">1.8</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">6.2</span>MB)</div><div class="line">Collecting django-bootstrap-toolkit==<span class="number">2.15</span>.<span class="number">0</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">3</span>))</div><div class="line">  Downloading django-bootstrap-toolkit-<span class="number">2.15</span>.<span class="number">0</span>.tar.gz</div><div class="line">Collecting django-<span class="built_in">filter</span>==<span class="number">1.0</span>.<span class="number">1</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">4</span>))</div><div class="line">  Downloading django_filter-<span class="number">1.0</span>.<span class="number">1</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">54</span>kB)</div><div class="line">Collecting djangorestframework==<span class="number">3.5</span>.<span class="number">4</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">5</span>))</div><div class="line">  Downloading djangorestframework-<span class="number">3.5</span>.<span class="number">4</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">709</span>kB)</div><div class="line">Collecting djangorestframework-jwt==<span class="number">1.10</span>.<span class="number">0</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">6</span>))</div><div class="line">  Downloading djangorestframework_jwt-<span class="number">1.10</span>.<span class="number">0</span>-py2.<span class="keyword">py3</span>-none-any.whl</div><div class="line">Collecting pandas==<span class="number">0.19</span>.<span class="number">2</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading pandas-<span class="number">0.19</span>.<span class="number">2</span>-cp27-cp27mu-manylinux1_x86_64.whl (<span class="number">17.2</span>MB)</div><div class="line">Collecting SQLAlchemy==<span class="number">1.1</span>.<span class="number">4</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">8</span>))</div><div class="line">  Downloading SQLAlchemy-<span class="number">1.1</span>.<span class="number">4</span>.tar.gz (<span class="number">5.1</span>MB)</div><div class="line">Collecting MySQL-<span class="keyword">python</span>==<span class="number">1.2</span>.<span class="number">5</span> (from -r requirements.txt (<span class="built_in">line</span> <span class="number">9</span>))</div><div class="line">  Downloading MySQL-<span class="keyword">python</span>-<span class="number">1.2</span>.<span class="number">5</span>.zip (<span class="number">108</span>kB)</div><div class="line">Collecting PyJWT&lt;<span class="number">2.0</span>.<span class="number">0</span>,&gt;=<span class="number">1.4</span>.<span class="number">0</span> (from djangorestframework-jwt==<span class="number">1.10</span>.<span class="number">0</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">6</span>))</div><div class="line">  Downloading PyJWT-<span class="number">1.4</span>.<span class="number">2</span>-py2.<span class="keyword">py3</span>-none-any.whl</div><div class="line">Collecting pytz&gt;=<span class="number">2011</span><span class="keyword">k</span> (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading pytz-<span class="number">2016.10</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">483</span>kB)</div><div class="line">Collecting numpy&gt;=<span class="number">1.7</span>.<span class="number">0</span> (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading numpy-<span class="number">1.12</span>.<span class="number">1</span>-cp27-cp27mu-manylinux1_x86_64.whl (<span class="number">16.5</span>MB)</div><div class="line">Collecting <span class="keyword">python</span>-dateutil (from pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">  Downloading python_dateutil-<span class="number">2.6</span>.<span class="number">0</span>-py2.<span class="keyword">py3</span>-none-any.whl (<span class="number">194</span>kB)</div><div class="line">Requirement already satisfied: six&gt;=<span class="number">1.5</span> in /usr/local/lib/python2.<span class="number">7</span>/site-packages (from <span class="keyword">python</span>-dateutil-&gt;pandas==<span class="number">0.19</span>.<span class="number">2</span>-&gt;-r requirements.txt (<span class="built_in">line</span> <span class="number">7</span>))</div><div class="line">Installing collected package<span class="variable">s:</span> Django, django-bootstrap-toolkit, django-<span class="built_in">filter</span>, djangorestframework, PyJWT, djangorestframework-jwt, pytz, numpy, <span class="keyword">python</span>-dateutil, pandas, SQLAlchemy, MySQL-<span class="keyword">python</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> django-bootstrap-toolki<span class="variable">t:</span> started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> django-bootstrap-toolki<span class="variable">t:</span> finished with status <span class="string">'done'</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> SQLAlchemy: started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> SQLAlchemy: finished with status <span class="string">'done'</span></div><div class="line">  Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> MySQL-<span class="keyword">python</span>: started</div><div class="line">    Running setup.<span class="keyword">py</span> install <span class="keyword">for</span> MySQL-<span class="keyword">python</span>: finished with status <span class="string">'done'</span></div><div class="line">Successfully installed Django-<span class="number">1.8</span> MySQL-<span class="keyword">python</span>-<span class="number">1.2</span>.<span class="number">5</span> PyJWT-<span class="number">1.4</span>.<span class="number">2</span> SQLAlchemy-<span class="number">1.1</span>.<span class="number">4</span> django-bootstrap-toolkit-<span class="number">2.15</span>.<span class="number">0</span> django-<span class="built_in">filter</span>-<span class="number">1.0</span>.<span class="number">1</span> djangorestframework-<span class="number">3.5</span>.<span class="number">4</span> djangorestframework-jwt-<span class="number">1.10</span>.<span class="number">0</span> numpy-<span class="number">1.12</span>.<span class="number">1</span> pandas-<span class="number">0.19</span>.<span class="number">2</span> <span class="keyword">python</span>-dateutil-<span class="number">2.6</span>.<span class="number">0</span> pytz-<span class="number">2016.10</span></div><div class="line">Step <span class="number">1</span>/<span class="number">1</span> : COPY . /usr/src/app</div><div class="line"> ---&gt; <span class="number">712</span>a54b6b923</div><div class="line">Removing intermediate container df33c056f7c0</div><div class="line">Removing intermediate container <span class="number">4711187</span>b3011</div><div class="line">Removing intermediate container <span class="number">6220</span>af43bf96</div><div class="line">Step <span class="number">2</span>/<span class="number">2</span> : CMD <span class="keyword">python</span> ./manage.<span class="keyword">py</span> runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></div><div class="line"> ---&gt; Running in <span class="number">53</span>c0cf32d840</div><div class="line"> ---&gt; <span class="number">17</span>c97bc704d9</div><div class="line">Removing intermediate container <span class="number">53</span>c0cf32d840</div><div class="line">Successfully built <span class="number">17</span>c97bc704d9</div><div class="line"></div><div class="line">[cbb@number_api]$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">number_api_django   <span class="number">0.3</span>                 <span class="number">17</span>c97bc704d9        <span class="number">23</span> seconds ago      <span class="number">868</span> MB</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就成功创建了镜像number_api_django:0.3</p>
<h1 id="四、运行容器"><a href="#四、运行容器" class="headerlink" title="四、运行容器"></a>四、运行容器</h1><ul>
<li>docker run<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[cbb@number_api]$ docker run -it <span class="comment">--rm -p 8080:8000 --name api1 number_api_django:0.3</span></div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</div><div class="line">March <span class="number">30</span>, <span class="number">2017</span> - <span class="number">07</span>:<span class="number">34</span>:<span class="number">03</span></div><div class="line">Django <span class="keyword">version</span> <span class="number">1.8</span>, <span class="keyword">using</span> <span class="keyword">settings</span> <span class="string">'restful.settings'</span></div><div class="line"><span class="keyword">Starting</span> development <span class="keyword">server</span> <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>/</div><div class="line">Quit the <span class="keyword">server</span> <span class="keyword">with</span> CONTROL-C.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就启动了django程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django的运行是基于python的环境，加上django包。在docker中运行django，实现方式是从docker下载python镜像，然后安装django运行所依赖的包。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://store.docker.com/images/python?tab=description&quot;&gt;https://store.docker.com/images/python?tab=description&lt;/a&gt;  中介绍pull镜像方式有一种叫python:onbuild。&lt;br&gt;这种镜像创建方式根据项目中提供的requirements.txt文件自动pip安装依赖包。大多数情况，通过python:onbuild能创建一个满足工程所需的独立镜像。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="Dockerfile" scheme="http://www.kekefund.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest Framework 通过token访问</title>
    <link href="http://www.kekefund.com/2017/03/30/django-rest-framework-jwt/"/>
    <id>http://www.kekefund.com/2017/03/30/django-rest-framework-jwt/</id>
    <published>2017-03-30T03:47:57.000Z</published>
    <updated>2017-04-19T03:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在web apps上实现身份验证时，首先考虑到的解决方案就是Cookie。基于Cookie的身份验证使用服务器端Cookie来对每个请求进行身份验证，这意味着您需要在数据库中（如Redis）保留一个会话存储。</p>
<p>基于token令牌的身份验证是一个最近比较流行的解决方案，它依赖于每个请求发送到服务器的签名令牌，对于移动端和网页端都比较适用。</p>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>需先安装django rest framework<br><a id="more"></a></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> djangorestframework-jwt</div></pre></td></tr></table></figure>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><p>setting.py<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    '<span class="attribute">DEFAULT_PERMISSION_CLASSES'</span>: (</div><div class="line">        'rest_framework<span class="variable">.permissions</span><span class="variable">.IsAuthenticated</span>',</div><div class="line">    ),</div><div class="line">    'DEFAULT_AUTHENTICATION_CLASSES': (</div><div class="line">        'rest_framework_jwt<span class="variable">.authentication</span><span class="variable">.JSONWebTokenAuthentication</span>',</div><div class="line">        'rest_framework<span class="variable">.authentication</span><span class="variable">.SessionAuthentication</span>',</div><div class="line">        'rest_framework<span class="variable">.authentication</span><span class="variable">.BasicAuthentication</span>',</div><div class="line">    ),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工程的urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</div><div class="line"><span class="comment">#...</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    <span class="string">''</span>,</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">    url(<span class="string">r'^api-token-auth/'</span>, obtain_jwt_token),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="三、python-访问"><a href="#三、python-访问" class="headerlink" title="三、python 访问"></a>三、python 访问</h1><h2 id="1-获得令牌"><a href="#1-获得令牌" class="headerlink" title="1, 获得令牌"></a>1, 获得令牌</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">n [<span class="number">41</span>]: <span class="keyword">import</span> requests</div><div class="line"></div><div class="line">In [<span class="number">42</span>]: r = requests.post(<span class="string">"http://localhost:8000/api-token-auth/"</span>, <span class="keyword">data</span>=&#123;<span class="string">'username'</span>:<span class="string">'cbb'</span>,<span class="string">'password'</span>:<span class="string">'cbb'</span>&#125;)</div><div class="line"></div><div class="line">In [<span class="number">43</span>]: print r.<span class="keyword">text</span></div><div class="line">&#123;<span class="string">"token"</span>:<span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM"</span>&#125;</div></pre></td></tr></table></figure>
<p>注意，post请求需要网址最后带“/”，django默认自动补全是关闭的。</p>
<blockquote>
<p>网址不带/的出错提示： You called this URL via POST, but the URL doesn’t end in a slash and you have APPEND_SLASH set. Django can’t redirect to the slash URL while maintaining POST data. Change your form to point to 127.0.0.1:8000/api/users/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">44</span>]: <span class="keyword">import</span> json</div><div class="line"></div><div class="line">In [<span class="number">45</span>]: jsonData = json.loads(r.text)</div><div class="line"></div><div class="line">In [<span class="number">46</span>]: jsonData[<span class="string">u'token'</span>]</div><div class="line">Out[<span class="number">46</span>]: <span class="string">u'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM'</span></div></pre></td></tr></table></figure>
<h2 id="2，通过令牌访问"><a href="#2，通过令牌访问" class="headerlink" title="2，通过令牌访问"></a>2，通过令牌访问</h2><ul>
<li><p>构造headers</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">48</span>]: headers = &#123;<span class="string">'Authorization'</span>: <span class="string">'JWT &#123;&#125;'</span>.format(jsonData[<span class="string">u'token'</span>])&#125;</div><div class="line"></div><div class="line">In [<span class="number">49</span>]: headers</div><div class="line">Out[<span class="number">49</span>]: &#123;<span class="string">'Authorization'</span>: <span class="string">'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNiYiIsInVzZXJfaWQiOjEsImVtYWlsIjoiY2JiaW5nQDE2My5jb20iLCJleHAiOjE0OTA4MjI5MDF9.k5fznq2RoEnsIIFYvc-afHLKXiEyfZyHjRwV8-db5FM'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>get请求</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">50</span>]: r = requests.get(<span class="string">"http://127.0.0.1:8000/api/users?format=json"</span>, headers=headers)</div><div class="line"></div><div class="line">In [<span class="number">51</span>]: print r.text</div><div class="line">[&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"xx"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-01"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"keke"</span>,<span class="string">"birthday"</span>:<span class="string">"2016-03-01"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小1"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"小小1"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"xx"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-22"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-22"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"ckkk"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-09"</span>,<span class="string">"gender"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"cbb"</span>,<span class="string">"birthday"</span>:<span class="string">"2017-03-07"</span>,<span class="string">"gender"</span>:<span class="number">1</span>&#125;]</div></pre></td></tr></table></figure>
</li>
<li><p>post请求</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [54]: data = &#123;"name":"xx","birthday":"2017-03-01","gender":2&#125;</div><div class="line"></div><div class="line">In [55]: r = requests.post("http://127.0.0.1:8000/api/users/",data=data, headers=headers)</div><div class="line"></div><div class="line">In [56]: print r.text</div><div class="line">"&#123;<span class="symbol">\"</span>birthdayNumberCount<span class="symbol">\"</span>: &#123;<span class="symbol">\"</span>1<span class="symbol">\"</span>: 4, <span class="symbol">\"</span>2<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>3<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>4<span class="symbol">\"</span>: 2, <span class="symbol">\"</span>5<span class="symbol">\"</span>: 3, <span class="symbol">\"</span>6<span class="symbol">\"</span>: 0, <span class="symbol">\"</span>7<span class="symbol">\"</span>: 1, <span class="symbol">\"</span>8<span class="symbol">\"</span>: 0, <span class="symbol">\"</span>9<span class="symbol">\"</span>: 0&#125;, <span class="symbol">\"</span>suitableJob<span class="symbol">\"</span>: <span class="symbol">\"</span>公众人物、开发商、投机者、设计师、新闻工作(媒体)、表演者、变革推动者、广告创意人才、探险家、心灵导师、作家、自由职业<span class="symbol">\"</span>, <span class="symbol">\"</span>destinyNumber<span class="symbol">\"</span>: 5, <span class="symbol">\"</span>destinyMean<span class="symbol">\"</span>: <span class="symbol">\"</span>很注重感观享受，喜欢冒险、自由，个性开朗，人缘好；有口才，社交能力强，拥有演说和促销的天才。不容易离婚，爱美。<span class="symbol">\"</span>, <span class="symbol">\"</span>destinyDetailMean<span class="symbol">\"</span>: <span class="symbol">\"</span>因4的能力充斥内在，更需要职业的稳定来协助创造力与变动，不然就会形成外强中干，而无法让自己身心自由。<span class="symbol">\"</span>, <span class="symbol">\"</span>birthdayNumbers<span class="symbol">\"</span>: [2, 0, 1, 7, 0, 3, 0, 1, 1, 4, 5], <span class="symbol">\"</span>toLearn<span class="symbol">\"</span>: <span class="symbol">\"</span>节制自由，学习承诺与勇气。<span class="symbol">\"</span>, <span class="symbol">\"</span>userInfo<span class="symbol">\"</span>: &#123;<span class="symbol">\"</span>username<span class="symbol">\"</span>: <span class="symbol">\"</span>xx<span class="symbol">\"</span>, <span class="symbol">\"</span>gender<span class="symbol">\"</span>: 2, <span class="symbol">\"</span>birthday<span class="symbol">\"</span>: <span class="symbol">\"</span>2017-03-01<span class="symbol">\"</span>&#125;, <span class="symbol">\"</span>talentNumbers<span class="symbol">\"</span>: [14]&#125;"</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、进阶"><a href="#四、进阶" class="headerlink" title="四、进阶"></a>四、进阶</h1><p>自定义令牌有效期，如设置有效期为5小时，在setting.py中添加<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta<span class="comment">(hours=5)</span>,  <span class="attr">#seconds=300</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官方文档中所有能自定义的参数如下：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">JWT_AUTH = &#123;</div><div class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_encode_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_decode_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>:</div><div class="line">    <span class="string">'rest_framework_jwt.utils.jwt_response_payload_handler'</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_SECRET_KEY'</span>: settings.SECRET_KEY,</div><div class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_PUBLIC_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_PRIVATE_KEY'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</div><div class="line">    <span class="string">'JWT_VERIFY'</span>: <span class="literal">True</span>,</div><div class="line">    <span class="string">'JWT_VERIFY_EXPIRATION'</span>: <span class="literal">True</span>,</div><div class="line">    <span class="string">'JWT_LEEWAY'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</div><div class="line">    <span class="string">'JWT_AUDIENCE'</span>: <span class="literal">None</span>,</div><div class="line">    <span class="string">'JWT_ISSUER'</span>: <span class="literal">None</span>,</div><div class="line"></div><div class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">False</span>,</div><div class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</div><div class="line"></div><div class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</div><div class="line">    <span class="string">'JWT_AUTH_COOKIE'</span>: <span class="literal">None</span>,</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://github.com/GetBlimp/django-rest-framework-jwt" target="_blank" rel="external">https://github.com/GetBlimp/django-rest-framework-jwt</a><br><a href="http://getblimp.github.io/django-rest-framework-jwt/#requirements" target="_blank" rel="external">http://getblimp.github.io/django-rest-framework-jwt/#requirements</a><br><a href="http://stackoverflow.com/questions/21317899/how-do-i-create-a-login-api-using-django-rest-framework" target="_blank" rel="external">http://stackoverflow.com/questions/21317899/how-do-i-create-a-login-api-using-django-rest-framework</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在web apps上实现身份验证时，首先考虑到的解决方案就是Cookie。基于Cookie的身份验证使用服务器端Cookie来对每个请求进行身份验证，这意味着您需要在数据库中（如Redis）保留一个会话存储。&lt;/p&gt;
&lt;p&gt;基于token令牌的身份验证是一个最近比较流行的解决方案，它依赖于每个请求发送到服务器的签名令牌，对于移动端和网页端都比较适用。&lt;/p&gt;
&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;p&gt;需先安装django rest framework&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="DjangoRestFramework" scheme="http://www.kekefund.com/tags/DjangoRestFramework/"/>
    
      <category term="API" scheme="http://www.kekefund.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Django Rest Framwork实现RESTful API</title>
    <link href="http://www.kekefund.com/2017/03/30/django-restful-framework/"/>
    <id>http://www.kekefund.com/2017/03/30/django-restful-framework/</id>
    <published>2017-03-30T02:46:25.000Z</published>
    <updated>2017-04-19T03:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> djangorestframework</div><div class="line">pip <span class="keyword">install</span> markdown <span class="comment"># Markdown为可视化 API 提供了支持</span></div><div class="line">pip <span class="keyword">install</span> django-filter</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf1.png" alt=""></p>
<p>工程名：restful<br>app名：api<br>IDE：PyCharm</p>
<h1 id="配置rest-framework"><a href="#配置rest-framework" class="headerlink" title="配置rest_framework"></a>配置rest_framework</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"setting.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"># Application <span class="keyword">definition</span></div><div class="line"></div><div class="line">INSTALLED_APPS = (</div><div class="line">    <span class="string">'django.contrib.admin'</span>,</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line"></div><div class="line">    # 新增</div><div class="line">    <span class="string">'api'</span>, </div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line"></div><div class="line">)</div><div class="line"></div><div class="line"># 新增</div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (<span class="string">'rest_framework.permissions.IsAdminUser'</span>,),</div><div class="line">    <span class="string">'PAGINATE_BY'</span>: <span class="number">10</span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h1><p>数据库采用mysql</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"setting.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'restful'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'admin'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">"models.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></div><div class="line"></div><div class="line">    GENDER_CHOICES = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"Male"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"Female"</span>)</div><div class="line">    )</div><div class="line">    name = models.CharField(max_length=<span class="number">60</span>, blank=<span class="keyword">False</span>, verbose_name=<span class="string">'姓名'</span>)</div><div class="line">    birthday = models.DateField(blank=<span class="keyword">False</span>)</div><div class="line">    gender = models.IntegerField(choices=GENDER_CHOICES)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name + <span class="string">" ( "</span> + str(self.birthday) + <span class="string">")"</span></div></pre></td></tr></table></figure>
<h1 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage<span class="selector-class">.py</span> makemigrations</div><div class="line">python manage<span class="selector-class">.py</span> migrate</div></pre></td></tr></table></figure>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>在api下新建serializers.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">"serializers.py"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User, NumberologyInfo, OtherInfo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line"></div><div class="line">        fields = (<span class="string">'name'</span>, <span class="string">'birthday'</span>, <span class="string">'gender'</span>)</div></pre></td></tr></table></figure>
<h1 id="添加视图"><a href="#添加视图" class="headerlink" title="添加视图"></a>添加视图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="string">"views.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer</div><div class="line"></div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User, NumberologyInfo</div><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> UserSerializer, NumberologyInfoSerializer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    允许查看和编辑user 的 API endpoint</div><div class="line">    """</div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div></pre></td></tr></table></figure>
<h2 id="创建视图的三种方式"><a href="#创建视图的三种方式" class="headerlink" title="创建视图的三种方式"></a>创建视图的三种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="string">"views.py"</span></div><div class="line"></div><div class="line"><span class="comment"># 第一种方式：APIView</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskList</span><span class="params">(APIView)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        users = User.objects.all()</div><div class="line">        serializer = UserSerializer(users, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        serializer = UserSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line"><span class="comment"># 第二种方式：通用视图 ListCreateAPIView</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskListCreate</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 第三种方式：装饰器 api_view</span></div><div class="line"><span class="meta">@api_view(['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_list</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    List all tasks, or create a new task.</div><div class="line">    '''</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        tasks = User.objects.all()</div><div class="line">        serializer = UserSerializer(tasks, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        serializer = UserSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure>
<h1 id="设置url"><a href="#设置url" class="headerlink" title="设置url"></a>设置url</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="string">"urls.py"</span></div><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> patterns, url, include</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</div><div class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</div><div class="line"></div><div class="line">router = routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Wire up our API using automatic URL routing.</span></div><div class="line"><span class="comment"># Additionally, we include login URLs for the browseable API.</span></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line"></div><div class="line">    <span class="comment">#验证登录使用</span></div><div class="line">    url(<span class="string">r'auth'</span>,include(<span class="string">'rest_framework.urls'</span>)),</div><div class="line"></div><div class="line">    ]</div></pre></td></tr></table></figure>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf2.png" alt=""></p>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-30/drf3.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p>1，<a href="http://www.jianshu.com/p/653a0a5684eb" target="_blank" rel="external">django-rest-framework 系列教程（一）- Start Your API</a></p>
<p>2，<a href="http://www.cnblogs.com/Edifier-7/p/4994338.html" target="_blank" rel="external">Django RESTful API 设计指南</a></p>
<p>3，<a href="https://blog.laisky.com/p/django-rest/" target="_blank" rel="external">利用 Django REST framework 编写 RESTful API</a></p>
<p>4，<a href="http://jingpin.jikexueyuan.com/article/56178.html" target="_blank" rel="external">用Django Rest Framework和AngularJS开始你的项目</a></p>
<p>5，<a href="http://www.jianshu.com/p/943eae36f708" target="_blank" rel="external">Django Rest Framework 入门指南</a></p>
<p>6，<a href="http://me.iblogc.com/2016/12/17/django-rest-framework里的api请求频率控制/" target="_blank" rel="external">django-rest-framework里的api请求频率控制</a></p>
<p>7，<a href="https://github.com/thehackercat/django-rest-framework-tutorial/blob/master/4%20-%20%E9%AA%8C%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83.md" target="_blank" rel="external"> 验证和授权</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; djangorestframework&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; markdown &lt;span class=&quot;comment&quot;&gt;# Markdown为可视化 API 提供了支持&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; django-filter&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.kekefund.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.kekefund.com/tags/Django/"/>
    
      <category term="DjangoRestFramework" scheme="http://www.kekefund.com/tags/DjangoRestFramework/"/>
    
      <category term="API" scheme="http://www.kekefund.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装VNC服务器</title>
    <link href="http://www.kekefund.com/2017/03/24/centos7-install-gnome/"/>
    <id>http://www.kekefund.com/2017/03/24/centos7-install-gnome/</id>
    <published>2017-03-24T02:51:59.000Z</published>
    <updated>2017-04-19T03:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>centos7系统下的VNC服务器的中文安装教程多如牛毛，有些安装流程复杂但到最后却不成功，本人试验了不下10个教程，装的快要吐血😓。谷歌到这篇英文教程<a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">How to install VNC server on Centos 7</a>，发现是良心之作，操作简单可行。于是翻译之以饷读者。</p>
</blockquote>
<p>VNC服务器用于从远程客户端连接到服务器的桌面环境。远程计算机上使用VNC客户端连接服务器。<br>在本文我们可以了解如何在centos 7上安装VNC服务器，将采用centos yum库中提供的默认包来安装。<br><a id="more"></a></p>
<h1 id="安装-VNC服务器"><a href="#安装-VNC服务器" class="headerlink" title="安装 VNC服务器"></a>安装 VNC服务器</h1><p>如果你不曾安装过桌面环境（X windows），就按照以下命令来安装软件，重启后，你就会具有centos7的桌面。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum check-update</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum groupinstall <span class="string">"X Window System"</span></span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># unlink /etc/systemd/system/default.target</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># reboot</span></div></pre></td></tr></table></figure>
<p>现在开始安装VCN包<br><strong>步骤1：</strong>执行下面的命令安装VNC包<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># yum install tigervnc-server -y</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤2：</strong>将/lib/systemd/system/vncserver@.service拷贝至/etc/systemd/system/，并重命名为vncserver@:1.service。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@krizna ~]# cp /lib/systemd/<span class="keyword">system</span>/vncserver@.service /etc/systemd/<span class="keyword">system</span>/vncserver@:<span class="number">1.</span>service</div></pre></td></tr></table></figure></p>
<p><strong>步骤3：</strong>打开/etc/systemd/system/下的vncserver@:1.service，将<user>替换为你的用户名。<br>找到这两行：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ExecStart=<span class="meta-keyword">/sbin/</span>runuser -l <span class="params">&lt;USER&gt;</span> -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line">PIDFile=<span class="meta-keyword">/home/</span><span class="params">&lt;USER&gt;</span>/.vnc/%H%i.pid</div></pre></td></tr></table></figure></user></p>
<p>替换为（假定用户名为john）：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ExecStart</span>=/sbin/runuser -l john -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line"><span class="attr">PIDFile</span>=/home/john/.vnc/%H%i.pid</div></pre></td></tr></table></figure></p>
<p>如果你是root用户，就这样替换：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ExecStart</span>=/sbin/runuser -l root -c <span class="string">"/usr/bin/vncserver %i"</span></div><div class="line"><span class="attr">PIDFile</span>=/root/.vnc/%H%i.pid</div></pre></td></tr></table></figure></p>
<p><strong>步骤4：</strong>重新加载systemd进行更改<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl daemon-reload</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤5：</strong>创建VNC密码<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># vncpasswd</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤6：</strong>启动服务，并设置开机自动运行<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl enable vncserver@:1.service</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl start vncserver@:1.service</span></div></pre></td></tr></table></figure></p>
<p><strong>步骤7：</strong>防火墙允许VNC访问</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># firewall-cmd --permanent --add-service vnc-server</span></div><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl restart firewalld.service</span></div></pre></td></tr></table></figure>
<p>到这里，你就可以用VNC客户端连接服务器桌面了（192.168.11.165:1）。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-24/gnome.png" alt=""></p>
<blockquote>
<p>PS: VNC客户端各个系统版本都有，自行百度~。我这里用的是mac版的VNC Viewer。</p>
</blockquote>
<p>对于其他用户，创建不同的端口文件vncserver@:2.service，参考步骤2，然后重复步骤3，4，5，6即可。</p>
<h1 id="附加命令"><a href="#附加命令" class="headerlink" title="附加命令"></a>附加命令</h1><ul>
<li><p>停止VNC服务</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl stop vncserver@:1.service</span></div></pre></td></tr></table></figure>
</li>
<li><p>取消开机自动运行</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@krizna ~]# systemctl <span class="keyword">disable</span> vncserver@:<span class="number">1.</span>service</div></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙（用于故障排除）</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@krizna</span> ~]<span class="meta"># systemctl stop firewalld.service</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>好运~</p>
<p>翻译自: <a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">How to install VNC server on Centos 7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;centos7系统下的VNC服务器的中文安装教程多如牛毛，有些安装流程复杂但到最后却不成功，本人试验了不下10个教程，装的快要吐血😓。谷歌到这篇英文教程&lt;a href=&quot;http://www.krizna.com/centos/install-vnc-server-centos-7/&quot;&gt;How to install VNC server on Centos 7&lt;/a&gt;，发现是良心之作，操作简单可行。于是翻译之以饷读者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VNC服务器用于从远程客户端连接到服务器的桌面环境。远程计算机上使用VNC客户端连接服务器。&lt;br&gt;在本文我们可以了解如何在centos 7上安装VNC服务器，将采用centos yum库中提供的默认包来安装。&lt;br&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.kekefund.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="centos7" scheme="http://www.kekefund.com/tags/centos7/"/>
    
      <category term="VNC" scheme="http://www.kekefund.com/tags/VNC/"/>
    
      <category term="gnome" scheme="http://www.kekefund.com/tags/gnome/"/>
    
  </entry>
  
  <entry>
    <title>github创建分支</title>
    <link href="http://www.kekefund.com/2017/03/23/git-branch-create/"/>
    <id>http://www.kekefund.com/2017/03/23/git-branch-create/</id>
    <published>2017-03-23T08:02:32.000Z</published>
    <updated>2017-04-19T03:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>理论部分参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="external">创建与合并分支</a></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>软件一个阶段开发完成，需要建立一个分支来保存当前的稳定版本。</p>
<ul>
<li><p>采用SourceTree 创建分支：</p>
<a id="more"></a>
<p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git1.png" alt=""></p>
</li>
<li><p>创建完成后再SourceTree左侧树型菜单会出现分支名称：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git2.png" alt=""></p>
</li>
<li><p>点击推送，将分支同步到服务器<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git3.png" alt=""></p>
</li>
</ul>
<ul>
<li>github上就能看到分支了：<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-23/git4.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;理论部分参考：&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000&quot;&gt;创建与合并分支&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;实践&quot;&gt;&lt;a href=&quot;#实践&quot; class=&quot;headerlink&quot; title=&quot;实践&quot;&gt;&lt;/a&gt;实践&lt;/h1&gt;&lt;p&gt;软件一个阶段开发完成，需要建立一个分支来保存当前的稳定版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;采用SourceTree 创建分支：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.kekefund.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://www.kekefund.com/tags/git/"/>
    
      <category term="branch" scheme="http://www.kekefund.com/tags/branch/"/>
    
      <category term="SourceTree" scheme="http://www.kekefund.com/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title>docker版FTP服务器</title>
    <link href="http://www.kekefund.com/2017/03/20/docker-ftp/"/>
    <id>http://www.kekefund.com/2017/03/20/docker-ftp/</id>
    <published>2017-03-20T13:52:43.000Z</published>
    <updated>2017-04-19T03:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker版ftp服务器，适用于部署离线局域网服务器</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>来源：<a href="https://hub.docker.com/r/bogem/ftp/" target="_blank" rel="external">https://hub.docker.com/r/bogem/ftp/</a><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos mydata]<span class="comment"># docker pull bogem/ftp</span></div><div class="line"></div><div class="line">[root@VM_25_5_centos mydata]<span class="comment"># docker images</span></div><div class="line">REPOSITORY            <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</div><div class="line">docker.io/bogem/ftp   latest              a40e9c43c530        <span class="number">4</span> weeks ago         <span class="number">174.7</span> MB</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run -d -v /mydata:/home/vsftpd -p 20:20 -p 21:21 </div><div class="line">-<span class="ruby">p <span class="number">47400</span>-<span class="number">47470</span><span class="symbol">:</span><span class="number">47400</span>-<span class="number">47470</span> \</span></div><div class="line">-<span class="ruby">e FTP_USER=test </span></div><div class="line">-<span class="ruby">e FTP_PASS=test </span></div><div class="line">-<span class="ruby">e PASV_ADDRESS=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> </span></div><div class="line">-<span class="ruby">-name ftp1 \</span></div><div class="line">-<span class="ruby">-restart=always bogem/ftp</span></div></pre></td></tr></table></figure>
<p>注：PASV_ADDRESS如果设置成127.0.0.1，则只能本地访问；设置成0.0.0.0 则可以外网访问。<br>详细参数参考:<a href="https://hub.docker.com/r/fauria/vsftpd/" target="_blank" rel="external">https://hub.docker.com/r/fauria/vsftpd/</a> 中的环境变量部分。</p>
<h1 id="FileZilla客户端连接"><a href="#FileZilla客户端连接" class="headerlink" title="FileZilla客户端连接"></a>FileZilla客户端连接</h1><p><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-20/dockerftp.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker版ftp服务器，适用于部署离线局域网服务器&lt;/p&gt;
&lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;来源：&lt;a href=&quot;https://hub.docker.com/r/bogem/ftp/&quot;&gt;https://hub.docker.com/r/bogem/ftp/&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@VM_25_5_centos mydata]&lt;span class=&quot;comment&quot;&gt;# docker pull bogem/ftp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@VM_25_5_centos mydata]&lt;span class=&quot;comment&quot;&gt;# docker images&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;REPOSITORY            &lt;span class=&quot;keyword&quot;&gt;TAG&lt;/span&gt;                 &lt;span class=&quot;title&quot;&gt;IMAGE&lt;/span&gt; ID            CREATED             SIZE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io/bogem/ftp   latest              a40e9c43c530        &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; weeks ago         &lt;span class=&quot;number&quot;&gt;174.7&lt;/span&gt; MB&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="ftp" scheme="http://www.kekefund.com/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>docker部署mysql</title>
    <link href="http://www.kekefund.com/2017/03/19/docker-mysql/"/>
    <id>http://www.kekefund.com/2017/03/19/docker-mysql/</id>
    <published>2017-03-19T15:54:44.000Z</published>
    <updated>2017-04-19T03:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql在linux服务器上运行一直比较稳定，但是服务器迁移时mysql在新服务器上的配置是个比较头疼的问题，搞不好数据迁移过来了但是mysql启动不起来，坑比较多。特别是当新的服务器是离线时，安装mysql和数据同步软件更是困难重重。<br>用docker来运行mysql服务是一个比较好的解决方案，mysql的运行环境在容器内已经封装好了，而数据可以直接挂载在宿主主机上。</p>
<h1 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h1><a id="more"></a>
<p>官网地址：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">https://hub.docker.com/_/mysql/</a></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker pull mysql</span></div></pre></td></tr></table></figure>
<p>查看镜像<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_25_5_centos ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</div><div class="line">docker.io/mysql     latest              <span class="number">22</span>be5748ecbe        <span class="number">13</span> days ago         <span class="number">405.6</span> MB</div></pre></td></tr></table></figure></p>
<h1 id="二、启动容器"><a href="#二、启动容器" class="headerlink" title="二、启动容器"></a>二、启动容器</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> --name cbb-mysql1 -p 3307:3306 -v /home/mysql_data:/var/lib/mysql --restart=always <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 <span class="_">-d</span> &lt;IMAGE-ID&gt;</span></div><div class="line">b344e219ff03a92d65f75f74ab5b227838cce8619cbe695ccd1b6889f9a3d174</div></pre></td></tr></table></figure>
<ul>
<li>-p：容器的3306映射到主机的3307端口</li>
<li>-v：容器的/var/lib/mysql目录挂载在主机的/home/mysql_data目录</li>
<li>-e 设置默认参数，支持参数：    <ul>
<li>MYSQL_ROOT_PASSWORD</li>
<li>MYSQL_DATABASE</li>
<li>MYSQL_USER, MYSQL_PASSWORD</li>
<li>MYSQL_ALLOW_EMPTY_PASSWORD</li>
<li>MYSQL_RANDOM_ROOT_PASSWORD</li>
<li>MYSQL_ONETIME_PASSWORD</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">https://hub.docker.com/_/mysql/</a> 的环境参数部分（Environment Variables)</p>
</blockquote>
<p>返回一长串字符，则说明创建成功。<br>注：<image-id>也可以是REPOSITORY+TAG，如docker.io/mysql: latest</image-id></p>
<h1 id="三、进入容器"><a href="#三、进入容器" class="headerlink" title="三、进入容器"></a>三、进入容器</h1><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@VM_200_249_centos mysql-docker]<span class="comment"># docker exec -it cbb-mysql1 mysql -uroot -p</span></div><div class="line">Enter password:</div><div class="line">Welcome to the MySQ<span class="class">L monitor.  Commands end with ;</span><span class="built_in"> or </span>\g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.7.17 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle<span class="built_in"> and/or </span>its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation<span class="built_in"> and/or </span>its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type 'help;'<span class="built_in"> or </span>'\h' for help. Type '\c' to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<h1 id="四、实践"><a href="#四、实践" class="headerlink" title="四、实践"></a>四、实践</h1><p>离线数据库mysql目录下所有文件拷贝到离线服务器上<br>放到指定目录：/home/mysql_data<br>执行命令，建立mysql容器<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[localhost mysql]# docker run --<span class="keyword">name</span> cbb-mysql1 -v /home/mysql_data:/<span class="keyword">var</span>/lib/mysql -p <span class="number">3307</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -d mysql:<span class="number">5.6</span></div><div class="line"><span class="number">629</span>a150d4a9cb87080df3d89a6b91e3d56ddd8699e2f6a2d3a908f39d6f87e4c</div></pre></td></tr></table></figure></p>
<h2 id="1-进入容器，新建账户"><a href="#1-进入容器，新建账户" class="headerlink" title="1, 进入容器，新建账户"></a>1, 进入容器，新建账户</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; <span class="keyword">create</span> USER <span class="string">'ts01'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span>;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><p>username：你将创建的用户名</p>
</li>
<li><p>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</p>
</li>
<li><p>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</p>
</li>
</ul>
<h2 id="2-授权"><a href="#2-授权" class="headerlink" title="2, 授权:"></a>2, 授权:</h2><p>命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span></div></pre></td></tr></table></figure></p>
<p>说明:</p>
<ul>
<li><p>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</p>
</li>
<li><p>databasename：数据库名</p>
</li>
<li><p>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</p>
</li>
</ul>
<p><strong>例子:</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</div><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</div></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</div></pre></td></tr></table></figure>
<h2 id="3，容器间连接"><a href="#3，容器间连接" class="headerlink" title="3，容器间连接"></a>3，容器间连接</h2><p>其它容器想访问mysql容器，可以使用link来连接。例如运行：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">run</span> -d -p <span class="number">80</span>:<span class="number">8096</span> -v /<span class="built_in">home</span>/gtdata:/gtdata --restart=always --name web01 --link=cbb-mysql1:mydb java_web:<span class="number">1.0</span> /root/<span class="built_in">run</span>.sh</div></pre></td></tr></table></figure></p>
<p>注：</p>
<ul>
<li>-p 端口映射</li>
<li>-v 宿主机目录挂载</li>
<li>–name 容器名</li>
<li>–link 连接的容器，另一个容器cbb-mysql在本容器中的名称为mydb，可以直接在本容器中使用mydb</li>
</ul>
<p>java_web:1.0容器里运行的是tomcat。<br>进入jdbc.properties<br>修改<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mydb是mysql容器在web01容器中的别名，mydb等价于192.168.11.121:3306</span></div><div class="line">jdbc.url=<span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/mydb:3306/guotai</span>?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span></div></pre></td></tr></table></figure></p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><blockquote>
<p>1, [宿主服务器上安装VNC] (<a href="http://www.krizna.com/centos/install-vnc-server-centos-7/" target="_blank" rel="external">http://www.krizna.com/centos/install-vnc-server-centos-7/</a>)<br>2, <a href="https://dev.mysql.com/downloads/file/?id=468286" target="_blank" rel="external">centos版workbench</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql在linux服务器上运行一直比较稳定，但是服务器迁移时mysql在新服务器上的配置是个比较头疼的问题，搞不好数据迁移过来了但是mysql启动不起来，坑比较多。特别是当新的服务器是离线时，安装mysql和数据同步软件更是困难重重。&lt;br&gt;用docker来运行mysql服务是一个比较好的解决方案，mysql的运行环境在容器内已经封装好了，而数据可以直接挂载在宿主主机上。&lt;/p&gt;
&lt;h1 id=&quot;一、下载镜像&quot;&gt;&lt;a href=&quot;#一、下载镜像&quot; class=&quot;headerlink&quot; title=&quot;一、下载镜像&quot;&gt;&lt;/a&gt;一、下载镜像&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
      <category term="mysql" scheme="http://www.kekefund.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mac下安装docker</title>
    <link href="http://www.kekefund.com/2017/03/17/docker-on-mac/"/>
    <id>http://www.kekefund.com/2017/03/17/docker-on-mac/</id>
    <published>2017-03-17T07:01:10.000Z</published>
    <updated>2017-04-19T03:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>系统要求：OS X EI Captian 10.11以上</p>
<p>docker默认是在linux下运行，要在mac下运行，需要安装linux的虚拟环境。好在docker官网提供了mac版的docker安装包。<br>在<a href="https://www.docker.com/docker-mac" target="_blank" rel="external">https://www.docker.com/docker-mac</a> 下载Docker.img。<br>安装完成后，顶栏会出现<br><a id="more"></a><br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm1.png" alt=""></p>
<p>双击安装后，到终端查看：<br>docker version<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="string">[cbb@~]$</span> <span class="string">docker</span> <span class="string">version</span></div><div class="line"><span class="attr">Client:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">17.03</span><span class="number">.0</span><span class="bullet">-ce</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.26</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.7.5</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">60</span><span class="string">ccb22</span></div><div class="line"><span class="attr"> Built:</span>        <span class="string">Thu</span> <span class="string">Feb</span> <span class="number">23</span> <span class="number">10</span><span class="string">:40:59</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">darwin/amd64</span></div><div class="line"></div><div class="line"><span class="attr">Server:</span></div><div class="line"><span class="attr"> Version:</span>      <span class="number">17.03</span><span class="number">.0</span><span class="bullet">-ce</span></div><div class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.26</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></div><div class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.7.5</span></div><div class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">3</span><span class="string">a232c8</span></div><div class="line"><span class="attr"> Built:</span>        <span class="string">Tue</span> <span class="string">Feb</span> <span class="number">28</span> <span class="number">07</span><span class="string">:52:04</span> <span class="number">2017</span></div><div class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></div><div class="line"><span class="attr"> Experimental:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>出现版本号即安装成功！</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>可以设置开机启动<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm2.png" alt=""></p>
<p>设置与宿主机的文件共享<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm3.png" alt=""></p>
<p>设置CPU和内存大小，与VirtualBox一样。<br><img src="http://7xo67b.com1.z0.glb.clouddn.com/2017-03-17/dm4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;系统要求：OS X EI Captian 10.11以上&lt;/p&gt;
&lt;p&gt;docker默认是在linux下运行，要在mac下运行，需要安装linux的虚拟环境。好在docker官网提供了mac版的docker安装包。&lt;br&gt;在&lt;a href=&quot;https://www.docker.com/docker-mac&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt; 下载Docker.img。&lt;br&gt;安装完成后，顶栏会出现&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://www.kekefund.com/categories/Docker/"/>
    
    
      <category term="mac" scheme="http://www.kekefund.com/tags/mac/"/>
    
      <category term="docker" scheme="http://www.kekefund.com/tags/docker/"/>
    
  </entry>
  
</feed>
